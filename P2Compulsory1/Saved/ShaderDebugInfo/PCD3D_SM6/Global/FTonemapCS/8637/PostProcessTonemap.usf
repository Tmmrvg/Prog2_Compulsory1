#line 1 "MoveShaderParametersToRootConstantBuffer"
cbuffer _RootShaderParameters
{
float3 GrainRandomFull : packoffset(c1);
float FilmGrainIntensityShadows : packoffset(c1.w);
float FilmGrainIntensityMidtones : packoffset(c2);
float FilmGrainIntensityHighlights : packoffset(c2.y);
float FilmGrainShadowsMax : packoffset(c2.z);
float FilmGrainHighlightsMin : packoffset(c2.w);
float FilmGrainHighlightsMax : packoffset(c3);
float4 ScreenPosToFilmGrainTextureUV : packoffset(c5);
float3 InverseGamma : packoffset(c7);
float OutputMaxLuminance : packoffset(c8.y);
float2 Color_Extent : packoffset(c9);
float2 Color_ExtentInverse : packoffset(c9.z);
float2 Color_ScreenPosToViewportScale : packoffset(c10);
float2 Color_ScreenPosToViewportBias : packoffset(c10.z);
uint2 Color_ViewportMin : packoffset(c11);
uint2 Color_ViewportMax : packoffset(c11.z);
float2 Color_ViewportSize : packoffset(c12);
float2 Color_ViewportSizeInverse : packoffset(c12.z);
float2 Color_UVViewportMin : packoffset(c13);
float2 Color_UVViewportMax : packoffset(c13.z);
float2 Color_UVViewportSize : packoffset(c14);
float2 Color_UVViewportSizeInverse : packoffset(c14.z);
float2 Color_UVViewportBilinearMin : packoffset(c15);
float2 Color_UVViewportBilinearMax : packoffset(c15.z);
float2 Output_Extent : packoffset(c16);
float2 Output_ExtentInverse : packoffset(c16.z);
float2 Output_ScreenPosToViewportScale : packoffset(c17);
float2 Output_ScreenPosToViewportBias : packoffset(c17.z);
uint2 Output_ViewportMin : packoffset(c18);
uint2 Output_ViewportMax : packoffset(c18.z);
float2 Output_ViewportSize : packoffset(c19);
float2 Output_ViewportSizeInverse : packoffset(c19.z);
float2 Output_UVViewportMin : packoffset(c20);
float2 Output_UVViewportMax : packoffset(c20.z);
float2 Output_UVViewportSize : packoffset(c21);
float2 Output_UVViewportSizeInverse : packoffset(c21.z);
float2 Output_UVViewportBilinearMin : packoffset(c22);
float2 Output_UVViewportBilinearMax : packoffset(c22.z);
float EyeAdaptation_ExposureLowPercent : packoffset(c23);
float EyeAdaptation_ExposureHighPercent : packoffset(c23.y);
float EyeAdaptation_MinAverageLuminance : packoffset(c23.z);
float EyeAdaptation_MaxAverageLuminance : packoffset(c23.w);
float EyeAdaptation_ExposureCompensationSettings : packoffset(c24);
float EyeAdaptation_ExposureCompensationCurve : packoffset(c24.y);
float EyeAdaptation_DeltaWorldTime : packoffset(c24.z);
float EyeAdaptation_ExposureSpeedUp : packoffset(c24.w);
float EyeAdaptation_ExposureSpeedDown : packoffset(c25);
float EyeAdaptation_HistogramScale : packoffset(c25.y);
float EyeAdaptation_HistogramBias : packoffset(c25.z);
float EyeAdaptation_LuminanceMin : packoffset(c25.w);
float EyeAdaptation_LocalExposureHighlightContrastScale : packoffset(c26);
float EyeAdaptation_LocalExposureShadowContrastScale : packoffset(c26.y);
float EyeAdaptation_LocalExposureDetailStrength : packoffset(c26.z);
float EyeAdaptation_LocalExposureBlurredLuminanceBlend : packoffset(c26.w);
float EyeAdaptation_LocalExposureMiddleGreyExposureCompensation : packoffset(c27);
float EyeAdaptation_BlackHistogramBucketInfluence : packoffset(c27.y);
float EyeAdaptation_GreyMult : packoffset(c27.z);
float EyeAdaptation_ExponentialUpM : packoffset(c27.w);
float EyeAdaptation_ExponentialDownM : packoffset(c28);
float EyeAdaptation_StartDistance : packoffset(c28.y);
float EyeAdaptation_LuminanceMax : packoffset(c28.z);
float EyeAdaptation_ForceTarget : packoffset(c28.w);
int EyeAdaptation_VisualizeDebugType : packoffset(c29);
float4 ColorToBloom : packoffset(c32);
float2 BloomUVViewportBilinearMin : packoffset(c33);
float2 BloomUVViewportBilinearMax : packoffset(c33.z);
float4 ColorScale0 : packoffset(c40);
float4 BloomDirtMaskTint : packoffset(c41);
float4 ChromaticAberrationParams : packoffset(c42);
float4 TonemapperParams : packoffset(c43);
float4 LensPrincipalPointOffsetScale : packoffset(c44);
float4 LensPrincipalPointOffsetScaleInverse : packoffset(c45);
float EditorNITLevel : packoffset(c46.y);
uint bOutputInHDR : packoffset(c46.z);
}

#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 6
// #define __SHADER_TARGET_MINOR 6
// #define ALLOW_STATIC_LIGHTING 1
// #define AMPLIFICATIONSHADER 0
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1
// #define COMPILER_DEFINE #define
// #define COMPILER_DXC 1
// #define COMPILER_SUPPORTS_HLSL2021 1
// #define COMPUTESHADER 1
// #define DIM_OUTPUT_DEVICE 6
// #define DO_CHECK 1
// #define DO_GUARD_SLOW 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define EYEADAPTATION_EXPOSURE_FIX 1
// #define FORWARD_SHADING 0
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0
// #define GBUFFER_HAS_VELOCITY 1
// #define GBUFFER_REFACTOR 1
// #define GEOMETRYSHADER 0
// #define HAS_INVERTED_Z_BUFFER 1
// #define INSTANCED_STEREO 0
// #define IRIS_NORMAL 0
// #define MATERIAL_ENERGYCONSERVATION 0
// #define MATERIAL_ROUGHDIFFUSE 0
// #define MESHSHADER 0
// #define METAL_MSAA_HDR_DECODE 0
// #define MOBILE_MULTI_VIEW 0
// #define MULTI_VIEW 0
// #define PIXELSHADER 0
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1
// #define PLATFORM_SUPPORTS_BINDLESS 1
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 1
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define PLATFORM_SUPPORTS_SRV_UB 1
// #define PLATFORM_SUPPORTS_UB_STRUCT 1
// #define POST_PROCESS_ALPHA 0
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_OIT 0
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1
// #define PROJECT_SUPPORTS_LUMEN 1
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_DEFERRED 1
// #define SM6_PROFILE 1
// #define STRATA_ADVANCED_DEBUG_ENABLED 0
// #define STRATA_ENABLED 0
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0
// #define SUPPORTS_FILM_GRAIN 1
// #define SUPPORTS_SCENE_COLOR_APPLY_PARAMETERS 1
// #define THREADGROUP_SIZEX 8
// #define THREADGROUP_SIZEY 8
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f
// #define USE_BLOOM 1
// #define USE_COLOR_FRINGE 1
// #define USE_DBUFFER 1
// #define USE_FILM_GRAIN 1
// #define USE_GAMMA_ONLY 0
// #define USE_GRAIN_QUANTIZATION 1
// #define USE_LOCAL_EXPOSURE 1
// #define USE_SHARPEN 1
// #define USE_VIGNETTE 1
// #define USE_VOLUME_LUT 1
// #define VELOCITY_ENCODE_DEPTH 1
// #define VERTEXSHADER 0
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0
#line 1 "/Engine/Private/PostProcessTonemap.usf"
#line 14 "/Engine/Private/PostProcessTonemap.usf"
#line 1 "Common.ush"
#line 9 "/Engine/Private/Common.ush"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 36 "/Engine/Public/Platform.ush"
#line 1 "Platform/D3D/D3DCommon.ush"
#line 15 "/Engine/Public/Platform/D3D/D3DCommon.ush"
precise float MakePrecise(float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(float4 v) { precise float4 pv = v; return pv; }





SamplerState D3DStaticPointWrappedSampler : register(s0, space1000);
SamplerState D3DStaticPointClampedSampler : register(s1, space1000);
SamplerState D3DStaticBilinearWrappedSampler : register(s2, space1000);
SamplerState D3DStaticBilinearClampedSampler : register(s3, space1000);
SamplerState D3DStaticTrilinearWrappedSampler : register(s4, space1000);
SamplerState D3DStaticTrilinearClampedSampler : register(s5, space1000);
#line 41 "/Engine/Public/Platform/D3D/D3DCommon.ush"
RWStructuredBuffer<uint> UEDiagnosticBuffer : register(u0, space999);

void UEReportAssertWithPayload(uint AssertID, uint4 Payload)
{
	if (WaveIsFirstLane())
	{

		uint OldValue = 0;
		InterlockedAdd(UEDiagnosticBuffer[0], 1, OldValue);
		if (OldValue == 0)
		{
			UEDiagnosticBuffer[1] = AssertID;
			UEDiagnosticBuffer[2] = Payload.x;
			UEDiagnosticBuffer[3] = Payload.y;
			UEDiagnosticBuffer[4] = Payload.z;
			UEDiagnosticBuffer[5] = Payload.w;
		}


		UEDiagnosticBuffer[0xFFFFFFFF] = 0;
	}
}
#line 106 "/Engine/Public/Platform/D3D/D3DCommon.ush"
		uint64_t  PackUlongType(uint2 Value)
		{
			return (( uint64_t )Value.y << 32) | Value.x;
		}

		uint2 UnpackUlongType( uint64_t  Value)
		{
			return uint2(uint(Value), uint(Value >> 32));
		}



		void ImageInterlockedMaxUInt64(RWTexture2D< uint64_t > Dest, uint2 Coord,  uint64_t  Value)
		{
			InterlockedMax(Dest[Coord], Value);
		}





	#define  GetResourceFromHeap(Type, Index) ResourceDescriptorHeap[Index]
	#define  GetSamplerFromHeap(Type, Index) SamplerDescriptorHeap[Index]
#line 37 "/Engine/Public/Platform.ush"
#line 39 "/Engine/Public/Platform.ush"
#line 1 "/Engine/Public/BindlessResources.ush"
#line 40 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 498 "/Engine/Public/Platform.ush"
void ShaderYield()
{

}
#line 736 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}
#line 901 "/Engine/Public/Platform.ush"
bool select_internal(bool c, bool a, bool b) { return bool (c ? a.x : b.x); } bool2 select_internal(bool c, bool a, bool2 b) { return bool2 (c ? a : b.x, c ? a : b.y); } bool2 select_internal(bool c, bool2 a, bool b) { return bool2 (c ? a.x : b , c ? a.y : b ); } bool2 select_internal(bool c, bool2 a, bool2 b) { return bool2 (c ? a.x : b.x, c ? a.y : b.y); } bool2 select_internal(bool2 c, bool a, bool b) { return bool2 (c.x ? a : b , c.y ? a : b ); } bool2 select_internal(bool2 c, bool a, bool2 b) { return bool2 (c.x ? a : b.x, c.y ? a : b.y); } bool2 select_internal(bool2 c, bool2 a, bool b) { return bool2 (c.x ? a.x : b , c.y ? a.y : b ); } bool2 select_internal(bool2 c, bool2 a, bool2 b) { return bool2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool c, bool a, bool3 b) { return bool3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } bool3 select_internal(bool c, bool3 a, bool b) { return bool3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } bool3 select_internal(bool c, bool3 a, bool3 b) { return bool3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } bool3 select_internal(bool3 c, bool a, bool b) { return bool3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } bool3 select_internal(bool3 c, bool a, bool3 b) { return bool3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } bool3 select_internal(bool3 c, bool3 a, bool b) { return bool3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } bool3 select_internal(bool3 c, bool3 a, bool3 b) { return bool3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool c, bool a, bool4 b) { return bool4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } bool4 select_internal(bool c, bool4 a, bool b) { return bool4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } bool4 select_internal(bool c, bool4 a, bool4 b) { return bool4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } bool4 select_internal(bool4 c, bool a, bool b) { return bool4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } bool4 select_internal(bool4 c, bool a, bool4 b) { return bool4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } bool4 select_internal(bool4 c, bool4 a, bool b) { return bool4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } bool4 select_internal(bool4 c, bool4 a, bool4 b) { return bool4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
uint select_internal(bool c, uint a, uint b) { return uint (c ? a.x : b.x); } uint2 select_internal(bool c, uint a, uint2 b) { return uint2 (c ? a : b.x, c ? a : b.y); } uint2 select_internal(bool c, uint2 a, uint b) { return uint2 (c ? a.x : b , c ? a.y : b ); } uint2 select_internal(bool c, uint2 a, uint2 b) { return uint2 (c ? a.x : b.x, c ? a.y : b.y); } uint2 select_internal(bool2 c, uint a, uint b) { return uint2 (c.x ? a : b , c.y ? a : b ); } uint2 select_internal(bool2 c, uint a, uint2 b) { return uint2 (c.x ? a : b.x, c.y ? a : b.y); } uint2 select_internal(bool2 c, uint2 a, uint b) { return uint2 (c.x ? a.x : b , c.y ? a.y : b ); } uint2 select_internal(bool2 c, uint2 a, uint2 b) { return uint2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } uint3 select_internal(bool c, uint a, uint3 b) { return uint3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } uint3 select_internal(bool c, uint3 a, uint b) { return uint3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } uint3 select_internal(bool c, uint3 a, uint3 b) { return uint3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } uint3 select_internal(bool3 c, uint a, uint b) { return uint3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } uint3 select_internal(bool3 c, uint a, uint3 b) { return uint3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } uint3 select_internal(bool3 c, uint3 a, uint b) { return uint3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } uint3 select_internal(bool3 c, uint3 a, uint3 b) { return uint3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } uint4 select_internal(bool c, uint a, uint4 b) { return uint4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } uint4 select_internal(bool c, uint4 a, uint b) { return uint4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } uint4 select_internal(bool c, uint4 a, uint4 b) { return uint4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } uint4 select_internal(bool4 c, uint a, uint b) { return uint4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } uint4 select_internal(bool4 c, uint a, uint4 b) { return uint4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } uint4 select_internal(bool4 c, uint4 a, uint b) { return uint4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } uint4 select_internal(bool4 c, uint4 a, uint4 b) { return uint4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
int select_internal(bool c, int a, int b) { return int (c ? a.x : b.x); } int2 select_internal(bool c, int a, int2 b) { return int2 (c ? a : b.x, c ? a : b.y); } int2 select_internal(bool c, int2 a, int b) { return int2 (c ? a.x : b , c ? a.y : b ); } int2 select_internal(bool c, int2 a, int2 b) { return int2 (c ? a.x : b.x, c ? a.y : b.y); } int2 select_internal(bool2 c, int a, int b) { return int2 (c.x ? a : b , c.y ? a : b ); } int2 select_internal(bool2 c, int a, int2 b) { return int2 (c.x ? a : b.x, c.y ? a : b.y); } int2 select_internal(bool2 c, int2 a, int b) { return int2 (c.x ? a.x : b , c.y ? a.y : b ); } int2 select_internal(bool2 c, int2 a, int2 b) { return int2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool c, int a, int3 b) { return int3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } int3 select_internal(bool c, int3 a, int b) { return int3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } int3 select_internal(bool c, int3 a, int3 b) { return int3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } int3 select_internal(bool3 c, int a, int b) { return int3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } int3 select_internal(bool3 c, int a, int3 b) { return int3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } int3 select_internal(bool3 c, int3 a, int b) { return int3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } int3 select_internal(bool3 c, int3 a, int3 b) { return int3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool c, int a, int4 b) { return int4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } int4 select_internal(bool c, int4 a, int b) { return int4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } int4 select_internal(bool c, int4 a, int4 b) { return int4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } int4 select_internal(bool4 c, int a, int b) { return int4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } int4 select_internal(bool4 c, int a, int4 b) { return int4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } int4 select_internal(bool4 c, int4 a, int b) { return int4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } int4 select_internal(bool4 c, int4 a, int4 b) { return int4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool c, float a, float b) { return float (c ? a.x : b.x); } float2 select_internal(bool c, float a, float2 b) { return float2 (c ? a : b.x, c ? a : b.y); } float2 select_internal(bool c, float2 a, float b) { return float2 (c ? a.x : b , c ? a.y : b ); } float2 select_internal(bool c, float2 a, float2 b) { return float2 (c ? a.x : b.x, c ? a.y : b.y); } float2 select_internal(bool2 c, float a, float b) { return float2 (c.x ? a : b , c.y ? a : b ); } float2 select_internal(bool2 c, float a, float2 b) { return float2 (c.x ? a : b.x, c.y ? a : b.y); } float2 select_internal(bool2 c, float2 a, float b) { return float2 (c.x ? a.x : b , c.y ? a.y : b ); } float2 select_internal(bool2 c, float2 a, float2 b) { return float2 (c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool c, float a, float3 b) { return float3 (c ? a : b.x, c ? a : b.y, c ? a : b.z); } float3 select_internal(bool c, float3 a, float b) { return float3 (c ? a.x : b , c ? a.y : b , c ? a.z : b ); } float3 select_internal(bool c, float3 a, float3 b) { return float3 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z); } float3 select_internal(bool3 c, float a, float b) { return float3 (c.x ? a : b , c.y ? a : b , c.z ? a : b ); } float3 select_internal(bool3 c, float a, float3 b) { return float3 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z); } float3 select_internal(bool3 c, float3 a, float b) { return float3 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b ); } float3 select_internal(bool3 c, float3 a, float3 b) { return float3 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool c, float a, float4 b) { return float4 (c ? a : b.x, c ? a : b.y, c ? a : b.z, c ? a : b.w); } float4 select_internal(bool c, float4 a, float b) { return float4 (c ? a.x : b , c ? a.y : b , c ? a.z : b , c ? a.w : b ); } float4 select_internal(bool c, float4 a, float4 b) { return float4 (c ? a.x : b.x, c ? a.y : b.y, c ? a.z : b.z, c ? a.w : b.w); } float4 select_internal(bool4 c, float a, float b) { return float4 (c.x ? a : b , c.y ? a : b , c.z ? a : b , c.w ? a : b ); } float4 select_internal(bool4 c, float a, float4 b) { return float4 (c.x ? a : b.x, c.y ? a : b.y, c.z ? a : b.z, c.w ? a : b.w); } float4 select_internal(bool4 c, float4 a, float b) { return float4 (c.x ? a.x : b , c.y ? a.y : b , c.z ? a.z : b , c.w ? a.w : b ); } float4 select_internal(bool4 c, float4 a, float4 b) { return float4 (c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
#line 913 "/Engine/Public/Platform.ush"
bool and_internal(bool a, bool b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool or_internal(bool a, bool b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }
#line 949 "/Engine/Public/Platform.ush"
float CondMask(bool Cond, float Src0, float Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int CondMask(bool Cond, int Src0, int Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint CondMask(bool Cond, uint Src0, uint Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{


	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}




uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}
#line 1054 "/Engine/Public/Platform.ush"
uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}
#line 1086 "/Engine/Public/Platform.ush"
uint MaskedBitCount( uint2 Bits )
{
	return MaskedBitCount( Bits, WaveGetLaneIndex() );
}



uint2 WaveBallot( bool Expr )
{
	return WaveActiveBallot( Expr ).xy;
}



uint WaveGetActiveLaneIndexLast()
{
	uint2 ActiveMask = WaveActiveBallot( true ).xy;
	return firstbithigh( ActiveMask.y ? ActiveMask.y : ActiveMask.x ) + ( ActiveMask.y ? 32 : 0 );
}
#line 10 "/Engine/Private/Common.ush"
#line 31 "/Engine/Private/Common.ush"
struct FloatDeriv
{
	float Value;
	float Ddx;
	float Ddy;
};

struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FloatDeriv3
{
	float3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FloatDeriv4
{
	float4 Value;
	float4 Ddx;
	float4 Ddy;
};

FloatDeriv ConstructFloatDeriv(float InValue, float InDdx, float InDdy)
{
	FloatDeriv Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv2 ConstructFloatDeriv2(float2 InValue, float2 InDdx, float2 InDdy)
{
	FloatDeriv2 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv3 ConstructFloatDeriv3(float3 InValue, float3 InDdx, float3 InDdy)
{
	FloatDeriv3 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv4 ConstructFloatDeriv4(float4 InValue, float4 InDdx, float4 InDdy)
{
	FloatDeriv4 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}
#line 109 "/Engine/Private/Common.ush"
const static  float  PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
const static float Max11BitsFloat = 65024.0f;
const static float Max10BitsFloat = 64512.0f;
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);
#line 166 "/Engine/Private/Common.ush"
#line 1 "GeneratedUniformBufferTypes.ush"
#line 8 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "Nanite/NanitePackedNaniteView.ush"
#line 5 "/Engine/Private/Nanite/NanitePackedNaniteView.ush"
struct FPackedNaniteView
{
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ViewToTranslatedWorld;

	float4x4 TranslatedWorldToView;
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 ViewToClip;
	float4x4 ClipToRelativeWorld;

	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToRelativeWorld;

	int4 ViewRect;
	float4 ViewSizeAndInvSize;
	float4 ClipSpaceScaleOffset;
	float4 PreViewTranslation;
	float4 PrevPreViewTranslation;
	float4 WorldCameraOrigin;
	float4 ViewForwardAndNearPlane;

	float3 ViewTilePosition;
	float RangeBasedCullingDistance;

	float3 MatrixTilePosition;
	float Padding1;

	float2 LODScales;
	float MinBoundsRadiusSq;
	uint StreamingPriorityCategory_AndFlags;

	int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;

	int4 HZBTestViewRect;
};
#line 9 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 11 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsVisibilityCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsVisibilityCommonStruct.ush"
struct FPackedHairSample
{
	float Depth;
	uint PrimitiveID_MacroGroupID;
	uint Tangent_Coverage8bit;
	uint BaseColor_Roughness;
	uint Specular_LightChannels_Backlit;
};

struct FPackedHairVis
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
};

struct FPackedHairVisPPLL
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
	uint NextNodeIndex;
};
#line 12 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsVoxelPageCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsVoxelPageCommonStruct.ush"
struct FPackedVirtualVoxelNodeDesc
{
	float3 TranslatedWorldMinAABB;
	uint PackedPageIndexResolution;
	float3 TranslatedWorldMaxAABB;
	uint PageIndexOffset_VoxelWorldSize;
};

struct FVoxelizationViewInfo
{
	float4x4 TranslatedWorldToClip;
	float3 ViewForward;
	float Pad0;
	uint2 RasterResolution;
	float2 Pad1;
};
#line 13 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsDeepShadowCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsDeepShadowCommonStruct.ush"
struct FDeepShadowViewInfo
{
	float4x4 TranslatedWorldToClipScaledBiased;
	float4x4 TranslatedWorldToClip;
	float4 AtlasScaleBias;
	float3 ViewForward;
	float MinRadiusAtDepth1;
};
#line 14 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 167 "/Engine/Private/Common.ush"
#line 169 "/Engine/Private/Common.ush"
#line 1 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"


cbuffer  UniformBufferConstants_View
{
	float4x4 View_TranslatedWorldToClip;
	float4x4 View_TranslatedWorldToSubpixelClip;
	float4x4 View_RelativeWorldToClip;
	float4x4 View_ClipToRelativeWorld;
	float4x4 View_TranslatedWorldToView;
	float4x4 View_ViewToTranslatedWorld;
	float4x4 View_TranslatedWorldToCameraView;
	float4x4 View_CameraViewToTranslatedWorld;
	float4x4 View_ViewToClip;
	float4x4 View_ViewToClipNoAA;
	float4x4 View_ClipToView;
	float4x4 View_ClipToTranslatedWorld;
	float4x4 View_SVPositionToTranslatedWorld;
	float4x4 View_ScreenToRelativeWorld;
	float4x4 View_ScreenToTranslatedWorld;
	float4x4 View_MobileMultiviewShadowTransform;
	float3 View_ViewTilePosition;
	float PrePadding_View_1036;
	float3 View_MatrixTilePosition;
	float PrePadding_View_1052;
	float3 View_ViewForward;
	float PrePadding_View_1068;
	float3 View_ViewUp;
	float PrePadding_View_1084;
	float3 View_ViewRight;
	float PrePadding_View_1100;
	float3 View_HMDViewNoRollUp;
	float PrePadding_View_1116;
	float3 View_HMDViewNoRollRight;
	float PrePadding_View_1132;
	float4 View_InvDeviceZToWorldZTransform;
	float4 View_ScreenPositionScaleBias;
	float3 View_RelativeWorldCameraOrigin;
	float PrePadding_View_1180;
	float3 View_TranslatedWorldCameraOrigin;
	float PrePadding_View_1196;
	float3 View_RelativeWorldViewOrigin;
	float PrePadding_View_1212;
	float3 View_RelativePreViewTranslation;
	float PrePadding_View_1228;
	float4x4 View_PrevViewToClip;
	float4x4 View_PrevClipToView;
	float4x4 View_PrevTranslatedWorldToClip;
	float4x4 View_PrevTranslatedWorldToView;
	float4x4 View_PrevViewToTranslatedWorld;
	float4x4 View_PrevTranslatedWorldToCameraView;
	float4x4 View_PrevCameraViewToTranslatedWorld;
	float3 View_PrevTranslatedWorldCameraOrigin;
	float PrePadding_View_1692;
	float3 View_PrevRelativeWorldCameraOrigin;
	float PrePadding_View_1708;
	float3 View_PrevRelativeWorldViewOrigin;
	float PrePadding_View_1724;
	float3 View_RelativePrevPreViewTranslation;
	float PrePadding_View_1740;
	float4x4 View_PrevClipToRelativeWorld;
	float4x4 View_PrevScreenToTranslatedWorld;
	float4x4 View_ClipToPrevClip;
	float4x4 View_ClipToPrevClipWithAA;
	float4 View_TemporalAAJitter;
	float4 View_GlobalClippingPlane;
	float2 View_FieldOfViewWideAngles;
	float2 View_PrevFieldOfViewWideAngles;
	float4 View_ViewRectMin;
	float4 View_ViewSizeAndInvSize;
	uint4 View_ViewRectMinAndSize;
	float4 View_LightProbeSizeRatioAndInvSizeRatio;
	float4 View_BufferSizeAndInvSize;
	float4 View_BufferBilinearUVMinMax;
	float4 View_ScreenToViewSpace;
	float2 View_BufferToSceneTextureScale;
	float2 View_ResolutionFractionAndInv;
	int View_NumSceneColorMSAASamples;
	float View_SeparateWaterMainDirLightLuminance;
	float View_PreExposure;
	float View_OneOverPreExposure;
	float4 View_DiffuseOverrideParameter;
	float4 View_SpecularOverrideParameter;
	float4 View_NormalOverrideParameter;
	float2 View_RoughnessOverrideParameter;
	float View_PrevFrameGameTime;
	float View_PrevFrameRealTime;
	float View_OutOfBoundsMask;
	float PrePadding_View_2260;
	float PrePadding_View_2264;
	float PrePadding_View_2268;
	float3 View_WorldCameraMovementSinceLastFrame;
	float View_CullingSign;
	float View_NearPlane;
	float View_GameTime;
	float View_RealTime;
	float View_DeltaTime;
	float View_MaterialTextureMipBias;
	float View_MaterialTextureDerivativeMultiply;
	uint View_Random;
	uint View_FrameNumber;
	uint View_StateFrameIndexMod8;
	uint View_StateFrameIndex;
	uint View_DebugViewModeMask;
	float View_CameraCut;
	float View_UnlitViewmodeMask;
	float PrePadding_View_2340;
	float PrePadding_View_2344;
	float PrePadding_View_2348;
	float4 View_DirectionalLightColor;
	float3 View_DirectionalLightDirection;
	float PrePadding_View_2380;
	float4 View_TranslucencyLightingVolumeMin[2];
	float4 View_TranslucencyLightingVolumeInvSize[2];
	float4 View_TemporalAAParams;
	float4 View_CircleDOFParams;
	float View_DepthOfFieldSensorWidth;
	float View_DepthOfFieldFocalDistance;
	float View_DepthOfFieldScale;
	float View_DepthOfFieldFocalLength;
	float View_DepthOfFieldFocalRegion;
	float View_DepthOfFieldNearTransitionRegion;
	float View_DepthOfFieldFarTransitionRegion;
	float View_MotionBlurNormalizedToPixel;
	float View_GeneralPurposeTweak;
	float View_GeneralPurposeTweak2;
	float View_DemosaicVposOffset;
	float View_DecalDepthBias;
	float3 View_IndirectLightingColorScale;
	float PrePadding_View_2540;
	float3 View_PrecomputedIndirectLightingColorScale;
	float PrePadding_View_2556;
	float3 View_PrecomputedIndirectSpecularColorScale;
	float PrePadding_View_2572;
	float4 View_AtmosphereLightDirection[2];
	float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 View_AtmosphereLightIlluminanceOuterSpace[2];
	float4 View_AtmosphereLightDiscLuminance[2];
	float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 View_SkyViewLutSizeAndInvSize;
	float3 View_SkyCameraTranslatedWorldOrigin;
	float PrePadding_View_2764;
	float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 View_SkyViewLutReferential;
	float4 View_SkyAtmosphereSkyLuminanceFactor;
	float View_SkyAtmospherePresentInScene;
	float View_SkyAtmosphereHeightFogContribution;
	float View_SkyAtmosphereBottomRadiusKm;
	float View_SkyAtmosphereTopRadiusKm;
	float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float PrePadding_View_2920;
	float PrePadding_View_2924;
	float3 View_NormalCurvatureToRoughnessScaleBias;
	float View_RenderingReflectionCaptureMask;
	float View_RealTimeReflectionCapture;
	float View_RealTimeReflectionCapturePreExposure;
	float PrePadding_View_2952;
	float PrePadding_View_2956;
	float4 View_AmbientCubemapTint;
	float View_AmbientCubemapIntensity;
	float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float View_SkyLightAffectReflectionFlag;
	float View_SkyLightAffectGlobalIlluminationFlag;
	float4 View_SkyLightColor;
	float4 View_MobileSkyIrradianceEnvironmentMap[8];
	float View_MobilePreviewMode;
	float View_HMDEyePaddingOffset;
	float View_ReflectionCubemapMaxMip;
	float View_ShowDecalsMask;
	uint View_DistanceFieldAOSpecularOcclusionMode;
	float View_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_View_3160;
	float PrePadding_View_3164;
	float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int View_StereoPassIndex;
	float4 View_GlobalVolumeCenterAndExtent[6];
	float4 View_GlobalVolumeWorldToUVAddAndMul[6];
	float4 View_GlobalDistanceFieldMipWorldToUVScale[6];
	float4 View_GlobalDistanceFieldMipWorldToUVBias[6];
	float View_GlobalDistanceFieldMipFactor;
	float View_GlobalDistanceFieldMipTransition;
	int View_GlobalDistanceFieldClipmapSizeInPages;
	int PrePadding_View_3580;
	float3 View_GlobalDistanceFieldInvPageAtlasSize;
	float PrePadding_View_3596;
	float3 View_GlobalDistanceFieldInvCoverageAtlasSize;
	float View_GlobalVolumeDimension;
	float View_GlobalVolumeTexelSize;
	float View_MaxGlobalDFAOConeDistance;
	uint View_NumGlobalSDFClipmaps;
	float View_CoveredExpandSurfaceScale;
	float View_NotCoveredExpandSurfaceScale;
	float View_NotCoveredMinStepScale;
	float View_DitheredTransparencyStepThreshold;
	float View_DitheredTransparencyTraceThreshold;
	int2 View_CursorPosition;
	float View_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_View_3660;
	float3 View_VolumetricFogInvGridSize;
	float PrePadding_View_3676;
	float3 View_VolumetricFogGridZParams;
	float PrePadding_View_3692;
	float2 View_VolumetricFogSVPosToVolumeUV;
	float View_VolumetricFogMaxDistance;
	float PrePadding_View_3708;
	float3 View_VolumetricLightmapWorldToUVScale;
	float PrePadding_View_3724;
	float3 View_VolumetricLightmapWorldToUVAdd;
	float PrePadding_View_3740;
	float3 View_VolumetricLightmapIndirectionTextureSize;
	float View_VolumetricLightmapBrickSize;
	float3 View_VolumetricLightmapBrickTexelSize;
	float View_IndirectLightingCacheShowFlag;
	float View_EyeToPixelSpreadAngle;
	float PrePadding_View_3780;
	float PrePadding_View_3784;
	float PrePadding_View_3788;
	float4 View_XRPassthroughCameraUVs[2];
	float View_GlobalVirtualTextureMipBias;
	uint View_VirtualTextureFeedbackShift;
	uint View_VirtualTextureFeedbackMask;
	uint View_VirtualTextureFeedbackStride;
	uint View_VirtualTextureFeedbackJitterOffset;
	uint View_VirtualTextureFeedbackSampleOffset;
	uint PrePadding_View_3848;
	uint PrePadding_View_3852;
	float4 View_RuntimeVirtualTextureMipLevel;
	float2 View_RuntimeVirtualTexturePackHeight;
	float PrePadding_View_3880;
	float PrePadding_View_3884;
	float4 View_RuntimeVirtualTextureDebugParams;
	float View_OverrideLandscapeLOD;
	int View_FarShadowStaticMeshLODBias;
	float View_MinRoughness;
	float PrePadding_View_3916;
	float4 View_HairRenderInfo;
	uint View_EnableSkyLight;
	uint View_HairRenderInfoBits;
	uint View_HairComponents;
	float View_bSubsurfacePostprocessEnabled;
	float4 View_SSProfilesTextureSizeAndInvSize;
	float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 View_PhysicsFieldClipmapCenter;
	float View_PhysicsFieldClipmapDistance;
	int View_PhysicsFieldClipmapResolution;
	int View_PhysicsFieldClipmapExponent;
	int View_PhysicsFieldClipmapCount;
	int View_PhysicsFieldTargetCount;
	int4 View_PhysicsFieldTargets[32];
	uint View_InstanceSceneDataSOAStride;
	uint View_GPUSceneViewId;
	float View_ViewResolutionFraction;
	float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	uint PrePadding_View_4548;
	uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	uint PrePadding_View_4556;
	uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	uint PrePadding_View_4564;
	uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	uint PrePadding_View_4572;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	uint PrePadding_View_4580;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	uint PrePadding_View_4588;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	uint PrePadding_View_4596;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	uint PrePadding_View_4604;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	uint PrePadding_View_4612;
	uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	uint PrePadding_View_4620;
	uint BindlessResource_View_SkyBentNormalBrickTexture ;
	uint PrePadding_View_4628;
	uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	uint PrePadding_View_4636;
	uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	uint PrePadding_View_4644;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	uint PrePadding_View_4652;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	uint PrePadding_View_4660;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	uint PrePadding_View_4668;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	uint PrePadding_View_4676;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	uint PrePadding_View_4684;
	uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	uint PrePadding_View_4692;
	uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	uint PrePadding_View_4700;
	uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	uint PrePadding_View_4708;
	uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	uint PrePadding_View_4716;
	uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	uint PrePadding_View_4724;
	uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	uint PrePadding_View_4732;
	uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	uint PrePadding_View_4740;
	uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	uint PrePadding_View_4748;
	uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	uint PrePadding_View_4756;
	uint BindlessResource_View_AtmosphereIrradianceTexture ;
	uint PrePadding_View_4764;
	uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	uint PrePadding_View_4772;
	uint BindlessResource_View_AtmosphereInscatterTexture ;
	uint PrePadding_View_4780;
	uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	uint PrePadding_View_4788;
	uint BindlessResource_View_PerlinNoiseGradientTexture ;
	uint PrePadding_View_4796;
	uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	uint PrePadding_View_4804;
	uint BindlessResource_View_PerlinNoise3DTexture ;
	uint PrePadding_View_4812;
	uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	uint PrePadding_View_4820;
	uint BindlessResource_View_SobolSamplingTexture ;
	uint PrePadding_View_4828;
	uint BindlessSampler_View_SharedPointWrappedSampler ;
	uint PrePadding_View_4836;
	uint BindlessSampler_View_SharedPointClampedSampler ;
	uint PrePadding_View_4844;
	uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	uint PrePadding_View_4852;
	uint BindlessSampler_View_SharedBilinearClampedSampler ;
	uint PrePadding_View_4860;
	uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	uint PrePadding_View_4868;
	uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	uint PrePadding_View_4876;
	uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	uint PrePadding_View_4884;
	uint BindlessResource_View_PreIntegratedBRDF ;
	uint PrePadding_View_4892;
	uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	uint PrePadding_View_4900;
	uint BindlessResource_View_PrimitiveSceneData ;
	uint PrePadding_View_4908;
	uint BindlessResource_View_InstanceSceneData ;
	uint PrePadding_View_4916;
	uint BindlessResource_View_InstancePayloadData ;
	uint PrePadding_View_4924;
	uint BindlessResource_View_LightmapSceneData ;
	uint PrePadding_View_4932;
	uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	uint PrePadding_View_4940;
	uint BindlessResource_View_TransmittanceLutTexture ;
	uint PrePadding_View_4948;
	uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	uint PrePadding_View_4956;
	uint BindlessResource_View_SkyViewLutTexture ;
	uint PrePadding_View_4964;
	uint BindlessSampler_View_SkyViewLutTextureSampler ;
	uint PrePadding_View_4972;
	uint BindlessResource_View_DistantSkyLightLutTexture ;
	uint PrePadding_View_4980;
	uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	uint PrePadding_View_4988;
	uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	uint PrePadding_View_4996;
	uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	uint PrePadding_View_5004;
	uint BindlessResource_View_HairScatteringLUTTexture ;
	uint PrePadding_View_5012;
	uint BindlessSampler_View_HairScatteringLUTSampler ;
	uint PrePadding_View_5020;
	uint BindlessResource_View_LTCMatTexture ;
	uint PrePadding_View_5028;
	uint BindlessSampler_View_LTCMatSampler ;
	uint PrePadding_View_5036;
	uint BindlessResource_View_LTCAmpTexture ;
	uint PrePadding_View_5044;
	uint BindlessSampler_View_LTCAmpSampler ;
	uint PrePadding_View_5052;
	uint View_bShadingEnergyConservation;
	uint View_bShadingEnergyPreservation;
	uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	uint PrePadding_View_5068;
	uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	uint PrePadding_View_5076;
	uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	uint PrePadding_View_5084;
	uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	uint PrePadding_View_5092;
	uint BindlessSampler_View_ShadingEnergySampler ;
	uint PrePadding_View_5100;
	uint BindlessResource_View_SSProfilesTexture ;
	uint PrePadding_View_5108;
	uint BindlessSampler_View_SSProfilesSampler ;
	uint PrePadding_View_5116;
	uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	uint PrePadding_View_5124;
	uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	uint PrePadding_View_5132;
	uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	uint PrePadding_View_5140;
	uint BindlessResource_View_WaterIndirection ;
	uint PrePadding_View_5148;
	uint BindlessResource_View_WaterData ;
	uint PrePadding_View_5156;
	uint PrePadding_View_5160;
	uint PrePadding_View_5164;
	float4 View_RectLightAtlasSizeAndInvSize;
	float View_RectLightAtlasMaxMipLevel;
	float PrePadding_View_5188;
	uint BindlessResource_View_RectLightAtlasTexture ;
	uint PrePadding_View_5196;
	uint BindlessSampler_View_RectLightAtlasSampler ;
	uint PrePadding_View_5204;
	uint BindlessSampler_View_LandscapeWeightmapSampler ;
	uint PrePadding_View_5212;
	uint BindlessResource_View_LandscapeIndirection ;
	uint PrePadding_View_5220;
	uint BindlessResource_View_LandscapePerComponentData ;
	uint PrePadding_View_5228;
	uint BindlessResource_View_VTFeedbackBuffer ;
	uint PrePadding_View_5236;
	uint BindlessResource_View_EditorVisualizeLevelInstanceIds ;
	uint PrePadding_View_5244;
	uint BindlessResource_View_EditorSelectedHitProxyIds ;
	uint PrePadding_View_5252;
	uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	uint PrePadding_View_5260;
	float3 View_TLASRelativePreViewTranslation;
	float PrePadding_View_5276;
	float3 View_TLASViewTilePosition;
}
SamplerState View_MaterialTextureBilinearWrapedSampler ;
SamplerState View_MaterialTextureBilinearClampedSampler ;
Texture3D<uint4> View_VolumetricLightmapIndirectionTexture ;
Texture3D View_VolumetricLightmapBrickAmbientVector ;
Texture3D View_VolumetricLightmapBrickSHCoefficients0 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients1 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients2 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients3 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients4 ;
Texture3D View_VolumetricLightmapBrickSHCoefficients5 ;
Texture3D View_SkyBentNormalBrickTexture ;
Texture3D View_DirectionalLightShadowingBrickTexture ;
SamplerState View_VolumetricLightmapBrickAmbientVectorSampler ;
SamplerState View_VolumetricLightmapTextureSampler0 ;
SamplerState View_VolumetricLightmapTextureSampler1 ;
SamplerState View_VolumetricLightmapTextureSampler2 ;
SamplerState View_VolumetricLightmapTextureSampler3 ;
SamplerState View_VolumetricLightmapTextureSampler4 ;
SamplerState View_VolumetricLightmapTextureSampler5 ;
SamplerState View_SkyBentNormalTextureSampler ;
SamplerState View_DirectionalLightShadowingTextureSampler ;
Texture3D View_GlobalDistanceFieldPageAtlasTexture ;
Texture3D View_GlobalDistanceFieldCoverageAtlasTexture ;
Texture3D<uint> View_GlobalDistanceFieldPageTableTexture ;
Texture3D View_GlobalDistanceFieldMipTexture ;
Texture2D View_AtmosphereTransmittanceTexture ;
SamplerState View_AtmosphereTransmittanceTextureSampler ;
Texture2D View_AtmosphereIrradianceTexture ;
SamplerState View_AtmosphereIrradianceTextureSampler ;
Texture3D View_AtmosphereInscatterTexture ;
SamplerState View_AtmosphereInscatterTextureSampler ;
Texture2D View_PerlinNoiseGradientTexture ;
SamplerState View_PerlinNoiseGradientTextureSampler ;
Texture3D View_PerlinNoise3DTexture ;
SamplerState View_PerlinNoise3DTextureSampler ;
Texture2D<uint> View_SobolSamplingTexture ;
SamplerState View_SharedPointWrappedSampler ;
SamplerState View_SharedPointClampedSampler ;
SamplerState View_SharedBilinearWrappedSampler ;
SamplerState View_SharedBilinearClampedSampler ;
SamplerState View_SharedBilinearAnisoClampedSampler ;
SamplerState View_SharedTrilinearWrappedSampler ;
SamplerState View_SharedTrilinearClampedSampler ;
Texture2D View_PreIntegratedBRDF ;
SamplerState View_PreIntegratedBRDFSampler ;
StructuredBuffer<float4> View_PrimitiveSceneData ;
StructuredBuffer<float4> View_InstanceSceneData ;
StructuredBuffer<float4> View_InstancePayloadData ;
StructuredBuffer<float4> View_LightmapSceneData ;
StructuredBuffer<float4> View_SkyIrradianceEnvironmentMap ;
Texture2D View_TransmittanceLutTexture ;
SamplerState View_TransmittanceLutTextureSampler ;
Texture2D View_SkyViewLutTexture ;
SamplerState View_SkyViewLutTextureSampler ;
Texture2D View_DistantSkyLightLutTexture ;
SamplerState View_DistantSkyLightLutTextureSampler ;
Texture3D View_CameraAerialPerspectiveVolume ;
SamplerState View_CameraAerialPerspectiveVolumeSampler ;
Texture3D View_HairScatteringLUTTexture ;
SamplerState View_HairScatteringLUTSampler ;
Texture2D View_LTCMatTexture ;
SamplerState View_LTCMatSampler ;
Texture2D View_LTCAmpTexture ;
SamplerState View_LTCAmpSampler ;
Texture2D<float2> View_ShadingEnergyGGXSpecTexture ;
Texture3D<float2> View_ShadingEnergyGGXGlassTexture ;
Texture2D<float2> View_ShadingEnergyClothSpecTexture ;
Texture2D<float> View_ShadingEnergyDiffuseTexture ;
SamplerState View_ShadingEnergySampler ;
Texture2D View_SSProfilesTexture ;
SamplerState View_SSProfilesSampler ;
SamplerState View_SSProfilesTransmissionSampler ;
Texture2DArray View_SSProfilesPreIntegratedTexture ;
SamplerState View_SSProfilesPreIntegratedSampler ;
Buffer<float4> View_WaterIndirection ;
Buffer<float4> View_WaterData ;
Texture2D<float4> View_RectLightAtlasTexture ;
SamplerState View_RectLightAtlasSampler ;
SamplerState View_LandscapeWeightmapSampler ;
Buffer<uint> View_LandscapeIndirection ;
Buffer<float> View_LandscapePerComponentData ;
RWBuffer<uint> View_VTFeedbackBuffer ;
Buffer<uint> View_EditorVisualizeLevelInstanceIds ;
Buffer<uint> View_EditorSelectedHitProxyIds ;
Buffer<float> View_PhysicsFieldClipmapBuffer ;
static const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float SeparateWaterMainDirLightLuminance;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	uint bShadingEnergyConservation;
	uint bShadingEnergyPreservation;
	float4 RectLightAtlasSizeAndInvSize;
	float RectLightAtlasMaxMipLevel;
	float3 TLASRelativePreViewTranslation;
	float3 TLASViewTilePosition;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedBilinearAnisoClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> PrimitiveSceneData;
	StructuredBuffer<float4> InstanceSceneData;
	StructuredBuffer<float4> InstancePayloadData;
	StructuredBuffer<float4> LightmapSceneData;
	StructuredBuffer<float4> SkyIrradianceEnvironmentMap;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	Texture3D HairScatteringLUTTexture;
	SamplerState HairScatteringLUTSampler;
	Texture2D LTCMatTexture;
	SamplerState LTCMatSampler;
	Texture2D LTCAmpTexture;
	SamplerState LTCAmpSampler;
	Texture2D<float2> ShadingEnergyGGXSpecTexture;
	Texture3D<float2> ShadingEnergyGGXGlassTexture;
	Texture2D<float2> ShadingEnergyClothSpecTexture;
	Texture2D<float> ShadingEnergyDiffuseTexture;
	SamplerState ShadingEnergySampler;
	Texture2D SSProfilesTexture;
	SamplerState SSProfilesSampler;
	SamplerState SSProfilesTransmissionSampler;
	Texture2DArray SSProfilesPreIntegratedTexture;
	SamplerState SSProfilesPreIntegratedSampler;
	Buffer<float4> WaterIndirection;
	Buffer<float4> WaterData;
	Texture2D<float4> RectLightAtlasTexture;
	SamplerState RectLightAtlasSampler;
	SamplerState LandscapeWeightmapSampler;
	Buffer<uint> LandscapeIndirection;
	Buffer<float> LandscapePerComponentData;
	RWBuffer<uint> VTFeedbackBuffer;
	Buffer<uint> EditorVisualizeLevelInstanceIds;
	Buffer<uint> EditorSelectedHitProxyIds;
	Buffer<float> PhysicsFieldClipmapBuffer;
} View = {View_TranslatedWorldToClip,View_TranslatedWorldToSubpixelClip,View_RelativeWorldToClip,View_ClipToRelativeWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToRelativeWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewTilePosition,View_MatrixTilePosition,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_RelativeWorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_RelativeWorldViewOrigin,View_RelativePreViewTranslation,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevTranslatedWorldCameraOrigin,View_PrevRelativeWorldCameraOrigin,View_PrevRelativeWorldViewOrigin,View_RelativePrevPreViewTranslation,View_PrevClipToRelativeWorld,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_ClipToPrevClipWithAA,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_ViewRectMinAndSize,View_LightProbeSizeRatioAndInvSizeRatio,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_BufferToSceneTextureScale,View_ResolutionFractionAndInv,View_NumSceneColorMSAASamples,View_SeparateWaterMainDirLightLuminance,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_GeneralPurposeTweak,View_GeneralPurposeTweak2,View_DemosaicVposOffset,View_DecalDepthBias,View_IndirectLightingColorScale,View_PrecomputedIndirectLightingColorScale,View_PrecomputedIndirectSpecularColorScale,View_AtmosphereLightDirection,View_AtmosphereLightIlluminanceOnGroundPostTransmittance,View_AtmosphereLightIlluminanceOuterSpace,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle_PPTrans,View_SkyViewLutSizeAndInvSize,View_SkyCameraTranslatedWorldOrigin,View_SkyPlanetTranslatedWorldCenterAndViewHeight,View_SkyViewLutReferential,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmospherePresentInScene,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_RealTimeReflectionCapture,View_RealTimeReflectionCapturePreExposure,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_MobileSkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeCenterAndExtent,View_GlobalVolumeWorldToUVAddAndMul,View_GlobalDistanceFieldMipWorldToUVScale,View_GlobalDistanceFieldMipWorldToUVBias,View_GlobalDistanceFieldMipFactor,View_GlobalDistanceFieldMipTransition,View_GlobalDistanceFieldClipmapSizeInPages,View_GlobalDistanceFieldInvPageAtlasSize,View_GlobalDistanceFieldInvCoverageAtlasSize,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDFAOConeDistance,View_NumGlobalSDFClipmaps,View_CoveredExpandSurfaceScale,View_NotCoveredExpandSurfaceScale,View_NotCoveredMinStepScale,View_DitheredTransparencyStepThreshold,View_DitheredTransparencyTraceThreshold,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_XRPassthroughCameraUVs,View_GlobalVirtualTextureMipBias,View_VirtualTextureFeedbackShift,View_VirtualTextureFeedbackMask,View_VirtualTextureFeedbackStride,View_VirtualTextureFeedbackJitterOffset,View_VirtualTextureFeedbackSampleOffset,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_OverrideLandscapeLOD,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_EnableSkyLight,View_HairRenderInfoBits,View_HairComponents,View_bSubsurfacePostprocessEnabled,View_SSProfilesTextureSizeAndInvSize,View_SSProfilesPreIntegratedTextureSizeAndInvSize,View_PhysicsFieldClipmapCenter,View_PhysicsFieldClipmapDistance,View_PhysicsFieldClipmapResolution,View_PhysicsFieldClipmapExponent,View_PhysicsFieldClipmapCount,View_PhysicsFieldTargetCount,View_PhysicsFieldTargets,View_InstanceSceneDataSOAStride,View_GPUSceneViewId,View_ViewResolutionFraction,View_SubSurfaceColorAsTransmittanceAtDistanceInMeters,View_bShadingEnergyConservation,View_bShadingEnergyPreservation,View_RectLightAtlasSizeAndInvSize,View_RectLightAtlasMaxMipLevel,View_TLASRelativePreViewTranslation,View_TLASViewTilePosition,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldPageAtlasTexture,View_GlobalDistanceFieldCoverageAtlasTexture,View_GlobalDistanceFieldPageTableTexture,View_GlobalDistanceFieldMipTexture,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedBilinearAnisoClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,  View_PrimitiveSceneData,   View_InstanceSceneData,   View_InstancePayloadData,   View_LightmapSceneData,   View_SkyIrradianceEnvironmentMap,  View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_HairScatteringLUTTexture,View_HairScatteringLUTSampler,View_LTCMatTexture,View_LTCMatSampler,View_LTCAmpTexture,View_LTCAmpSampler,View_ShadingEnergyGGXSpecTexture,View_ShadingEnergyGGXGlassTexture,View_ShadingEnergyClothSpecTexture,View_ShadingEnergyDiffuseTexture,View_ShadingEnergySampler,View_SSProfilesTexture,View_SSProfilesSampler,View_SSProfilesTransmissionSampler,View_SSProfilesPreIntegratedTexture,View_SSProfilesPreIntegratedSampler,  View_WaterIndirection,   View_WaterData,  View_RectLightAtlasTexture,View_RectLightAtlasSampler,View_LandscapeWeightmapSampler,  View_LandscapeIndirection,   View_LandscapePerComponentData,  View_VTFeedbackBuffer,  View_EditorVisualizeLevelInstanceIds,   View_EditorSelectedHitProxyIds,   View_PhysicsFieldClipmapBuffer,  };
#line 2 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Strata.ush"


cbuffer  UniformBufferConstants_Strata
{
	uint Strata_MaxBytesPerPixel;
	uint Strata_bRoughDiffuse;
	uint Strata_PeelLayersAboveDepth;
	int Strata_SliceStoringDebugStrataTree;
	int Strata_FirstSliceStoringStrataSSSData;
	uint Strata_TileSize;
	uint Strata_TileSizeLog2;
	uint PrePadding_Strata_28;
	int2 Strata_TileCount;
	int2 Strata_TileOffset;
	int2 Strata_OverflowTileCount;
	int2 Strata_OverflowTileOffset;
	uint BindlessResource_Strata_MaterialTextureArray ;
	uint PrePadding_Strata_68;
	uint BindlessResource_Strata_TopLayerTexture ;
	uint PrePadding_Strata_76;
	uint BindlessResource_Strata_OpaqueRoughRefractionTexture ;
	uint PrePadding_Strata_84;
	uint BindlessResource_Strata_BSDFOffsetTexture ;
	uint PrePadding_Strata_92;
	uint BindlessResource_Strata_BSDFTileTexture ;
	uint PrePadding_Strata_100;
	uint BindlessResource_Strata_BSDFTileCountBuffer ;
}
Texture2DArray<uint> Strata_MaterialTextureArray ;
Texture2D<uint> Strata_TopLayerTexture ;
Texture2D<float3> Strata_OpaqueRoughRefractionTexture ;
Texture2D<uint> Strata_BSDFOffsetTexture ;
Texture2D<uint> Strata_BSDFTileTexture ;
Buffer<uint> Strata_BSDFTileCountBuffer ;
static const struct
{
	uint MaxBytesPerPixel;
	uint bRoughDiffuse;
	uint PeelLayersAboveDepth;
	int SliceStoringDebugStrataTree;
	int FirstSliceStoringStrataSSSData;
	uint TileSize;
	uint TileSizeLog2;
	int2 TileCount;
	int2 TileOffset;
	int2 OverflowTileCount;
	int2 OverflowTileOffset;
	Texture2DArray<uint> MaterialTextureArray;
	Texture2D<uint> TopLayerTexture;
	Texture2D<float3> OpaqueRoughRefractionTexture;
	Texture2D<uint> BSDFOffsetTexture;
	Texture2D<uint> BSDFTileTexture;
	Buffer<uint> BSDFTileCountBuffer;
} Strata = {Strata_MaxBytesPerPixel,Strata_bRoughDiffuse,Strata_PeelLayersAboveDepth,Strata_SliceStoringDebugStrataTree,Strata_FirstSliceStoringStrataSSSData,Strata_TileSize,Strata_TileSizeLog2,Strata_TileCount,Strata_TileOffset,Strata_OverflowTileCount,Strata_OverflowTileOffset,Strata_MaterialTextureArray,Strata_TopLayerTexture,Strata_OpaqueRoughRefractionTexture,Strata_BSDFOffsetTexture,Strata_BSDFTileTexture,Strata_BSDFTileCountBuffer,};
#line 3 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"


cbuffer  UniformBufferConstants_DrawRectangleParameters
{
	float4 DrawRectangleParameters_PosScaleBias;
	float4 DrawRectangleParameters_UVScaleBias;
	float4 DrawRectangleParameters_InvTargetSizeAndTextureSize;
}
static const struct
{
	float4 PosScaleBias;
	float4 UVScaleBias;
	float4 InvTargetSizeAndTextureSize;
} DrawRectangleParameters = {DrawRectangleParameters_PosScaleBias,DrawRectangleParameters_UVScaleBias,DrawRectangleParameters_InvTargetSizeAndTextureSize,};
#line 4 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"


cbuffer  UniformBufferConstants_InstancedView
{
	float4x4 InstancedView_TranslatedWorldToClip;
	float4x4 InstancedView_TranslatedWorldToSubpixelClip;
	float4x4 InstancedView_RelativeWorldToClip;
	float4x4 InstancedView_ClipToRelativeWorld;
	float4x4 InstancedView_TranslatedWorldToView;
	float4x4 InstancedView_ViewToTranslatedWorld;
	float4x4 InstancedView_TranslatedWorldToCameraView;
	float4x4 InstancedView_CameraViewToTranslatedWorld;
	float4x4 InstancedView_ViewToClip;
	float4x4 InstancedView_ViewToClipNoAA;
	float4x4 InstancedView_ClipToView;
	float4x4 InstancedView_ClipToTranslatedWorld;
	float4x4 InstancedView_SVPositionToTranslatedWorld;
	float4x4 InstancedView_ScreenToRelativeWorld;
	float4x4 InstancedView_ScreenToTranslatedWorld;
	float4x4 InstancedView_MobileMultiviewShadowTransform;
	float3 InstancedView_ViewTilePosition;
	float PrePadding_InstancedView_1036;
	float3 InstancedView_MatrixTilePosition;
	float PrePadding_InstancedView_1052;
	float3 InstancedView_ViewForward;
	float PrePadding_InstancedView_1068;
	float3 InstancedView_ViewUp;
	float PrePadding_InstancedView_1084;
	float3 InstancedView_ViewRight;
	float PrePadding_InstancedView_1100;
	float3 InstancedView_HMDViewNoRollUp;
	float PrePadding_InstancedView_1116;
	float3 InstancedView_HMDViewNoRollRight;
	float PrePadding_InstancedView_1132;
	float4 InstancedView_InvDeviceZToWorldZTransform;
	float4 InstancedView_ScreenPositionScaleBias;
	float3 InstancedView_RelativeWorldCameraOrigin;
	float PrePadding_InstancedView_1180;
	float3 InstancedView_TranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1196;
	float3 InstancedView_RelativeWorldViewOrigin;
	float PrePadding_InstancedView_1212;
	float3 InstancedView_RelativePreViewTranslation;
	float PrePadding_InstancedView_1228;
	float4x4 InstancedView_PrevViewToClip;
	float4x4 InstancedView_PrevClipToView;
	float4x4 InstancedView_PrevTranslatedWorldToClip;
	float4x4 InstancedView_PrevTranslatedWorldToView;
	float4x4 InstancedView_PrevViewToTranslatedWorld;
	float4x4 InstancedView_PrevTranslatedWorldToCameraView;
	float4x4 InstancedView_PrevCameraViewToTranslatedWorld;
	float3 InstancedView_PrevTranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1692;
	float3 InstancedView_PrevRelativeWorldCameraOrigin;
	float PrePadding_InstancedView_1708;
	float3 InstancedView_PrevRelativeWorldViewOrigin;
	float PrePadding_InstancedView_1724;
	float3 InstancedView_RelativePrevPreViewTranslation;
	float PrePadding_InstancedView_1740;
	float4x4 InstancedView_PrevClipToRelativeWorld;
	float4x4 InstancedView_PrevScreenToTranslatedWorld;
	float4x4 InstancedView_ClipToPrevClip;
	float4x4 InstancedView_ClipToPrevClipWithAA;
	float4 InstancedView_TemporalAAJitter;
	float4 InstancedView_GlobalClippingPlane;
	float2 InstancedView_FieldOfViewWideAngles;
	float2 InstancedView_PrevFieldOfViewWideAngles;
	float4 InstancedView_ViewRectMin;
	float4 InstancedView_ViewSizeAndInvSize;
	uint4 InstancedView_ViewRectMinAndSize;
	float4 InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	float4 InstancedView_BufferSizeAndInvSize;
	float4 InstancedView_BufferBilinearUVMinMax;
	float4 InstancedView_ScreenToViewSpace;
	float2 InstancedView_BufferToSceneTextureScale;
	float2 InstancedView_ResolutionFractionAndInv;
	int InstancedView_NumSceneColorMSAASamples;
	float InstancedView_SeparateWaterMainDirLightLuminance;
	float InstancedView_PreExposure;
	float InstancedView_OneOverPreExposure;
	float4 InstancedView_DiffuseOverrideParameter;
	float4 InstancedView_SpecularOverrideParameter;
	float4 InstancedView_NormalOverrideParameter;
	float2 InstancedView_RoughnessOverrideParameter;
	float InstancedView_PrevFrameGameTime;
	float InstancedView_PrevFrameRealTime;
	float InstancedView_OutOfBoundsMask;
	float PrePadding_InstancedView_2260;
	float PrePadding_InstancedView_2264;
	float PrePadding_InstancedView_2268;
	float3 InstancedView_WorldCameraMovementSinceLastFrame;
	float InstancedView_CullingSign;
	float InstancedView_NearPlane;
	float InstancedView_GameTime;
	float InstancedView_RealTime;
	float InstancedView_DeltaTime;
	float InstancedView_MaterialTextureMipBias;
	float InstancedView_MaterialTextureDerivativeMultiply;
	uint InstancedView_Random;
	uint InstancedView_FrameNumber;
	uint InstancedView_StateFrameIndexMod8;
	uint InstancedView_StateFrameIndex;
	uint InstancedView_DebugViewModeMask;
	float InstancedView_CameraCut;
	float InstancedView_UnlitViewmodeMask;
	float PrePadding_InstancedView_2340;
	float PrePadding_InstancedView_2344;
	float PrePadding_InstancedView_2348;
	float4 InstancedView_DirectionalLightColor;
	float3 InstancedView_DirectionalLightDirection;
	float PrePadding_InstancedView_2380;
	float4 InstancedView_TranslucencyLightingVolumeMin[2];
	float4 InstancedView_TranslucencyLightingVolumeInvSize[2];
	float4 InstancedView_TemporalAAParams;
	float4 InstancedView_CircleDOFParams;
	float InstancedView_DepthOfFieldSensorWidth;
	float InstancedView_DepthOfFieldFocalDistance;
	float InstancedView_DepthOfFieldScale;
	float InstancedView_DepthOfFieldFocalLength;
	float InstancedView_DepthOfFieldFocalRegion;
	float InstancedView_DepthOfFieldNearTransitionRegion;
	float InstancedView_DepthOfFieldFarTransitionRegion;
	float InstancedView_MotionBlurNormalizedToPixel;
	float InstancedView_GeneralPurposeTweak;
	float InstancedView_GeneralPurposeTweak2;
	float InstancedView_DemosaicVposOffset;
	float InstancedView_DecalDepthBias;
	float3 InstancedView_IndirectLightingColorScale;
	float PrePadding_InstancedView_2540;
	float3 InstancedView_PrecomputedIndirectLightingColorScale;
	float PrePadding_InstancedView_2556;
	float3 InstancedView_PrecomputedIndirectSpecularColorScale;
	float PrePadding_InstancedView_2572;
	float4 InstancedView_AtmosphereLightDirection[2];
	float4 InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 InstancedView_AtmosphereLightIlluminanceOuterSpace[2];
	float4 InstancedView_AtmosphereLightDiscLuminance[2];
	float4 InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 InstancedView_SkyViewLutSizeAndInvSize;
	float3 InstancedView_SkyCameraTranslatedWorldOrigin;
	float PrePadding_InstancedView_2764;
	float4 InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 InstancedView_SkyViewLutReferential;
	float4 InstancedView_SkyAtmosphereSkyLuminanceFactor;
	float InstancedView_SkyAtmospherePresentInScene;
	float InstancedView_SkyAtmosphereHeightFogContribution;
	float InstancedView_SkyAtmosphereBottomRadiusKm;
	float InstancedView_SkyAtmosphereTopRadiusKm;
	float4 InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float PrePadding_InstancedView_2920;
	float PrePadding_InstancedView_2924;
	float3 InstancedView_NormalCurvatureToRoughnessScaleBias;
	float InstancedView_RenderingReflectionCaptureMask;
	float InstancedView_RealTimeReflectionCapture;
	float InstancedView_RealTimeReflectionCapturePreExposure;
	float PrePadding_InstancedView_2952;
	float PrePadding_InstancedView_2956;
	float4 InstancedView_AmbientCubemapTint;
	float InstancedView_AmbientCubemapIntensity;
	float InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float InstancedView_SkyLightAffectReflectionFlag;
	float InstancedView_SkyLightAffectGlobalIlluminationFlag;
	float4 InstancedView_SkyLightColor;
	float4 InstancedView_MobileSkyIrradianceEnvironmentMap[8];
	float InstancedView_MobilePreviewMode;
	float InstancedView_HMDEyePaddingOffset;
	float InstancedView_ReflectionCubemapMaxMip;
	float InstancedView_ShowDecalsMask;
	uint InstancedView_DistanceFieldAOSpecularOcclusionMode;
	float InstancedView_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_InstancedView_3160;
	float PrePadding_InstancedView_3164;
	float3 InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int InstancedView_StereoPassIndex;
	float4 InstancedView_GlobalVolumeCenterAndExtent[6];
	float4 InstancedView_GlobalVolumeWorldToUVAddAndMul[6];
	float4 InstancedView_GlobalDistanceFieldMipWorldToUVScale[6];
	float4 InstancedView_GlobalDistanceFieldMipWorldToUVBias[6];
	float InstancedView_GlobalDistanceFieldMipFactor;
	float InstancedView_GlobalDistanceFieldMipTransition;
	int InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	int PrePadding_InstancedView_3580;
	float3 InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	float PrePadding_InstancedView_3596;
	float3 InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	float InstancedView_GlobalVolumeDimension;
	float InstancedView_GlobalVolumeTexelSize;
	float InstancedView_MaxGlobalDFAOConeDistance;
	uint InstancedView_NumGlobalSDFClipmaps;
	float InstancedView_CoveredExpandSurfaceScale;
	float InstancedView_NotCoveredExpandSurfaceScale;
	float InstancedView_NotCoveredMinStepScale;
	float InstancedView_DitheredTransparencyStepThreshold;
	float InstancedView_DitheredTransparencyTraceThreshold;
	int2 InstancedView_CursorPosition;
	float InstancedView_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_InstancedView_3660;
	float3 InstancedView_VolumetricFogInvGridSize;
	float PrePadding_InstancedView_3676;
	float3 InstancedView_VolumetricFogGridZParams;
	float PrePadding_InstancedView_3692;
	float2 InstancedView_VolumetricFogSVPosToVolumeUV;
	float InstancedView_VolumetricFogMaxDistance;
	float PrePadding_InstancedView_3708;
	float3 InstancedView_VolumetricLightmapWorldToUVScale;
	float PrePadding_InstancedView_3724;
	float3 InstancedView_VolumetricLightmapWorldToUVAdd;
	float PrePadding_InstancedView_3740;
	float3 InstancedView_VolumetricLightmapIndirectionTextureSize;
	float InstancedView_VolumetricLightmapBrickSize;
	float3 InstancedView_VolumetricLightmapBrickTexelSize;
	float InstancedView_IndirectLightingCacheShowFlag;
	float InstancedView_EyeToPixelSpreadAngle;
	float PrePadding_InstancedView_3780;
	float PrePadding_InstancedView_3784;
	float PrePadding_InstancedView_3788;
	float4 InstancedView_XRPassthroughCameraUVs[2];
	float InstancedView_GlobalVirtualTextureMipBias;
	uint InstancedView_VirtualTextureFeedbackShift;
	uint InstancedView_VirtualTextureFeedbackMask;
	uint InstancedView_VirtualTextureFeedbackStride;
	uint InstancedView_VirtualTextureFeedbackJitterOffset;
	uint InstancedView_VirtualTextureFeedbackSampleOffset;
	uint PrePadding_InstancedView_3848;
	uint PrePadding_InstancedView_3852;
	float4 InstancedView_RuntimeVirtualTextureMipLevel;
	float2 InstancedView_RuntimeVirtualTexturePackHeight;
	float PrePadding_InstancedView_3880;
	float PrePadding_InstancedView_3884;
	float4 InstancedView_RuntimeVirtualTextureDebugParams;
	float InstancedView_OverrideLandscapeLOD;
	int InstancedView_FarShadowStaticMeshLODBias;
	float InstancedView_MinRoughness;
	float PrePadding_InstancedView_3916;
	float4 InstancedView_HairRenderInfo;
	uint InstancedView_EnableSkyLight;
	uint InstancedView_HairRenderInfoBits;
	uint InstancedView_HairComponents;
	float InstancedView_bSubsurfacePostprocessEnabled;
	float4 InstancedView_SSProfilesTextureSizeAndInvSize;
	float4 InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 InstancedView_PhysicsFieldClipmapCenter;
	float InstancedView_PhysicsFieldClipmapDistance;
	int InstancedView_PhysicsFieldClipmapResolution;
	int InstancedView_PhysicsFieldClipmapExponent;
	int InstancedView_PhysicsFieldClipmapCount;
	int InstancedView_PhysicsFieldTargetCount;
	int4 InstancedView_PhysicsFieldTargets[32];
	uint InstancedView_InstanceSceneDataSOAStride;
	uint InstancedView_GPUSceneViewId;
	float InstancedView_ViewResolutionFraction;
	float InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
}
static const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float SeparateWaterMainDirLightLuminance;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
} InstancedView = {InstancedView_TranslatedWorldToClip,InstancedView_TranslatedWorldToSubpixelClip,InstancedView_RelativeWorldToClip,InstancedView_ClipToRelativeWorld,InstancedView_TranslatedWorldToView,InstancedView_ViewToTranslatedWorld,InstancedView_TranslatedWorldToCameraView,InstancedView_CameraViewToTranslatedWorld,InstancedView_ViewToClip,InstancedView_ViewToClipNoAA,InstancedView_ClipToView,InstancedView_ClipToTranslatedWorld,InstancedView_SVPositionToTranslatedWorld,InstancedView_ScreenToRelativeWorld,InstancedView_ScreenToTranslatedWorld,InstancedView_MobileMultiviewShadowTransform,InstancedView_ViewTilePosition,InstancedView_MatrixTilePosition,InstancedView_ViewForward,InstancedView_ViewUp,InstancedView_ViewRight,InstancedView_HMDViewNoRollUp,InstancedView_HMDViewNoRollRight,InstancedView_InvDeviceZToWorldZTransform,InstancedView_ScreenPositionScaleBias,InstancedView_RelativeWorldCameraOrigin,InstancedView_TranslatedWorldCameraOrigin,InstancedView_RelativeWorldViewOrigin,InstancedView_RelativePreViewTranslation,InstancedView_PrevViewToClip,InstancedView_PrevClipToView,InstancedView_PrevTranslatedWorldToClip,InstancedView_PrevTranslatedWorldToView,InstancedView_PrevViewToTranslatedWorld,InstancedView_PrevTranslatedWorldToCameraView,InstancedView_PrevCameraViewToTranslatedWorld,InstancedView_PrevTranslatedWorldCameraOrigin,InstancedView_PrevRelativeWorldCameraOrigin,InstancedView_PrevRelativeWorldViewOrigin,InstancedView_RelativePrevPreViewTranslation,InstancedView_PrevClipToRelativeWorld,InstancedView_PrevScreenToTranslatedWorld,InstancedView_ClipToPrevClip,InstancedView_ClipToPrevClipWithAA,InstancedView_TemporalAAJitter,InstancedView_GlobalClippingPlane,InstancedView_FieldOfViewWideAngles,InstancedView_PrevFieldOfViewWideAngles,InstancedView_ViewRectMin,InstancedView_ViewSizeAndInvSize,InstancedView_ViewRectMinAndSize,InstancedView_LightProbeSizeRatioAndInvSizeRatio,InstancedView_BufferSizeAndInvSize,InstancedView_BufferBilinearUVMinMax,InstancedView_ScreenToViewSpace,InstancedView_BufferToSceneTextureScale,InstancedView_ResolutionFractionAndInv,InstancedView_NumSceneColorMSAASamples,InstancedView_SeparateWaterMainDirLightLuminance,InstancedView_PreExposure,InstancedView_OneOverPreExposure,InstancedView_DiffuseOverrideParameter,InstancedView_SpecularOverrideParameter,InstancedView_NormalOverrideParameter,InstancedView_RoughnessOverrideParameter,InstancedView_PrevFrameGameTime,InstancedView_PrevFrameRealTime,InstancedView_OutOfBoundsMask,InstancedView_WorldCameraMovementSinceLastFrame,InstancedView_CullingSign,InstancedView_NearPlane,InstancedView_GameTime,InstancedView_RealTime,InstancedView_DeltaTime,InstancedView_MaterialTextureMipBias,InstancedView_MaterialTextureDerivativeMultiply,InstancedView_Random,InstancedView_FrameNumber,InstancedView_StateFrameIndexMod8,InstancedView_StateFrameIndex,InstancedView_DebugViewModeMask,InstancedView_CameraCut,InstancedView_UnlitViewmodeMask,InstancedView_DirectionalLightColor,InstancedView_DirectionalLightDirection,InstancedView_TranslucencyLightingVolumeMin,InstancedView_TranslucencyLightingVolumeInvSize,InstancedView_TemporalAAParams,InstancedView_CircleDOFParams,InstancedView_DepthOfFieldSensorWidth,InstancedView_DepthOfFieldFocalDistance,InstancedView_DepthOfFieldScale,InstancedView_DepthOfFieldFocalLength,InstancedView_DepthOfFieldFocalRegion,InstancedView_DepthOfFieldNearTransitionRegion,InstancedView_DepthOfFieldFarTransitionRegion,InstancedView_MotionBlurNormalizedToPixel,InstancedView_GeneralPurposeTweak,InstancedView_GeneralPurposeTweak2,InstancedView_DemosaicVposOffset,InstancedView_DecalDepthBias,InstancedView_IndirectLightingColorScale,InstancedView_PrecomputedIndirectLightingColorScale,InstancedView_PrecomputedIndirectSpecularColorScale,InstancedView_AtmosphereLightDirection,InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance,InstancedView_AtmosphereLightIlluminanceOuterSpace,InstancedView_AtmosphereLightDiscLuminance,InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans,InstancedView_SkyViewLutSizeAndInvSize,InstancedView_SkyCameraTranslatedWorldOrigin,InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight,InstancedView_SkyViewLutReferential,InstancedView_SkyAtmosphereSkyLuminanceFactor,InstancedView_SkyAtmospherePresentInScene,InstancedView_SkyAtmosphereHeightFogContribution,InstancedView_SkyAtmosphereBottomRadiusKm,InstancedView_SkyAtmosphereTopRadiusKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume,InstancedView_NormalCurvatureToRoughnessScaleBias,InstancedView_RenderingReflectionCaptureMask,InstancedView_RealTimeReflectionCapture,InstancedView_RealTimeReflectionCapturePreExposure,InstancedView_AmbientCubemapTint,InstancedView_AmbientCubemapIntensity,InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag,InstancedView_SkyLightAffectReflectionFlag,InstancedView_SkyLightAffectGlobalIlluminationFlag,InstancedView_SkyLightColor,InstancedView_MobileSkyIrradianceEnvironmentMap,InstancedView_MobilePreviewMode,InstancedView_HMDEyePaddingOffset,InstancedView_ReflectionCubemapMaxMip,InstancedView_ShowDecalsMask,InstancedView_DistanceFieldAOSpecularOcclusionMode,InstancedView_IndirectCapsuleSelfShadowingIntensity,InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,InstancedView_StereoPassIndex,InstancedView_GlobalVolumeCenterAndExtent,InstancedView_GlobalVolumeWorldToUVAddAndMul,InstancedView_GlobalDistanceFieldMipWorldToUVScale,InstancedView_GlobalDistanceFieldMipWorldToUVBias,InstancedView_GlobalDistanceFieldMipFactor,InstancedView_GlobalDistanceFieldMipTransition,InstancedView_GlobalDistanceFieldClipmapSizeInPages,InstancedView_GlobalDistanceFieldInvPageAtlasSize,InstancedView_GlobalDistanceFieldInvCoverageAtlasSize,InstancedView_GlobalVolumeDimension,InstancedView_GlobalVolumeTexelSize,InstancedView_MaxGlobalDFAOConeDistance,InstancedView_NumGlobalSDFClipmaps,InstancedView_CoveredExpandSurfaceScale,InstancedView_NotCoveredExpandSurfaceScale,InstancedView_NotCoveredMinStepScale,InstancedView_DitheredTransparencyStepThreshold,InstancedView_DitheredTransparencyTraceThreshold,InstancedView_CursorPosition,InstancedView_bCheckerboardSubsurfaceProfileRendering,InstancedView_VolumetricFogInvGridSize,InstancedView_VolumetricFogGridZParams,InstancedView_VolumetricFogSVPosToVolumeUV,InstancedView_VolumetricFogMaxDistance,InstancedView_VolumetricLightmapWorldToUVScale,InstancedView_VolumetricLightmapWorldToUVAdd,InstancedView_VolumetricLightmapIndirectionTextureSize,InstancedView_VolumetricLightmapBrickSize,InstancedView_VolumetricLightmapBrickTexelSize,InstancedView_IndirectLightingCacheShowFlag,InstancedView_EyeToPixelSpreadAngle,InstancedView_XRPassthroughCameraUVs,InstancedView_GlobalVirtualTextureMipBias,InstancedView_VirtualTextureFeedbackShift,InstancedView_VirtualTextureFeedbackMask,InstancedView_VirtualTextureFeedbackStride,InstancedView_VirtualTextureFeedbackJitterOffset,InstancedView_VirtualTextureFeedbackSampleOffset,InstancedView_RuntimeVirtualTextureMipLevel,InstancedView_RuntimeVirtualTexturePackHeight,InstancedView_RuntimeVirtualTextureDebugParams,InstancedView_OverrideLandscapeLOD,InstancedView_FarShadowStaticMeshLODBias,InstancedView_MinRoughness,InstancedView_HairRenderInfo,InstancedView_EnableSkyLight,InstancedView_HairRenderInfoBits,InstancedView_HairComponents,InstancedView_bSubsurfacePostprocessEnabled,InstancedView_SSProfilesTextureSizeAndInvSize,InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize,InstancedView_PhysicsFieldClipmapCenter,InstancedView_PhysicsFieldClipmapDistance,InstancedView_PhysicsFieldClipmapResolution,InstancedView_PhysicsFieldClipmapExponent,InstancedView_PhysicsFieldClipmapCount,InstancedView_PhysicsFieldTargetCount,InstancedView_PhysicsFieldTargets,InstancedView_InstanceSceneDataSOAStride,InstancedView_GPUSceneViewId,InstancedView_ViewResolutionFraction,InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters,};
#line 5 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"


cbuffer  UniformBufferConstants_MobileSceneTextures
{
	uint BindlessResource_MobileSceneTextures_SceneColorTexture ;
	uint PrePadding_MobileSceneTextures_4;
	uint BindlessSampler_MobileSceneTextures_SceneColorTextureSampler ;
	uint PrePadding_MobileSceneTextures_12;
	uint BindlessResource_MobileSceneTextures_SceneDepthTexture ;
	uint PrePadding_MobileSceneTextures_20;
	uint BindlessSampler_MobileSceneTextures_SceneDepthTextureSampler ;
	uint PrePadding_MobileSceneTextures_28;
	uint BindlessResource_MobileSceneTextures_CustomDepthTexture ;
	uint PrePadding_MobileSceneTextures_36;
	uint BindlessSampler_MobileSceneTextures_CustomDepthTextureSampler ;
	uint PrePadding_MobileSceneTextures_44;
	uint BindlessResource_MobileSceneTextures_CustomStencilTexture ;
	uint PrePadding_MobileSceneTextures_52;
	uint BindlessResource_MobileSceneTextures_SceneVelocityTexture ;
	uint PrePadding_MobileSceneTextures_60;
	uint BindlessSampler_MobileSceneTextures_SceneVelocityTextureSampler ;
	uint PrePadding_MobileSceneTextures_68;
	uint BindlessResource_MobileSceneTextures_GBufferATexture ;
	uint PrePadding_MobileSceneTextures_76;
	uint BindlessResource_MobileSceneTextures_GBufferBTexture ;
	uint PrePadding_MobileSceneTextures_84;
	uint BindlessResource_MobileSceneTextures_GBufferCTexture ;
	uint PrePadding_MobileSceneTextures_92;
	uint BindlessResource_MobileSceneTextures_GBufferDTexture ;
	uint PrePadding_MobileSceneTextures_100;
	uint BindlessResource_MobileSceneTextures_SceneDepthAuxTexture ;
	uint PrePadding_MobileSceneTextures_108;
	uint BindlessSampler_MobileSceneTextures_GBufferATextureSampler ;
	uint PrePadding_MobileSceneTextures_116;
	uint BindlessSampler_MobileSceneTextures_GBufferBTextureSampler ;
	uint PrePadding_MobileSceneTextures_124;
	uint BindlessSampler_MobileSceneTextures_GBufferCTextureSampler ;
	uint PrePadding_MobileSceneTextures_132;
	uint BindlessSampler_MobileSceneTextures_GBufferDTextureSampler ;
	uint PrePadding_MobileSceneTextures_140;
	uint BindlessSampler_MobileSceneTextures_SceneDepthAuxTextureSampler ;
}
Texture2D MobileSceneTextures_SceneColorTexture ;
SamplerState MobileSceneTextures_SceneColorTextureSampler ;
Texture2D MobileSceneTextures_SceneDepthTexture ;
SamplerState MobileSceneTextures_SceneDepthTextureSampler ;
Texture2D MobileSceneTextures_CustomDepthTexture ;
SamplerState MobileSceneTextures_CustomDepthTextureSampler ;
Texture2D<uint2> MobileSceneTextures_CustomStencilTexture ;
Texture2D MobileSceneTextures_SceneVelocityTexture ;
SamplerState MobileSceneTextures_SceneVelocityTextureSampler ;
Texture2D MobileSceneTextures_GBufferATexture ;
Texture2D MobileSceneTextures_GBufferBTexture ;
Texture2D MobileSceneTextures_GBufferCTexture ;
Texture2D MobileSceneTextures_GBufferDTexture ;
Texture2D MobileSceneTextures_SceneDepthAuxTexture ;
SamplerState MobileSceneTextures_GBufferATextureSampler ;
SamplerState MobileSceneTextures_GBufferBTextureSampler ;
SamplerState MobileSceneTextures_GBufferCTextureSampler ;
SamplerState MobileSceneTextures_GBufferDTextureSampler ;
SamplerState MobileSceneTextures_SceneDepthAuxTextureSampler ;
static const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D<uint2> CustomStencilTexture;
	Texture2D SceneVelocityTexture;
	SamplerState SceneVelocityTextureSampler;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D SceneDepthAuxTexture;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState SceneDepthAuxTextureSampler;
} MobileSceneTextures = {MobileSceneTextures_SceneColorTexture,MobileSceneTextures_SceneColorTextureSampler,MobileSceneTextures_SceneDepthTexture,MobileSceneTextures_SceneDepthTextureSampler,MobileSceneTextures_CustomDepthTexture,MobileSceneTextures_CustomDepthTextureSampler,MobileSceneTextures_CustomStencilTexture,MobileSceneTextures_SceneVelocityTexture,MobileSceneTextures_SceneVelocityTextureSampler,MobileSceneTextures_GBufferATexture,MobileSceneTextures_GBufferBTexture,MobileSceneTextures_GBufferCTexture,MobileSceneTextures_GBufferDTexture,MobileSceneTextures_SceneDepthAuxTexture,MobileSceneTextures_GBufferATextureSampler,MobileSceneTextures_GBufferBTextureSampler,MobileSceneTextures_GBufferCTextureSampler,MobileSceneTextures_GBufferDTextureSampler,MobileSceneTextures_SceneDepthAuxTextureSampler,};
#line 6 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"


cbuffer  UniformBufferConstants_SceneTexturesStruct
{
	uint BindlessResource_SceneTexturesStruct_SceneColorTexture ;
	uint PrePadding_SceneTexturesStruct_4;
	uint BindlessResource_SceneTexturesStruct_SceneDepthTexture ;
	uint PrePadding_SceneTexturesStruct_12;
	uint BindlessResource_SceneTexturesStruct_GBufferATexture ;
	uint PrePadding_SceneTexturesStruct_20;
	uint BindlessResource_SceneTexturesStruct_GBufferBTexture ;
	uint PrePadding_SceneTexturesStruct_28;
	uint BindlessResource_SceneTexturesStruct_GBufferCTexture ;
	uint PrePadding_SceneTexturesStruct_36;
	uint BindlessResource_SceneTexturesStruct_GBufferDTexture ;
	uint PrePadding_SceneTexturesStruct_44;
	uint BindlessResource_SceneTexturesStruct_GBufferETexture ;
	uint PrePadding_SceneTexturesStruct_52;
	uint BindlessResource_SceneTexturesStruct_GBufferFTexture ;
	uint PrePadding_SceneTexturesStruct_60;
	uint BindlessResource_SceneTexturesStruct_GBufferVelocityTexture ;
	uint PrePadding_SceneTexturesStruct_68;
	uint BindlessResource_SceneTexturesStruct_ScreenSpaceAOTexture ;
	uint PrePadding_SceneTexturesStruct_76;
	uint BindlessResource_SceneTexturesStruct_CustomDepthTexture ;
	uint PrePadding_SceneTexturesStruct_84;
	uint BindlessResource_SceneTexturesStruct_CustomStencilTexture ;
	uint PrePadding_SceneTexturesStruct_92;
	uint BindlessSampler_SceneTexturesStruct_PointClampSampler ;
}
Texture2D SceneTexturesStruct_SceneColorTexture ;
Texture2D SceneTexturesStruct_SceneDepthTexture ;
Texture2D SceneTexturesStruct_GBufferATexture ;
Texture2D SceneTexturesStruct_GBufferBTexture ;
Texture2D SceneTexturesStruct_GBufferCTexture ;
Texture2D SceneTexturesStruct_GBufferDTexture ;
Texture2D SceneTexturesStruct_GBufferETexture ;
Texture2D SceneTexturesStruct_GBufferFTexture ;
Texture2D SceneTexturesStruct_GBufferVelocityTexture ;
Texture2D SceneTexturesStruct_ScreenSpaceAOTexture ;
Texture2D SceneTexturesStruct_CustomDepthTexture ;
Texture2D<uint2> SceneTexturesStruct_CustomStencilTexture ;
SamplerState SceneTexturesStruct_PointClampSampler ;
static const struct
{
	Texture2D SceneColorTexture;
	Texture2D SceneDepthTexture;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D ScreenSpaceAOTexture;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState PointClampSampler;
} SceneTexturesStruct = {SceneTexturesStruct_SceneColorTexture,SceneTexturesStruct_SceneDepthTexture,SceneTexturesStruct_GBufferATexture,SceneTexturesStruct_GBufferBTexture,SceneTexturesStruct_GBufferCTexture,SceneTexturesStruct_GBufferDTexture,SceneTexturesStruct_GBufferETexture,SceneTexturesStruct_GBufferFTexture,SceneTexturesStruct_GBufferVelocityTexture,SceneTexturesStruct_ScreenSpaceAOTexture,SceneTexturesStruct_CustomDepthTexture,SceneTexturesStruct_CustomStencilTexture,SceneTexturesStruct_PointClampSampler,};
#line 7 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 170 "/Engine/Private/Common.ush"
#line 172 "/Engine/Private/Common.ush"
#line 1 "CommonViewUniformBuffer.ush"
#line 12 "/Engine/Private/CommonViewUniformBuffer.ush"
float2 GetTanHalfFieldOfView()
{
	return float2(View.ClipToView[0][0], View.ClipToView[1][1]);
}

float2 GetPrevTanHalfFieldOfView()
{
	return float2(View.PrevClipToView[0][0], View.PrevClipToView[1][1]);
}



float2 GetCotanHalfFieldOfView()
{
	return float2(View.ViewToClip[0][0], View.ViewToClip[1][1]);
}



float2 GetPrevCotanHalfFieldOfView()
{
	return float2(View.PrevViewToClip[0][0], View.PrevViewToClip[1][1]);
}


uint GetPowerOfTwoModulatedFrameIndex(uint Pow2Modulus)
{

	return View.StateFrameIndex & uint(Pow2Modulus - 1);
}
#line 173 "/Engine/Private/Common.ush"



float FmodFloor(float Lhs, float Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float2 FmodFloor(float2 Lhs, float2 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float3 FmodFloor(float3 Lhs, float3 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float4 FmodFloor(float4 Lhs, float4 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float VectorSum(float V) { return V; }
float VectorSum(float2 V) { return V.x + V.y; }
float VectorSum(float3 V) { return V.x + V.y + V.z; }
float VectorSum(float4 V) { return V.x + V.y + V.z + V.w; }
#line 201 "/Engine/Private/Common.ush"
#line 1 "LargeWorldCoordinates.ush"
#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

struct FLWCScalarDeriv
{
	FLWCScalar Value;
	float Ddx;
	float Ddy;
};

struct FLWCVector2Deriv
{
	FLWCVector2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FLWCVector3Deriv
{
	FLWCVector3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FLWCVector4Deriv
{
	FLWCVector4 Value;
	float4 Ddx;
	float4 Ddy;
};


struct FLWCMatrix
{
	float4x4 M;
	float3 Tile;
};


struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile;
	int Dummy;
};




float LWCGetTileOffset(FLWCScalar V) { return  ((V).Tile)  *  2097152.00f ; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  ((V).Tile)  *  2097152.00f ; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  ((V).Tile)  *  2097152.00f ; }

float4x4 Make4x3Matrix(float4x4 M)
{

	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( ((XYZ).Tile) , float4(XYZ.Offset, W));
}

FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }

FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( ((X).Tile) ,  ((Y).Tile) ), float2(X.Offset, Y.Offset)); }

FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( ((X).Tile) ,  ((Y).Tile) ,  ((Z).Tile) ), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( ((X).Tile) ,  ((YZ).Tile) ), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( ((XY).Tile) ,  ((Z).Tile) ), float3(XY.Offset, Z.Offset)); }

FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( ((X).Tile) ,  ((Y).Tile) ,  ((Z).Tile) ,  ((W).Tile) ), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( ((X).Tile) ,  ((Y).Tile) ,  ((ZW).Tile) ), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( ((X).Tile) ,  ((YZ).Tile) ,  ((W).Tile) ), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( ((XY).Tile) ,  ((Z).Tile) ,  ((W).Tile) ), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( ((XY).Tile) ,  ((ZW).Tile) ), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( ((X).Tile) ,  ((YZW).Tile) ), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( ((XYZ).Tile) ,  ((W).Tile) ), float4(XYZ.Offset, W.Offset)); }

FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	(Result).Tile = (Tile) ;
	Result.M = InMatrix;
	return Result;
}

FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	(Result).Tile = (Tile) ;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	(Result).Tile = (-Tile) ;
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	(Result).Tile = (-Tile) ;
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}



FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }






FLWCScalar LWCSwizzle(FLWCScalar V, int C0) { return V; }
FLWCScalar LWCSwizzle(FLWCVector2 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector3 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector4 V, int C0) { return LWCGetComponent(V, C0); }

FLWCVector2 LWCSwizzle(FLWCScalar V, int C0, int C1) { return MakeLWCVector(V, V); }
FLWCVector2 LWCSwizzle(FLWCVector2 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector3 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector4 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }

FLWCVector3 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2) { return MakeLWCVector(V, V, V); }
FLWCVector3 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }

FLWCVector4 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2, int C3) { return MakeLWCVector(V, V, V, V); }
FLWCVector4 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }

float LWCToFloat(FLWCScalar Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

float3x3 LWCToFloat3x3(FLWCMatrix Value)
{
	return (float3x3)Value.M;
}

float3x3 LWCToFloat3x3(FLWCInverseMatrix Value)
{
	return (float3x3)Value.M;
}


float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }


FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }
FLWCInverseMatrix LWCPromoteInverse(float4x4 Value) { return MakeLWCInverseMatrix((float3)0, Value); }

FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{

	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( ((InMatrix).Tile) , Offset);
}

FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( ((InMatrix).Tile) , Offset);
}

float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( ((Position).Tile)  +  ((InMatrix).Tile) , Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( ((Position).Tile)  + float4( ((InMatrix).Tile) , 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( ((Rhs).Tile) , ResultMatrix);
}

FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- ((Lhs).Tile) , ResultMatrix);
}

float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{

	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f ));
	Result = mul(Result, Rhs.M);
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCMatrix Lhs, FLWCVector3 Rhs)
{
	float4x4 Result = Lhs.M;
	Result[3].xyz += ( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f ;
	Result[3].xyz += Rhs.Offset;
	return Result;
}

FLWCMatrix LWCMultiplyTranslation(float4x4 Lhs, FLWCVector3 Rhs)
{
	FLWCMatrix Result = MakeLWCMatrix( ((Rhs).Tile) , Lhs);
	Result.M[3].xyz += Rhs.Offset;
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCVector3 Lhs, FLWCInverseMatrix Rhs)
{
	float3 Offset = ( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f  + Lhs.Offset;
	return mul(MakeTranslationMatrix(Offset), Rhs.M);
}

FLWCInverseMatrix LWCMultiplyTranslation(FLWCVector3 Lhs, float4x4 Rhs)
{
	FLWCInverseMatrix Result = MakeLWCInverseMatrix(- ((Lhs).Tile) , Rhs);
	Result.M = mul(MakeTranslationMatrix(Lhs.Offset), Result.M);
	return Result;
}

FLWCVector3 LWCGetOrigin(FLWCMatrix InMatrix)
{
	return MakeLWCVector3( ((InMatrix).Tile) , InMatrix.M[3].xyz);
}

void LWCSetOrigin(inout FLWCMatrix InOutMatrix, FLWCVector3 Origin)
{
	(InOutMatrix).Tile = ( ((Origin).Tile) ) ;
	InOutMatrix.M[3].xyz = Origin.Offset;
}
#line 376 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCScalar  LWCNormalizeTile( FLWCScalar  V)
{
	float  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCScalar (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCScalar  LWCMakeIntTile( FLWCScalar  V)
{
	float  IntTile = floor(V.Tile);
	return  MakeLWCScalar (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float  LWCSqrtUnscaled( FLWCScalar  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCRsqrtUnscaled( FLWCScalar  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCRcpUnscaled( FLWCScalar  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCSqrtScaled( FLWCScalar  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float  LWCRsqrtScaled( FLWCScalar  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float  LWCRcpScaled( FLWCScalar  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float  LWCSqrt( FLWCScalar  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float  LWCRsqrt( FLWCScalar  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float  LWCRcp( FLWCScalar  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool LWCGreater( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool LWCGreater( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool LWCGreater( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool LWCGreaterEqual( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool LWCGreaterEqual( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool LWCGreaterEqual( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool LWCLess( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool LWCLess( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool LWCLess( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool LWCLessEqual( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool LWCLessEqual( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool LWCLessEqual( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float  LWCDdx( FLWCScalar  V) { return ( float )0; }
float  LWCDdy( FLWCScalar  V) { return ( float )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCScalar  LWCAdd( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCScalar  LWCAdd( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCScalar  LWCAdd( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCScalar  LWCSubtract( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCScalar  LWCSubtract( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCScalar  LWCSubtract( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool  LWCEquals( FLWCScalar  Lhs,  FLWCScalar  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool  LWCEquals( float  Lhs,  FLWCScalar  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool  LWCEquals( FLWCScalar  Lhs,  float  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool  LWCEqualsApprox( FLWCScalar  Lhs,  FLWCScalar  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float )Threshold;
}
bool  LWCEqualsApprox( float  Lhs,  FLWCScalar  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float )Threshold;
}
bool  LWCEqualsApprox( FLWCScalar  Lhs,  float  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float )Threshold;
}

FLWCScalar  LWCSelect( bool  S,  FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCScalar  LWCSelect( bool  S,  float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( select_internal(S,( float )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCScalar  LWCSelect( bool  S,  FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( select_internal(S, ((Lhs).Tile) ,( float )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCScalar  LWCNegate( FLWCScalar  V) { return  MakeLWCScalar (- ((V).Tile) , -V.Offset); }

float  LWCFrac( FLWCScalar  V)
{
	float  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCScalar  LWCFloor( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , floor(VN.Offset)); }
FLWCScalar  LWCCeil( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCScalar  LWCRound( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , round(VN.Offset)); }
FLWCScalar  LWCTrunc( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , trunc(VN.Offset)); }


float  LWCSign( FLWCScalar  V) { return  float (sign(LWCToFloat(V))); }
float  LWCSaturate( FLWCScalar  V) { return saturate(LWCToFloat(V)); }
float  LWCClampScalar( FLWCScalar  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCScalar  LWCMultiply( FLWCScalar  Lhs,  FLWCScalar  Rhs)
{
	return  MakeLWCScalar ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar  LWCMultiply( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCScalar  LWCMultiply( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCScalar  LWCDivide( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar  LWCDivide( FLWCScalar  Lhs,  float  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar  LWCDivide( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (( float )0, Lhs * LWCRcp(Rhs)); }


FLWCScalar  LWCLerp( FLWCScalar  Lhs,  FLWCScalar  Rhs,  float  S)
{
	return  MakeLWCScalar (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float  LWCFmod( FLWCScalar  Lhs,  float  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float  LWCFmodFloor( FLWCScalar  Lhs,  float  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float  LWCFmodFloorPI( FLWCScalar  V)
{
	return LWCFmodFloor(V, PI);

}
float  LWCFmodFloor2PI( FLWCScalar  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float  LWCSin( FLWCScalar  V) { return sin(LWCFmodFloor2PI(V)); }
float  LWCCos( FLWCScalar  V) { return cos(LWCFmodFloor2PI(V)); }
float  LWCTan( FLWCScalar  V) { return tan(LWCFmodFloorPI(V)); }
float  LWCASin( FLWCScalar  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float  LWCACos( FLWCScalar  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float  LWCATan( FLWCScalar  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float  LWCSmoothStep( FLWCScalar  Lhs,  FLWCScalar  Rhs,  FLWCScalar  S)
{
	float  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCScalar  LWCMin( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMin( float  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMin( FLWCScalar  Lhs,  float  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( float  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( FLWCScalar  Lhs,  float  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCScalar  LWCAbs( FLWCScalar  V) { return LWCSelect(LWCLess(V, ( float )0), LWCNegate(V), V); }

float  LWCStep( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float )1.0f,( float )0.0f) ; }
float  LWCStep( FLWCScalar  Lhs,  float  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float )1.0f,( float )0.0f) ; }
float  LWCStep( float  Lhs,  FLWCScalar  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float )1.0f,( float )0.0f) ; }


FLWCScalar  LWCSquareScaled( FLWCScalar  V)
{
	float  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCScalar ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 377 "/Engine/Private/LargeWorldCoordinates.ush"
#line 386 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector2  LWCNormalizeTile( FLWCVector2  V)
{
	float2  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector2 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector2  LWCMakeIntTile( FLWCVector2  V)
{
	float2  IntTile = floor(V.Tile);
	return  MakeLWCVector2 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float2  LWCSqrtUnscaled( FLWCVector2  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCRsqrtUnscaled( FLWCVector2  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCRcpUnscaled( FLWCVector2  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCSqrtScaled( FLWCVector2  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float2  LWCRsqrtScaled( FLWCVector2  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float2  LWCRcpScaled( FLWCVector2  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2  LWCSqrt( FLWCVector2  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float2  LWCRsqrt( FLWCVector2  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float2  LWCRcp( FLWCVector2  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool2 LWCGreater( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool2 LWCGreater( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool2 LWCGreater( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool2 LWCGreaterEqual( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool2 LWCGreaterEqual( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool2 LWCGreaterEqual( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool2 LWCLess( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool2 LWCLess( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool2 LWCLess( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool2 LWCLessEqual( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool2 LWCLessEqual( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool2 LWCLessEqual( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float2  LWCDdx( FLWCVector2  V) { return ( float2 )0; }
float2  LWCDdy( FLWCVector2  V) { return ( float2 )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector2  LWCAdd( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector2  LWCAdd( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector2  LWCAdd( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector2  LWCSubtract( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector2  LWCSubtract( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector2  LWCSubtract( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool2  LWCEquals( FLWCVector2  Lhs,  FLWCVector2  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool2  LWCEquals( float2  Lhs,  FLWCVector2  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool2  LWCEquals( FLWCVector2  Lhs,  float2  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool2  LWCEqualsApprox( FLWCVector2  Lhs,  FLWCVector2  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float2 )Threshold;
}
bool2  LWCEqualsApprox( float2  Lhs,  FLWCVector2  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float2 )Threshold;
}
bool2  LWCEqualsApprox( FLWCVector2  Lhs,  float2  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float2 )Threshold;
}

FLWCVector2  LWCSelect( bool2  S,  FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCVector2  LWCSelect( bool2  S,  float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( select_internal(S,( float2 )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCVector2  LWCSelect( bool2  S,  FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( select_internal(S, ((Lhs).Tile) ,( float2 )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCVector2  LWCNegate( FLWCVector2  V) { return  MakeLWCVector2 (- ((V).Tile) , -V.Offset); }

float2  LWCFrac( FLWCVector2  V)
{
	float2  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector2  LWCFloor( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector2  LWCCeil( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector2  LWCRound( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector2  LWCTrunc( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , trunc(VN.Offset)); }


float2  LWCSign( FLWCVector2  V) { return  float2 (sign(LWCToFloat(V))); }
float2  LWCSaturate( FLWCVector2  V) { return saturate(LWCToFloat(V)); }
float2  LWCClampScalar( FLWCVector2  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector2  LWCMultiply( FLWCVector2  Lhs,  FLWCVector2  Rhs)
{
	return  MakeLWCVector2 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2  LWCMultiply( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector2  LWCMultiply( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector2  LWCDivide( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2  LWCDivide( FLWCVector2  Lhs,  float2  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2  LWCDivide( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (( float2 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector2  LWCLerp( FLWCVector2  Lhs,  FLWCVector2  Rhs,  float2  S)
{
	return  MakeLWCVector2 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float2  LWCFmod( FLWCVector2  Lhs,  float2  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float2  LWCFmodFloor( FLWCVector2  Lhs,  float2  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float2  LWCFmodFloorPI( FLWCVector2  V)
{
	return LWCFmodFloor(V, PI);

}
float2  LWCFmodFloor2PI( FLWCVector2  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float2  LWCSin( FLWCVector2  V) { return sin(LWCFmodFloor2PI(V)); }
float2  LWCCos( FLWCVector2  V) { return cos(LWCFmodFloor2PI(V)); }
float2  LWCTan( FLWCVector2  V) { return tan(LWCFmodFloorPI(V)); }
float2  LWCASin( FLWCVector2  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float2  LWCACos( FLWCVector2  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float2  LWCATan( FLWCVector2  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float2  LWCSmoothStep( FLWCVector2  Lhs,  FLWCVector2  Rhs,  FLWCVector2  S)
{
	float2  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector2  LWCMin( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMin( float2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMin( FLWCVector2  Lhs,  float2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( float2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( FLWCVector2  Lhs,  float2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector2  LWCAbs( FLWCVector2  V) { return LWCSelect(LWCLess(V, ( float2 )0), LWCNegate(V), V); }

float2  LWCStep( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float2 )1.0f,( float2 )0.0f) ; }
float2  LWCStep( FLWCVector2  Lhs,  float2  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float2 )1.0f,( float2 )0.0f) ; }
float2  LWCStep( float2  Lhs,  FLWCVector2  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float2 )1.0f,( float2 )0.0f) ; }


FLWCVector2  LWCSquareScaled( FLWCVector2  V)
{
	float2  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector2 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 387 "/Engine/Private/LargeWorldCoordinates.ush"
#line 396 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector3  LWCNormalizeTile( FLWCVector3  V)
{
	float3  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector3 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector3  LWCMakeIntTile( FLWCVector3  V)
{
	float3  IntTile = floor(V.Tile);
	return  MakeLWCVector3 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float3  LWCSqrtUnscaled( FLWCVector3  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCRsqrtUnscaled( FLWCVector3  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCRcpUnscaled( FLWCVector3  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCSqrtScaled( FLWCVector3  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float3  LWCRsqrtScaled( FLWCVector3  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float3  LWCRcpScaled( FLWCVector3  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3  LWCSqrt( FLWCVector3  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float3  LWCRsqrt( FLWCVector3  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float3  LWCRcp( FLWCVector3  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool3 LWCGreater( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool3 LWCGreater( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool3 LWCGreater( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool3 LWCGreaterEqual( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool3 LWCGreaterEqual( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool3 LWCGreaterEqual( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool3 LWCLess( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool3 LWCLess( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool3 LWCLess( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool3 LWCLessEqual( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool3 LWCLessEqual( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool3 LWCLessEqual( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float3  LWCDdx( FLWCVector3  V) { return ( float3 )0; }
float3  LWCDdy( FLWCVector3  V) { return ( float3 )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector3  LWCAdd( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector3  LWCAdd( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector3  LWCAdd( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector3  LWCSubtract( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector3  LWCSubtract( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector3  LWCSubtract( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool3  LWCEquals( FLWCVector3  Lhs,  FLWCVector3  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool3  LWCEquals( float3  Lhs,  FLWCVector3  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool3  LWCEquals( FLWCVector3  Lhs,  float3  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool3  LWCEqualsApprox( FLWCVector3  Lhs,  FLWCVector3  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float3 )Threshold;
}
bool3  LWCEqualsApprox( float3  Lhs,  FLWCVector3  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float3 )Threshold;
}
bool3  LWCEqualsApprox( FLWCVector3  Lhs,  float3  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float3 )Threshold;
}

FLWCVector3  LWCSelect( bool3  S,  FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCVector3  LWCSelect( bool3  S,  float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( select_internal(S,( float3 )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCVector3  LWCSelect( bool3  S,  FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( select_internal(S, ((Lhs).Tile) ,( float3 )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCVector3  LWCNegate( FLWCVector3  V) { return  MakeLWCVector3 (- ((V).Tile) , -V.Offset); }

float3  LWCFrac( FLWCVector3  V)
{
	float3  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector3  LWCFloor( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector3  LWCCeil( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector3  LWCRound( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector3  LWCTrunc( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , trunc(VN.Offset)); }


float3  LWCSign( FLWCVector3  V) { return  float3 (sign(LWCToFloat(V))); }
float3  LWCSaturate( FLWCVector3  V) { return saturate(LWCToFloat(V)); }
float3  LWCClampScalar( FLWCVector3  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector3  LWCMultiply( FLWCVector3  Lhs,  FLWCVector3  Rhs)
{
	return  MakeLWCVector3 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3  LWCMultiply( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector3  LWCMultiply( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector3  LWCDivide( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3  LWCDivide( FLWCVector3  Lhs,  float3  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3  LWCDivide( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (( float3 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector3  LWCLerp( FLWCVector3  Lhs,  FLWCVector3  Rhs,  float3  S)
{
	return  MakeLWCVector3 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float3  LWCFmod( FLWCVector3  Lhs,  float3  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float3  LWCFmodFloor( FLWCVector3  Lhs,  float3  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float3  LWCFmodFloorPI( FLWCVector3  V)
{
	return LWCFmodFloor(V, PI);

}
float3  LWCFmodFloor2PI( FLWCVector3  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float3  LWCSin( FLWCVector3  V) { return sin(LWCFmodFloor2PI(V)); }
float3  LWCCos( FLWCVector3  V) { return cos(LWCFmodFloor2PI(V)); }
float3  LWCTan( FLWCVector3  V) { return tan(LWCFmodFloorPI(V)); }
float3  LWCASin( FLWCVector3  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float3  LWCACos( FLWCVector3  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float3  LWCATan( FLWCVector3  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float3  LWCSmoothStep( FLWCVector3  Lhs,  FLWCVector3  Rhs,  FLWCVector3  S)
{
	float3  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector3  LWCMin( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMin( float3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMin( FLWCVector3  Lhs,  float3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( float3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( FLWCVector3  Lhs,  float3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector3  LWCAbs( FLWCVector3  V) { return LWCSelect(LWCLess(V, ( float3 )0), LWCNegate(V), V); }

float3  LWCStep( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float3 )1.0f,( float3 )0.0f) ; }
float3  LWCStep( FLWCVector3  Lhs,  float3  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float3 )1.0f,( float3 )0.0f) ; }
float3  LWCStep( float3  Lhs,  FLWCVector3  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float3 )1.0f,( float3 )0.0f) ; }


FLWCVector3  LWCSquareScaled( FLWCVector3  V)
{
	float3  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector3 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 397 "/Engine/Private/LargeWorldCoordinates.ush"
#line 406 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector4  LWCNormalizeTile( FLWCVector4  V)
{
	float4  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector4 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector4  LWCMakeIntTile( FLWCVector4  V)
{
	float4  IntTile = floor(V.Tile);
	return  MakeLWCVector4 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float4  LWCSqrtUnscaled( FLWCVector4  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCRsqrtUnscaled( FLWCVector4  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCRcpUnscaled( FLWCVector4  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCSqrtScaled( FLWCVector4  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float4  LWCRsqrtScaled( FLWCVector4  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float4  LWCRcpScaled( FLWCVector4  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4  LWCSqrt( FLWCVector4  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float4  LWCRsqrt( FLWCVector4  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float4  LWCRcp( FLWCVector4  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool4 LWCGreater( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool4 LWCGreater( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool4 LWCGreater( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool4 LWCGreaterEqual( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool4 LWCGreaterEqual( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool4 LWCGreaterEqual( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool4 LWCLess( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool4 LWCLess( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool4 LWCLess( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool4 LWCLessEqual( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool4 LWCLessEqual( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool4 LWCLessEqual( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float4  LWCDdx( FLWCVector4  V) { return ( float4 )0; }
float4  LWCDdy( FLWCVector4  V) { return ( float4 )0; }
#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector4  LWCAdd( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector4  LWCAdd( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector4  LWCAdd( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector4  LWCSubtract( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector4  LWCSubtract( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector4  LWCSubtract( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool4  LWCEquals( FLWCVector4  Lhs,  FLWCVector4  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool4  LWCEquals( float4  Lhs,  FLWCVector4  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool4  LWCEquals( FLWCVector4  Lhs,  float4  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool4  LWCEqualsApprox( FLWCVector4  Lhs,  FLWCVector4  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float4 )Threshold;
}
bool4  LWCEqualsApprox( float4  Lhs,  FLWCVector4  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float4 )Threshold;
}
bool4  LWCEqualsApprox( FLWCVector4  Lhs,  float4  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float4 )Threshold;
}

FLWCVector4  LWCSelect( bool4  S,  FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( select_internal(S, ((Lhs).Tile) , ((Rhs).Tile) ) ,  select_internal(S,Lhs.Offset,Rhs.Offset) ); }
FLWCVector4  LWCSelect( bool4  S,  float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( select_internal(S,( float4 )0, ((Rhs).Tile) ) ,  select_internal(S,Lhs,Rhs.Offset) ); }
FLWCVector4  LWCSelect( bool4  S,  FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( select_internal(S, ((Lhs).Tile) ,( float4 )0) ,  select_internal(S,Lhs.Offset,Rhs) ); }

FLWCVector4  LWCNegate( FLWCVector4  V) { return  MakeLWCVector4 (- ((V).Tile) , -V.Offset); }

float4  LWCFrac( FLWCVector4  V)
{
	float4  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector4  LWCFloor( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector4  LWCCeil( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector4  LWCRound( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector4  LWCTrunc( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , trunc(VN.Offset)); }


float4  LWCSign( FLWCVector4  V) { return  float4 (sign(LWCToFloat(V))); }
float4  LWCSaturate( FLWCVector4  V) { return saturate(LWCToFloat(V)); }
float4  LWCClampScalar( FLWCVector4  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector4  LWCMultiply( FLWCVector4  Lhs,  FLWCVector4  Rhs)
{
	return  MakeLWCVector4 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4  LWCMultiply( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector4  LWCMultiply( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector4  LWCDivide( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4  LWCDivide( FLWCVector4  Lhs,  float4  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4  LWCDivide( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (( float4 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector4  LWCLerp( FLWCVector4  Lhs,  FLWCVector4  Rhs,  float4  S)
{
	return  MakeLWCVector4 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float4  LWCFmod( FLWCVector4  Lhs,  float4  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float4  LWCFmodFloor( FLWCVector4  Lhs,  float4  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float4  LWCFmodFloorPI( FLWCVector4  V)
{
	return LWCFmodFloor(V, PI);

}
float4  LWCFmodFloor2PI( FLWCVector4  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float4  LWCSin( FLWCVector4  V) { return sin(LWCFmodFloor2PI(V)); }
float4  LWCCos( FLWCVector4  V) { return cos(LWCFmodFloor2PI(V)); }
float4  LWCTan( FLWCVector4  V) { return tan(LWCFmodFloorPI(V)); }
float4  LWCASin( FLWCVector4  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float4  LWCACos( FLWCVector4  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float4  LWCATan( FLWCVector4  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float4  LWCSmoothStep( FLWCVector4  Lhs,  FLWCVector4  Rhs,  FLWCVector4  S)
{
	float4  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector4  LWCMin( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMin( float4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMin( FLWCVector4  Lhs,  float4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( float4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( FLWCVector4  Lhs,  float4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector4  LWCAbs( FLWCVector4  V) { return LWCSelect(LWCLess(V, ( float4 )0), LWCNegate(V), V); }

float4  LWCStep( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float4 )1.0f,( float4 )0.0f) ; }
float4  LWCStep( FLWCVector4  Lhs,  float4  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float4 )1.0f,( float4 )0.0f) ; }
float4  LWCStep( float4  Lhs,  FLWCVector4  Rhs) { return  select_internal(LWCGreaterEqual(Rhs, Lhs),( float4 )1.0f,( float4 )0.0f) ; }


FLWCVector4  LWCSquareScaled( FLWCVector4  V)
{
	float4  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector4 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 407 "/Engine/Private/LargeWorldCoordinates.ush"






FLWCScalar LWCMakeRelativeToTile(FLWCScalar V, float NewTile) { return MakeLWCScalar(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCScalar(NewTile, (float)0.0f)))); }
FLWCVector2 LWCMakeRelativeToTile(FLWCVector2 V, float2 NewTile) { return MakeLWCVector2(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector2(NewTile, (float2)0.0f)))); }
FLWCVector3 LWCMakeRelativeToTile(FLWCVector3 V, float3 NewTile) { return MakeLWCVector3(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector3(NewTile, (float3)0.0f)))); }
FLWCVector4 LWCMakeRelativeToTile(FLWCVector4 V, float4 NewTile) { return MakeLWCVector4(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector4(NewTile, (float4)0.0f)))); }
FLWCMatrix LWCMakeRelativeToTile(FLWCMatrix M, float3 NewTile)
{
	LWCSetOrigin(M, LWCMakeRelativeToTile(LWCGetOrigin(M), NewTile));
	return M;
}

FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent(V, 0) ,  LWCGetComponent(V, 1) ); }
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent(V, 0) ,  LWCGetComponent(V, 1) ),  LWCGetComponent(V, 2) ); }
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent(V, 0) ,  LWCGetComponent(V, 1) ),  LWCGetComponent(V, 2) ),  LWCGetComponent(V, 3) ); }

FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }


FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}

FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	return LWCAdd(X2, Y2);
}

FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent(V, 2) );
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent(V, 2) );
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent(V, 3) );
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}



FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

float LWCRcpLength(FLWCScalar V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector2 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector3 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector4 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }

float LWCNormalize(FLWCScalar V) { return 1.0f; }
float2 LWCNormalize(FLWCVector2 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float3 LWCNormalize(FLWCVector3 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float4 LWCNormalize(FLWCVector4 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
#line 202 "/Engine/Private/Common.ush"
#line 203 "/Engine/Private/Common.ush"
#line 1 "InstancedStereo.ush"
#line 10 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 11 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 12 "/Engine/Private/InstancedStereo.ush"
#line 15 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float SeparateWaterMainDirLightLuminance;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
	void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.TranslatedWorldToSubpixelClip = View.TranslatedWorldToSubpixelClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.MatrixTilePosition = View.MatrixTilePosition;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View.RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View.RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View.RelativePreViewTranslation;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View.PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View.PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View.RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.SeparateWaterMainDirLightLuminance = View.SeparateWaterMainDirLightLuminance;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = View.GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = View.GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipWorldToUVScale = View.GlobalDistanceFieldMipWorldToUVScale;
	Result.GlobalDistanceFieldMipWorldToUVBias = View.GlobalDistanceFieldMipWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View.OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = View.InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FinalizeViewState(Result);
	return Result;
}
ViewState GetInstancedView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = InstancedView.TranslatedWorldToClip;
	Result.TranslatedWorldToSubpixelClip = InstancedView.TranslatedWorldToSubpixelClip;
	Result.RelativeWorldToClip = InstancedView.RelativeWorldToClip;
	Result.ClipToRelativeWorld = InstancedView.ClipToRelativeWorld;
	Result.TranslatedWorldToView = InstancedView.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = InstancedView.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = InstancedView.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = InstancedView.CameraViewToTranslatedWorld;
	Result.ViewToClip = InstancedView.ViewToClip;
	Result.ViewToClipNoAA = InstancedView.ViewToClipNoAA;
	Result.ClipToView = InstancedView.ClipToView;
	Result.ClipToTranslatedWorld = InstancedView.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = InstancedView.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = InstancedView.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = InstancedView.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = InstancedView.MobileMultiviewShadowTransform;
	Result.ViewTilePosition = InstancedView.ViewTilePosition;
	Result.MatrixTilePosition = InstancedView.MatrixTilePosition;
	Result.ViewForward = InstancedView.ViewForward;
	Result.ViewUp = InstancedView.ViewUp;
	Result.ViewRight = InstancedView.ViewRight;
	Result.HMDViewNoRollUp = InstancedView.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = InstancedView.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = InstancedView.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = InstancedView.ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = InstancedView.RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = InstancedView.TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = InstancedView.RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = InstancedView.RelativePreViewTranslation;
	Result.PrevViewToClip = InstancedView.PrevViewToClip;
	Result.PrevClipToView = InstancedView.PrevClipToView;
	Result.PrevTranslatedWorldToClip = InstancedView.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = InstancedView.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = InstancedView.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = InstancedView.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = InstancedView.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = InstancedView.PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = InstancedView.PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = InstancedView.PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = InstancedView.RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = InstancedView.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = InstancedView.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = InstancedView.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = InstancedView.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = InstancedView.TemporalAAJitter;
	Result.GlobalClippingPlane = InstancedView.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = InstancedView.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = InstancedView.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = InstancedView.ViewRectMin;
	Result.ViewSizeAndInvSize = InstancedView.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = InstancedView.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = InstancedView.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = InstancedView.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = InstancedView.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = InstancedView.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = InstancedView.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = InstancedView.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = InstancedView.NumSceneColorMSAASamples;
	Result.SeparateWaterMainDirLightLuminance = InstancedView.SeparateWaterMainDirLightLuminance;
	Result.PreExposure = InstancedView.PreExposure;
	Result.OneOverPreExposure = InstancedView.OneOverPreExposure;
	Result.DiffuseOverrideParameter = InstancedView.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = InstancedView.SpecularOverrideParameter;
	Result.NormalOverrideParameter = InstancedView.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = InstancedView.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = InstancedView.PrevFrameGameTime;
	Result.PrevFrameRealTime = InstancedView.PrevFrameRealTime;
	Result.OutOfBoundsMask = InstancedView.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = InstancedView.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = InstancedView.CullingSign;
	Result.NearPlane = InstancedView.NearPlane;
	Result.GameTime = InstancedView.GameTime;
	Result.RealTime = InstancedView.RealTime;
	Result.DeltaTime = InstancedView.DeltaTime;
	Result.MaterialTextureMipBias = InstancedView.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = InstancedView.MaterialTextureDerivativeMultiply;
	Result.Random = InstancedView.Random;
	Result.FrameNumber = InstancedView.FrameNumber;
	Result.StateFrameIndexMod8 = InstancedView.StateFrameIndexMod8;
	Result.StateFrameIndex = InstancedView.StateFrameIndex;
	Result.DebugViewModeMask = InstancedView.DebugViewModeMask;
	Result.CameraCut = InstancedView.CameraCut;
	Result.UnlitViewmodeMask = InstancedView.UnlitViewmodeMask;
	Result.DirectionalLightColor = InstancedView.DirectionalLightColor;
	Result.DirectionalLightDirection = InstancedView.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = InstancedView.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = InstancedView.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = InstancedView.TemporalAAParams;
	Result.CircleDOFParams = InstancedView.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = InstancedView.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = InstancedView.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = InstancedView.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = InstancedView.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = InstancedView.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = InstancedView.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = InstancedView.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = InstancedView.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = InstancedView.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = InstancedView.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = InstancedView.DemosaicVposOffset;
	Result.DecalDepthBias = InstancedView.DecalDepthBias;
	Result.IndirectLightingColorScale = InstancedView.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = InstancedView.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = InstancedView.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = InstancedView.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = InstancedView.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = InstancedView.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = InstancedView.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = InstancedView.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = InstancedView.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = InstancedView.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = InstancedView.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = InstancedView.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = InstancedView.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = InstancedView.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = InstancedView.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = InstancedView.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = InstancedView.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = InstancedView.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = InstancedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = InstancedView.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = InstancedView.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = InstancedView.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = InstancedView.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = InstancedView.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = InstancedView.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = InstancedView.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = InstancedView.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = InstancedView.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = InstancedView.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = InstancedView.SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = InstancedView.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = InstancedView.MobilePreviewMode;
	Result.HMDEyePaddingOffset = InstancedView.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = InstancedView.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = InstancedView.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = InstancedView.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = InstancedView.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = InstancedView.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = InstancedView.StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = InstancedView.GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = InstancedView.GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipWorldToUVScale = InstancedView.GlobalDistanceFieldMipWorldToUVScale;
	Result.GlobalDistanceFieldMipWorldToUVBias = InstancedView.GlobalDistanceFieldMipWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = InstancedView.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = InstancedView.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = InstancedView.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = InstancedView.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = InstancedView.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = InstancedView.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = InstancedView.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = InstancedView.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = InstancedView.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = InstancedView.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = InstancedView.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = InstancedView.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = InstancedView.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = InstancedView.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = InstancedView.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = InstancedView.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = InstancedView.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = InstancedView.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = InstancedView.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = InstancedView.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = InstancedView.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = InstancedView.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = InstancedView.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = InstancedView.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = InstancedView.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = InstancedView.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = InstancedView.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = InstancedView.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = InstancedView.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = InstancedView.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = InstancedView.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = InstancedView.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = InstancedView.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = InstancedView.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = InstancedView.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = InstancedView.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = InstancedView.RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = InstancedView.OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = InstancedView.FarShadowStaticMeshLODBias;
	Result.MinRoughness = InstancedView.MinRoughness;
	Result.HairRenderInfo = InstancedView.HairRenderInfo;
	Result.EnableSkyLight = InstancedView.EnableSkyLight;
	Result.HairRenderInfoBits = InstancedView.HairRenderInfoBits;
	Result.HairComponents = InstancedView.HairComponents;
	Result.bSubsurfacePostprocessEnabled = InstancedView.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = InstancedView.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = InstancedView.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = InstancedView.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = InstancedView.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = InstancedView.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = InstancedView.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = InstancedView.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = InstancedView.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = InstancedView.PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = InstancedView.InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = InstancedView.GPUSceneViewId;
	Result.ViewResolutionFraction = InstancedView.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = InstancedView.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FinalizeViewState(Result);
	return Result;
}
#line 16 "/Engine/Private/InstancedStereo.ush"

void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}



static ViewState ResolvedView = (ViewState)0.0f;

ViewState ResolveView()
{
	return GetPrimaryView();
}
#line 61 "/Engine/Private/InstancedStereo.ush"
bool IsInstancedStereo()
{



	return false;

}

uint GetEyeIndex(uint InstanceId)
{



	return 0;

}

uint GetInstanceId(uint InstanceId)
{



	return InstanceId;

}
#line 204 "/Engine/Private/Common.ush"
#line 205 "/Engine/Private/Common.ush"
#line 1 "Definitions.usf"
#line 206 "/Engine/Private/Common.ush"
#line 207 "/Engine/Private/Common.ush"
#line 1 "AssertionMacros.ush"
#line 208 "/Engine/Private/Common.ush"
#line 246 "/Engine/Private/Common.ush"
static float GlobalTextureMipBias = 0;
static float GlobalRayCone_TexArea = 0;
float ComputeRayConeLod(Texture2D Tex)
{






    return  0.0f ;

}

float ClampToHalfFloatRange(float X) { return clamp(X, float(0), MaxHalfFloat); }
float2 ClampToHalfFloatRange(float2 X) { return clamp(X, float(0).xx, MaxHalfFloat.xx); }
float3 ClampToHalfFloatRange(float3 X) { return clamp(X, float(0).xxx, MaxHalfFloat.xxx); }
float4 ClampToHalfFloatRange(float4 X) { return clamp(X, float(0).xxxx, MaxHalfFloat.xxxx); }



float4  Texture1DSample(Texture1D Tex, SamplerState Sampler, float UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 274 "/Engine/Private/Common.ush"
}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
#line 282 "/Engine/Private/Common.ush"
}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{

	return Tex.SampleLevel(Sampler, UV.Value, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
#line 290 "/Engine/Private/Common.ush"
}
float  Texture2DSample_A8(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias)  .a ;
#line 298 "/Engine/Private/Common.ush"
}
float4  Texture3DSample(Texture3D Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 306 "/Engine/Private/Common.ush"
}
float4  TextureCubeSample(TextureCube Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 314 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySample(Texture2DArray Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 322 "/Engine/Private/Common.ush"
}
float4  Texture1DSampleLevel(Texture1D Tex, SamplerState Sampler, float UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + MipBias + GlobalTextureMipBias);
#line 338 "/Engine/Private/Common.ush"
}
float4  Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture3DSampleBias(Texture3D Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 354 "/Engine/Private/Common.ush"
}
float4  Texture3DSampleGrad(Texture3D Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float  TextureCubeSampleDepthLevel(TextureCube TexDepth, SamplerState Sampler, float3 UV,  float  Mip)
{
	return TexDepth.SampleLevel(Sampler, UV, Mip).x;
}
float4  TextureCubeSampleBias(TextureCube Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 374 "/Engine/Private/Common.ush"
}
float4  TextureCubeSampleGrad(TextureCube Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSample( Texture2D  Tex, SamplerState Sampler, float2 UV)
{




		return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
#line 390 "/Engine/Private/Common.ush"
}
float4  TextureExternalSampleGrad( Texture2D  Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSampleLevel( Texture2D  Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}




float4  Texture1DSample_Decal(Texture1D Tex, SamplerState Sampler, float UV)
{



	return Texture1DSample(Tex, Sampler, UV);

}
float4  Texture2DSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Texture2DSample(Tex, Sampler, UV);

}
float4  Texture3DSample_Decal(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Texture3DSample(Tex, Sampler, UV);

}
float4  TextureCubeSample_Decal(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return TextureCubeSample(Tex, Sampler, UV);

}
float4  TextureExternalSample_Decal( Texture2D  Tex, SamplerState Sampler, float2 UV)
{



	return TextureExternalSample(Tex, Sampler, UV);

}

float4  Texture2DArraySampleLevel(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DArraySampleBias(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 455 "/Engine/Private/Common.ush"
}
float4  Texture2DArraySampleGrad(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float2 Tile1Dto2D(float xsize, float idx)
{
	float2 xyidx = 0;
	xyidx.y = floor(idx / xsize);
	xyidx.x = idx - xsize * xyidx.y;

	return xyidx;
}
#line 482 "/Engine/Private/Common.ush"
float4 PseudoVolumeTexture(Texture2D Tex, SamplerState TexSampler, float3 inPos, float2 xysize, float numframes,
	uint mipmode = 0, float miplevel = 0, float2 InDDX = 0, float2 InDDY = 0)
{
	float z = inPos.z - 0.5f / numframes;
	float zframe = floor(z * numframes);
	float zphase = frac(z * numframes);

	float2 uv = frac(inPos.xy) / xysize;

	float2 curframe = Tile1Dto2D(xysize.x, zframe) / xysize;
	float2 nextframe = Tile1Dto2D(xysize.x, zframe + 1) / xysize;

	float2 uvCurFrame = uv + curframe;
	float2 uvNextFrame = uv + nextframe;
#line 502 "/Engine/Private/Common.ush"
	float4 sampleA = 0, sampleB = 0;
	switch (mipmode)
	{
	case 0:
		sampleA = Tex.SampleLevel(TexSampler, uvCurFrame, miplevel);
		sampleB = Tex.SampleLevel(TexSampler, uvNextFrame, miplevel);
		break;
	case 1:
		sampleA = Texture2DSample(Tex, TexSampler, uvCurFrame);
		sampleB = Texture2DSample(Tex, TexSampler, uvNextFrame);
		break;
	case 2:
		sampleA = Tex.SampleGrad(TexSampler, uvCurFrame, InDDX, InDDY);
		sampleB = Tex.SampleGrad(TexSampler, uvNextFrame, InDDX, InDDY);
		break;
	default:
		break;
	}

	return lerp(sampleA, sampleB, zphase);
}


float4  TextureCubeArraySample(TextureCubeArray Tex, SamplerState Sampler, float4 UV)
{
	return Tex.Sample(Sampler, UV);
}

float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

float4  TextureCubeArraySampleBias(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float  MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);
#line 542 "/Engine/Private/Common.ush"
}

float4  TextureCubeArraySampleGrad(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float3 UV, float ArrayIndex,  float  Mip)
{
	return TextureCubeArraySampleLevel(Tex, Sampler, float4(UV, ArrayIndex), Mip);
}
#line 585 "/Engine/Private/Common.ush"
float  Luminance(  float3  LinearColor )
{
	return dot( LinearColor,  float3 ( 0.3, 0.59, 0.11 ) );
}

float length2(float2 v)
{
	return dot(v, v);
}
float length2(float3 v)
{
	return dot(v, v);
}
float length2(float4 v)
{
	return dot(v, v);
}

uint Mod(uint a, uint b)
{

	return a % b;
#line 610 "/Engine/Private/Common.ush"
}

uint2 Mod(uint2 a, uint2 b)
{

	return a % b;
#line 619 "/Engine/Private/Common.ush"
}

uint3 Mod(uint3 a, uint3 b)
{

	return a % b;
#line 628 "/Engine/Private/Common.ush"
}




float  ClampedPow( float  X, float  Y)
{
	return pow(max(abs(X), 0.000001f ),Y);
}
float2  ClampedPow( float2  X, float2  Y)
{
	return pow(max(abs(X), float2 ( 0.000001f , 0.000001f )),Y);
}
float3  ClampedPow( float3  X, float3  Y)
{
	return pow(max(abs(X), float3 ( 0.000001f , 0.000001f , 0.000001f )),Y);
}
float4  ClampedPow( float4  X, float4  Y)
{
	return pow(max(abs(X), float4 ( 0.000001f , 0.000001f , 0.000001f , 0.000001f )),Y);
}


float  PositiveClampedPow( float  Base,  float  Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}
float2  PositiveClampedPow( float2  Base,  float2  Exponent)
{
	return  float2 (PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y));
}
float3  PositiveClampedPow( float3  Base,  float3  Exponent)
{
	return  float3 (PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z));
}
float4  PositiveClampedPow( float4  Base,  float4  Exponent)
{
	return  float4 (PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw));
}

float DDX(float Input)
{

	return 0;
#line 675 "/Engine/Private/Common.ush"
}

float2 DDX(float2 Input)
{

	return 0;
#line 684 "/Engine/Private/Common.ush"
}

float3 DDX(float3 Input)
{

	return 0;
#line 693 "/Engine/Private/Common.ush"
}

float4 DDX(float4 Input)
{

	return 0;
#line 702 "/Engine/Private/Common.ush"
}

float DDY(float Input)
{

	return 0;
#line 711 "/Engine/Private/Common.ush"
}

float2 DDY(float2 Input)
{

	return 0;
#line 720 "/Engine/Private/Common.ush"
}

float3 DDY(float3 Input)
{

	return 0;
#line 729 "/Engine/Private/Common.ush"
}

float4 DDY(float4 Input)
{

	return 0;
#line 738 "/Engine/Private/Common.ush"
}
#line 740 "/Engine/Private/Common.ush"
#line 1 "FastMath.ush"
#line 9 "/Engine/Private/FastMath.ush"
#line 1 "FastMathThirdParty.ush"
#line 42 "/Engine/Private/FastMathThirdParty.ush"
float rsqrtFast( float x )
{
	int i = asint(x);
	i = 0x5f3759df - (i >> 1);
	return asfloat(i);
}




float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}




float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}





float rcpFastNR1( float x )
{
	int i = asint(x);
	i = 0x7EF311C3 - i;
	float xRcp = asfloat(i);
	xRcp = xRcp * (-xRcp * x + 2.0f);
	return xRcp;
}

float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

float3 normalizeFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return v * rsqrtFast( LengthSqr );
}

float4 fastClamp(float4 x, float4 Min, float4 Max)
{




	return clamp(x, Min, Max);

}

float3 fastClamp(float3 x, float3 Min, float3 Max)
{




	return clamp(x, Min, Max);

}

float2 fastClamp(float2 x, float2 Min, float2 Max)
{




	return clamp(x, Min, Max);

}

float fastClamp(float x, float Min, float Max)
{




	return clamp(x, Min, Max);

}

int4 fastClamp(int4 x, int4 Min, int4 Max)
{




	return clamp(x, Min, Max);

}

int3 fastClamp(int3 x, int3 Min, int3 Max)
{




	return clamp(x, Min, Max);

}

int2 fastClamp(int2 x, int2 Min, int2 Max)
{




	return clamp(x, Min, Max);

}

int fastClamp(int x, int Min, int Max)
{




	return clamp(x, Min, Max);

}









float acosFast(float inX)
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}




float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}





float atanFastPos( float x )
{
    float t0 = (x < 1.0f) ? x : 1.0f / x;
    float t1 = t0 * t0;
    float poly = 0.0872929f;
    poly = -0.301895f + poly * t1;
    poly = 1.0f + poly * t1;
    poly = poly * t0;
    return (x < 1.0f) ? poly : (0.5 * PI) - poly;
}



float atanFast( float x )
{
    float t0 = atanFastPos( abs(x) );
    return (x < 0) ? -t0: t0;
}

float2 atanFast( float2 x )
{
	return float2( atanFast(x.x), atanFast(x.y) );
}

float3 atanFast( float3 x )
{
	return float3( atanFast(x.x), atanFast(x.y), atanFast(x.z) );
}

float4 atanFast( float4 x )
{
	return float4( atanFast(x.x), atanFast(x.y), atanFast(x.z), atanFast(x.w) );
}

float atan2Fast( float y, float x )
{
	float t0 = max( abs(x), abs(y) );
	float t1 = min( abs(x), abs(y) );
	float t3 = t1 / t0;
	float t4 = t3 * t3;


	t0 = + 0.0872929;
	t0 = t0 * t4 - 0.301895;
	t0 = t0 * t4 + 1.0;
	t3 = t0 * t3;

	t3 = abs(y) > abs(x) ? (0.5 * PI) - t3 : t3;
	t3 = x < 0 ? PI - t3 : t3;
	t3 = y < 0 ? -t3 : t3;

	return t3;
}

float2 atan2Fast( float2 y, float2 x )
{
	return float2( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y) );
}

float3 atan2Fast( float3 y, float3 x )
{
	return float3( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z) );
}

float4 atan2Fast( float4 y, float4 x )
{
	return float4( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z), atan2Fast(y.w, x.w) );
}





float acosFast4(float inX)
{
	float x1 = abs(inX);
	float x2 = x1 * x1;
	float x3 = x2 * x1;
	float s;

	s = -0.2121144f * x1 + 1.5707288f;
	s = 0.0742610f * x2 + s;
	s = -0.0187293f * x3 + s;
	s = sqrt(1.0f - x1) * s;



	return inX >= 0.0f ? s : PI - s;
}




float asinFast4( float x )
{
	return (0.5 * PI) - acosFast4(x);
}




float CosBetweenVectors(float3 A, float3 B)
{

	return dot(A, B) * rsqrt(length2(A) * length2(B));
}



float AngleBetweenVectors(float3 A, float3 B)
{
	return acos(CosBetweenVectors(A, B));
}


float AngleBetweenVectorsFast(float3 A, float3 B)
{
	return acosFast(CosBetweenVectors(A, B));
}


int SignFastInt(float v)
{
	return 1 - int((asuint(v) & 0x80000000) >> 30);
}

int2 SignFastInt(float2 v)
{
	return int2(SignFastInt(v.x), SignFastInt(v.y));
}
#line 10 "/Engine/Private/FastMath.ush"



float FastExp(float x) { return exp2(1.442695f * x); }
float2 FastExp(float2 x) { return exp2(1.442695f * x); }
float3 FastExp(float3 x) { return exp2(1.442695f * x); }
float4 FastExp(float4 x) { return exp2(1.442695f * x); }




float FastLog(float x) { return log2(0.693147f * x); }
float2 FastLog(float2 x) { return log2(0.693147f * x); }
float3 FastLog(float3 x) { return log2(0.693147f * x); }
float4 FastLog(float4 x) { return log2(0.693147f * x); }
#line 741 "/Engine/Private/Common.ush"
#line 1 "Random.ush"
#line 12 "/Engine/Private/Random.ush"
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);


	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}







float InterleavedGradientNoise( float2 uv, float FrameId )
{

	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}



float RandFast( uint2 PixelPos, float Magic = 3571.0 )
{
	float2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + float2( 0.25, 0.0 );
	float Random = frac( dot( Random2 * Random2, Magic ) );
	Random = frac( Random * Random * (2 * Magic) );
	return Random;
}
#line 56 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed /  4093 );
	s = frac(s * s *  4093 );
	s = frac(s * s *  4093 );
	return s;
}








uint3 Rand3DPCG16(int3 p)
{

	uint3 v = uint3(p);




	v = v * 1664525u + 1013904223u;
#line 94 "/Engine/Private/Random.ush"
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	return v >> 16u;
}






uint3 Rand3DPCG32(int3 p)
{

	uint3 v = uint3(p);


	v = v * 1664525u + 1013904223u;


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	v ^= v >> 16u;


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return v;
}








uint4 Rand4DPCG32(int4 p)
{

	uint4 v = uint4(p);


	v = v * 1664525u + 1013904223u;


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;


	v ^= (v >> 16u);


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	return v;
}
#line 174 "/Engine/Private/Random.ush"
void FindBestAxisVectors(float3 In, out float3 Axis1, out float3 Axis2 )
{
	const float3 N = abs(In);


	if( N.z > N.x && N.z > N.y )
	{
		Axis1 = float3(1, 0, 0);
	}
	else
	{
		Axis1 = float3(0, 0, 1);
	}

	Axis1 = normalize(Axis1 - In * dot(Axis1, In));
	Axis2 = cross(Axis1, In);
}
#line 215 "/Engine/Private/Random.ush"
uint2 ScrambleTEA(uint2 v, uint IterationCount = 3)
{

	uint k[4] ={ 0xA341316Cu , 0xC8013EA4u , 0xAD90777Du , 0x7E95761Eu };

	uint y = v[0];
	uint z = v[1];
	uint sum = 0;

	[unroll]  for(uint i = 0; i < IterationCount; ++i)
	{
		sum += 0x9e3779b9;
		y += ((z << 4u) + k[0]) ^ (z + sum) ^ ((z >> 5u) + k[1]);
		z += ((y << 4u) + k[2]) ^ (y + sum) ^ ((y >> 5u) + k[3]);
	}

	return uint2(y, z);
}






float3 NoiseTileWrap(float3 v, bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}




float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10);
}




float4 PerlinRampDerivative(float4 t)
{
	return t * t * (t * (t * 30 - 60) + 30);
}







float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	return float4(direction, dot(direction, offset));
}







float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}







float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}





float4x3 SimplexCorners(float3 v)
{

	float3 tet = floor(v + v.x/3 + v.y/3 + v.z/3);
	float3 base = tet - tet.x/6 - tet.y/6 - tet.z/6;
	float3 f = v - base;



	float3 g = step(f.yzx, f.xyz), h = 1 - g.zxy;
	float3 a1 = min(g, h) - 1. / 6., a2 = max(g, h) - 1. / 3.;


	return float4x3(base, base + a1, base + a2, base + 0.5);
}




float4 SimplexSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	return (1 * scale + s*(-3 * scale + s*(3 * scale - s*scale)));
}




float3x4 SimplexDSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	s = -12 * scale + s*(24 * scale - s * 12 * scale);

	return float3x4(
		s * float4(f[0][0], f[1][0], f[2][0], f[3][0]),
		s * float4(f[0][1], f[1][1], f[2][1], f[3][1]),
		s * float4(f[0][2], f[1][2], f[2][2], f[3][2]));
}
#line 403 "/Engine/Private/Random.ush"
float3x4 JacobianSimplex_ALU(float3 v, bool bTiling, float RepeatSize)
{

	float4x3 T = SimplexCorners(v);
	uint3 rand;
	float4x3 gvec[3], fv;
	float3x4 grad;



	fv[0] = v - T[0];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[0] + 0.5, bTiling, RepeatSize))));
	gvec[0][0] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][0] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][0] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][0] = dot(gvec[0][0], fv[0]);
	grad[1][0] = dot(gvec[1][0], fv[0]);
	grad[2][0] = dot(gvec[2][0], fv[0]);

	fv[1] = v - T[1];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[1] + 0.5, bTiling, RepeatSize))));
	gvec[0][1] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][1] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][1] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][1] = dot(gvec[0][1], fv[1]);
	grad[1][1] = dot(gvec[1][1], fv[1]);
	grad[2][1] = dot(gvec[2][1], fv[1]);

	fv[2] = v - T[2];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[2] + 0.5, bTiling, RepeatSize))));
	gvec[0][2] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][2] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][2] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][2] = dot(gvec[0][2], fv[2]);
	grad[1][2] = dot(gvec[1][2], fv[2]);
	grad[2][2] = dot(gvec[2][2], fv[2]);

	fv[3] = v - T[3];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[3] + 0.5, bTiling, RepeatSize))));
	gvec[0][3] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][3] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][3] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][3] = dot(gvec[0][3], fv[3]);
	grad[1][3] = dot(gvec[1][3], fv[3]);
	grad[2][3] = dot(gvec[2][3], fv[3]);


	float4 sv = SimplexSmooth(fv);
	float3x4 ds = SimplexDSmooth(fv);

	float3x4 jacobian;
	jacobian[0] = float4(mul(sv, gvec[0]) + mul(ds, grad[0]), dot(sv, grad[0]));
	jacobian[1] = float4(mul(sv, gvec[1]) + mul(ds, grad[1]), dot(sv, grad[1]));
	jacobian[2] = float4(mul(sv, gvec[2]) + mul(ds, grad[2]), dot(sv, grad[2]));

	return jacobian;
}






float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}









float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);

	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;
	if (bTiling)
	{
		OffsetB = iv1.z * ZShear;
	}


	float ts = 1 / 128.0f;


	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;


	float2 TexA1 = TexA0 + ts;
	float2 TexB1 = TexB0 + ts;
	if (bTiling)
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}



	float3 A = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;

	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}



float FastGradientPerlinNoise3D_TEX(float3 xyz)
{

	float Extent = 16;



	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);


	float3 uvw = frac(xyz);


	float3 p0 = xyz - uvw;


	float3 f = PerlinRamp(float4(uvw, 0)).xyz;

	float3 p = p0 + f;

	float4 NoiseSample = Texture3DSampleLevel(View.PerlinNoise3DTexture, View.PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);



	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}





float3 VoronoiCornerSample(float3 pos, int Quality)
{

	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;



	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}



	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}


	return noise;
}








float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}


float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v), fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);


	float4 mindist = float4(0,0,0,100);
	float3 p, offset;


	if (Quality == 3)
	{
		[unroll(3)]  for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			[unroll(3)]  for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				[unroll(3)]  for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}


	else
	{
		[unroll(2)]  for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			[unroll(2)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(2)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					if (Quality == 2)
					{

						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}


	if (Quality >= 4)
	{
		[unroll(2)]  for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			[unroll(2)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(2)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{

					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}


	return float4(mindist.xyz, sqrt(mindist.w));
}







float3 ComputeSimplexWeights2D(float2 OrthogonalPos, out float2 PosA, out float2 PosB, out float2 PosC)
{
	float2 OrthogonalPosFloor = floor(OrthogonalPos);
	PosA = OrthogonalPosFloor;
	PosB = PosA + float2(1, 1);

	float2 LocalPos = OrthogonalPos - OrthogonalPosFloor;

	PosC = PosA + ((LocalPos.x > LocalPos.y) ? float2(1,0) : float2(0,1));

	float b = min(LocalPos.x, LocalPos.y);
	float c = abs(LocalPos.y - LocalPos.x);
	float a = 1.0f - b - c;

	return float3(a, b, c);
}



float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b =
		  min(max(0, RG), max(0, RB))
		+ min(max(0, -RG), max(0, GB))
		+ min(max(0, -RB), max(0, -GB));

	ret.a =
		  min(max(0, -RG), max(0, -RB))
		+ min(max(0, RG), max(0, -GB))
		+ min(max(0, RB), max(0, GB));

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;


	float3 p = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}




float GradientSimplexNoise2D_TEX(float2 EvalPos)
{
	float2 OrthogonalPos = SkewSimplex(EvalPos);

	float2 PosA, PosB, PosC, PosD;
	float3 Weights = ComputeSimplexWeights2D(OrthogonalPos, PosA, PosB, PosC);


	float2 A = GetPerlinNoiseGradientTextureAt(PosA);
	float2 B = GetPerlinNoiseGradientTextureAt(PosB);
	float2 C = GetPerlinNoiseGradientTextureAt(PosC);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);

	float DistanceWeight;

	DistanceWeight = saturate(0.5f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;

	return 70 * (a + b + c);
}






float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);


	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}


float VolumeRaymarch(float3 posPixelWS, float3 posCameraWS)
{
	float ret = 0;
	int cnt = 60;

	[loop]  for(int i=0; i < cnt; ++i)
	{
		ret += saturate(FastGradientPerlinNoise3D_TEX(lerp(posPixelWS, posCameraWS, i/(float)cnt) * 0.01) - 0.2f);
	}

	return ret / cnt * (length(posPixelWS - posCameraWS) * 0.001f );
}
#line 742 "/Engine/Private/Common.ush"
#line 747 "/Engine/Private/Common.ush"
float  PhongShadingPow( float  X,  float  Y)
{
#line 765 "/Engine/Private/Common.ush"
	return ClampedPow(X, Y);
}
#line 787 "/Engine/Private/Common.ush"
Texture2D LightAttenuationTexture;
SamplerState LightAttenuationTextureSampler;





float ConvertTangentUnormToSnorm8(float Input)
{
	int IntVal = int(round(Input * 255.0f));

	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm8(float2 Input)
{
	int2 IntVal = int2(round(Input * 255.0f));

	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm8(float3 Input)
{
	int3 IntVal = int3(round(Input * 255.0f));
	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm8(float4 Input)
{
	int4 IntVal = int4(round(Input * 255.0f));

	IntVal =  select_internal(IntVal > 127,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 127.0f, -1, 1);
}
float ConvertTangentUnormToSnorm16(float Input)
{
	int IntVal = int(round(Input * 65535.0f));

	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFF8000,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm16(float2 Input)
{
	int2 IntVal = int2(round(Input * 65535.0f));

	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm16(float3 Input)
{
	int3 IntVal = int3(round(Input * 65535.0f));
	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm16(float4 Input)
{
	int4 IntVal = int4(round(Input * 65535.0f));

	IntVal =  select_internal(IntVal > 32767,IntVal | 0xFFFFFF80,IntVal) ;
	return clamp(IntVal / 32767.0f, -1, 1);
}
float ConvertTangentSnormToUnorm8(float Input)
{
	float Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm8(float2 Input)
{
	float2 Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm8(float3 Input)
{
	float3 Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm8(float4 Input)
{
	float4 Res =  select_internal(Input >= 0.0f,Input * 127,((Input + 1.0) * 127) + 128) ;
	return clamp(Res / 255, 0.0f, 0.99f);
}
float ConvertTangentSnormToUnorm16(float Input)
{
	float Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm16(float2 Input)
{
	float2 Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm16(float3 Input)
{
	float3 Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm16(float4 Input)
{
	float4 Res =  select_internal(Input >= 0.0f,Input * 32767,((Input + 1.0) * 32767) + 32768) ;
	return clamp(Res / 65535, 0.0f, 0.99f);
}






uint PackUnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, 0.0, 1.0) * 65535.0));
	return (sv.x | (sv.y << 16u));
}

uint PackSnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, -1.0, 1.0) * 32767.0) + 32767.0);
	return (sv.x | (sv.y << 16u));
}

float2 UnpackUnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = (p & 0xffff) * rcp(65535.0f);
	Ret.y = (p >> 16u) * rcp(65535.0f);
	return Ret;
}

float2 UnpackSnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = clamp((float(p & 0xffff) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	Ret.y = clamp((float(p >> 16u) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	return Ret;
}

float Square( float x )
{
	return x*x;
}

float2 Square( float2 x )
{
	return x*x;
}

float3 Square( float3 x )
{
	return x*x;
}

float4 Square( float4 x )
{
	return x*x;
}

float Pow2( float x )
{
	return x*x;
}

float2 Pow2( float2 x )
{
	return x*x;
}

float3 Pow2( float3 x )
{
	return x*x;
}

float4 Pow2( float4 x )
{
	return x*x;
}

float Pow3( float x )
{
	return x*x*x;
}

float2 Pow3( float2 x )
{
	return x*x*x;
}

float3 Pow3( float3 x )
{
	return x*x*x;
}

float4 Pow3( float4 x )
{
	return x*x*x;
}

float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

float Pow6( float x )
{
	float xx = x*x;
	return xx * xx * xx;
}

float2 Pow6( float2 x )
{
	float2 xx = x*x;
	return xx * xx * xx;
}

float3 Pow6( float3 x )
{
	float3 xx = x*x;
	return xx * xx * xx;
}

float4 Pow6( float4 x )
{
	float4 xx = x*x;
	return xx * xx * xx;
}


float  AtanFast(  float  x )
{

	float3  A = x < 1 ?  float3 ( x, 0, 1 ) :  float3 ( 1/x, 0.5 * PI, -1 );
	return A.y + A.z * ( ( ( -0.130234 * A.x - 0.0954105 ) * A.x + 1.00712 ) * A.x - 0.00001203333 );
}


float  EncodeLightAttenuation( float  InColor)
{


	return sqrt(InColor);
}


float4  EncodeLightAttenuation( float4  InColor)
{
	return sqrt(InColor);
}


float  DecodeLightAttenuation( float  InColor)
{
	return Square(InColor);
}


float4  DecodeLightAttenuation( float4  InColor)
{
	return Square(InColor);
}


float4  RGBTEncode( float3  Color)
{
	float4  RGBT;
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	RGBT.a = Max * rcp(1.0 + Max);
	return RGBT;
}

float3  RGBTDecode( float4  RGBT)
{
	RGBT.a = RGBT.a * rcp(1.0 - RGBT.a);
	return RGBT.rgb * RGBT.a;
}



float4  RGBMEncode(  float3  Color )
{
	Color *= 1.0 / 64.0;

	float4 rgbm;
	rgbm.a = saturate( max( max( Color.r, Color.g ), max( Color.b, 1e-6 ) ) );
	rgbm.a = ceil( rgbm.a * 255.0 ) / 255.0;
	rgbm.rgb = Color / rgbm.a;
	return rgbm;
}

float4  RGBMEncodeFast(  float3  Color )
{

	float4  rgbm;
	rgbm.a = dot( Color, 255.0 / 64.0 );
	rgbm.a = ceil( rgbm.a );
	rgbm.rgb = Color / rgbm.a;
	rgbm *=  float4 ( 255.0 / 64.0, 255.0 / 64.0, 255.0 / 64.0, 1.0 / 255.0 );
	return rgbm;
}

float3  RGBMDecode(  float4  rgbm,  float  MaxValue )
{
	return rgbm.rgb * (rgbm.a * MaxValue);
}

float3  RGBMDecode(  float4  rgbm )
{
	return rgbm.rgb * (rgbm.a * 64.0f);
}

float4  RGBTEncode8BPC( float3  Color,  float  Range)
{
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	Max = min(Max, Range);

	float4  RGBT;
	RGBT.a = (Range + 1) / Range * Max / (1 + Max);


	RGBT.a = ceil(RGBT.a*255.0) / 255.0;
	Max = RGBT.a / (1 + 1 / Range - RGBT.a);

	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	return RGBT;
}

float3  RGBTDecode8BPC( float4  RGBT,  float  Range)
{
	RGBT.a = RGBT.a / (1 + 1 / Range - RGBT.a);
	return RGBT.rgb * RGBT.a;
}
#line 1179 "/Engine/Private/Common.ush"
float2 CalcScreenUVFromOffsetFraction(float4 ScreenPosition, float2 OffsetFraction)
{
	float2 NDC = ScreenPosition.xy / ScreenPosition.w;



	float2 OffsetNDC = clamp(NDC + OffsetFraction * float2(2, -2), -.999f, .999f);
	return float2(OffsetNDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float4 GetPerPixelLightAttenuation(float2 UV)
{
	return DecodeLightAttenuation(Texture2DSampleLevel(LightAttenuationTexture, LightAttenuationTextureSampler, UV, 0));
}




float ConvertFromDeviceZ(float DeviceZ)
{

	return DeviceZ * View.InvDeviceZToWorldZTransform[0] + View.InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}


bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip[3][3] >= 1.0f;
}




float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (IsOrthoProjection(View.ViewToClip))
	{

		return SceneDepth * View.ViewToClip[2][2] + View.ViewToClip[3][2];
	}
	else
	{

		return 1.0f / ((SceneDepth + View.InvDeviceZToWorldZTransform[3]) * View.InvDeviceZToWorldZTransform[2]);
	}
}

float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View.BufferSizeAndInvSize.zw;
}


float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


FLWCVector3 SvPositionToWorld(float4 SvPosition)
{
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);
	return LWCSubtract(TranslatedWorldPosition,  GetPrimaryView() .PreViewTranslation);
}


float4 SvPositionToScreenPosition(float4 SvPosition)
{



	float2 PixelPos = SvPosition.xy - View.ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * View.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}


float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

void SvPositionToResolvedScreenPositionDeriv(float4 SvPosition, float2 PPZ_DDX_DDY, float2 W_DDX_DDY, inout float4 ScreenPosition, inout float4 ScreenPositionDDX, inout float4 ScreenPositionDDY)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float4 NDCPos = float4((PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z, 1.0f);
	float4 NDCPosDDX = float4(ResolvedView.ViewSizeAndInvSize.z * 2.0f, 0.0f, PPZ_DDX_DDY.x, 0.0f);
	float4 NDCPosDDY = float4(ResolvedView.ViewSizeAndInvSize.w * 2.0f, 0.0f, PPZ_DDX_DDY.y, 0.0f);

	ScreenPosition = NDCPos * SvPosition.w;
	ScreenPositionDDX = NDCPos * W_DDX_DDY.x + NDCPosDDX * SvPosition.w;
	ScreenPositionDDY = NDCPos * W_DDX_DDY.y + NDCPosDDY * SvPosition.w;
}

float2 SvPositionToViewportUV(float4 SvPosition)
{

	float2 PixelPos = SvPosition.xy - View.ViewRectMin.xy;

	return PixelPos.xy * View.ViewSizeAndInvSize.zw;
}

float2 BufferUVToViewportUV(float2 BufferUV)
{
	float2 PixelPos = BufferUV.xy * View.BufferSizeAndInvSize.xy - View.ViewRectMin.xy;
	return PixelPos.xy * View.ViewSizeAndInvSize.zw;
}

float2 ViewportUVToBufferUV(float2 ViewportUV)
{
	float2 PixelPos = ViewportUV * View.ViewSizeAndInvSize.xy;
	return (PixelPos + View.ViewRectMin.xy) * View.BufferSizeAndInvSize.zw;
}


float2 ViewportUVToScreenPos(float2 ViewportUV)
{
	return float2(2 * ViewportUV.x - 1, 1 - 2 * ViewportUV.y);
}

float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}



float3 ScreenToViewPos(float2 ViewportUV, float SceneDepth)
{
	float2 ProjViewPos;

	ProjViewPos.x = ViewportUV.x * View.ScreenToViewSpace.x + View.ScreenToViewSpace.z;
	ProjViewPos.y = ViewportUV.y * View.ScreenToViewSpace.y + View.ScreenToViewSpace.w;
	return float3(ProjViewPos * SceneDepth, SceneDepth);
}
#line 1349 "/Engine/Private/Common.ush"
float2  ScreenAlignedPosition( float4 ScreenPosition )
{
	return  float2 (ScreenPositionToBufferUV(ScreenPosition));
}
#line 1357 "/Engine/Private/Common.ush"
float2  ScreenAlignedUV(  float2  UV )
{
	return (UV* float2 (2,-2) +  float2 (-1,1))*View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
}
#line 1365 "/Engine/Private/Common.ush"
float2  GetViewportCoordinates( float2  InFragmentCoordinates)
{
	return InFragmentCoordinates;
}
#line 1373 "/Engine/Private/Common.ush"
float4  UnpackNormalMap(  float4  TextureSample )
{



		float2  NormalXY = TextureSample.rg;


	NormalXY = NormalXY *  float2 (2.0f,2.0f) -  float2 (1.0f,1.0f);
	float  NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return  float4 ( NormalXY.xy, NormalZ, 1.0f );
}


float AntialiasedTextureMask( Texture2D Tex, SamplerState Sampler, float2 UV, float ThresholdConst, int Channel )
{

	float4  MaskConst =  float4 (Channel == 0, Channel == 1, Channel == 2, Channel == 3);


	const float WidthConst = 1.0f;
	float InvWidthConst = 1 / WidthConst;
#line 1417 "/Engine/Private/Common.ush"
	float Result;
	{

		float Sample1 = dot(MaskConst, Texture2DSample(Tex, Sampler, UV));


		float2 TexDD = float2(DDX(Sample1), DDY(Sample1));

		float TexDDLength = max(abs(TexDD.x), abs(TexDD.y));
		float Top = InvWidthConst * (Sample1 - ThresholdConst);
		Result = Top / TexDDLength + ThresholdConst;
	}

	Result = saturate(Result);

	return Result;
}



float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{

	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}



float  MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;

	[loop]  for(uint i = 0; i < Levels; ++i)
	{

		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{

		Out = Out * 0.5f + 0.5f;
	}


	return lerp(OutputMin, OutputMax, Out);
}





float4  MaterialExpressionVectorNoise( float3  Position, int Quality, int Function, bool bTiling, float TileSize)
{
	float4 result = float4(0,0,0,1);
	float3x4 Jacobian = JacobianSimplex_ALU(Position, bTiling, TileSize);


	switch (Function)
	{
	case 0:
		result.xyz = float3(Rand3DPCG16(int3(floor(NoiseTileWrap(Position, bTiling, TileSize))))) / 0xffff;
		break;
	case 1:
		result.xyz = float3(Jacobian[0].w, Jacobian[1].w, Jacobian[2].w);
		break;
	case 2:
		result = Jacobian[0];
		break;
	case 3:
		result.xyz = float3(Jacobian[2][1] - Jacobian[1][2], Jacobian[0][2] - Jacobian[2][0], Jacobian[1][0] - Jacobian[0][1]);
		break;
	default:
		result = VoronoiNoise3D_ALU(Position, Quality, bTiling, TileSize, false);
		break;
	}
	return result;
}
#line 1544 "/Engine/Private/Common.ush"
float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);


	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;

	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;

	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);

	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;

	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));

	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	return saturate(BoxIntersections);
}


float  ComputeDistanceFromBoxToPoint( float3  Mins,  float3  Maxs,  float3  InPoint)
{
	float3  DistancesToMin =  select_internal(InPoint < Mins,abs(InPoint - Mins), float (0.0)) ;
	float3  DistancesToMax =  select_internal(InPoint > Maxs,abs(InPoint - Maxs), float (0.0)) ;


	float  Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}


float  ComputeSquaredDistanceFromBoxToPoint( float3  BoxCenter,  float3  BoxExtent,  float3  InPoint)
{
	float3  AxisDistances = max(abs(InPoint - BoxCenter) - BoxExtent, 0);
	return dot(AxisDistances, AxisDistances);
}


float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

bool RayHitSphere(float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius)
{
	float3 ClosestPointOnRay = max(0, dot(SphereCenter - RayOrigin, UnitRayDirection)) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius);
}

bool RaySegmentHitSphere(float3 RayOrigin, float3 UnitRayDirection, float RayLength, float3 SphereCenter, float SphereRadius)
{
	float DistanceAlongRay = dot(SphereCenter - RayOrigin, UnitRayDirection);
	float3 ClosestPointOnRay = DistanceAlongRay * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius) && DistanceAlongRay > -SphereRadius && DistanceAlongRay - SphereRadius < RayLength;
}
#line 1613 "/Engine/Private/Common.ush"
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;


	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}


float3  TransformTangentVectorToWorld( float3x3  TangentToWorld,  float3  InTangentVector)
{


	return mul(InTangentVector, TangentToWorld);
}


float3  TransformWorldVectorToTangent( float3x3  TangentToWorld,  float3  InWorldVector)
{


	return mul(TangentToWorld, InWorldVector);
}

float3 TransformWorldVectorToView(float3 InTangentVector)
{

	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}


float  GetBoxPushout( float3  Normal, float3  Extent)
{
	return dot(abs(Normal * Extent),  float3 (1.0f, 1.0f, 1.0f));
}


void GenerateCoordinateSystem(float3 ZAxis, out float3 XAxis, out float3 YAxis)
{
	if (abs(ZAxis.x) > abs(ZAxis.y))
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.xz, ZAxis.xz));
		XAxis = float3(-ZAxis.z * InverseLength, 0.0f, ZAxis.x * InverseLength);
	}
	else
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.yz, ZAxis.yz));
		XAxis = float3(0.0f, ZAxis.z * InverseLength, -ZAxis.y * InverseLength);
	}

	YAxis = cross(ZAxis, XAxis);
}
#line 1692 "/Engine/Private/Common.ush"
struct FScreenVertexOutput
{
	noperspective float2 UV : TEXCOORD0;
	float4 Position : SV_POSITION;
};




float4  EncodeVelocityToTexture(float3 V)
{

		V.xy = sign(V.xy) * sqrt(abs(V.xy)) * (2.0 / sqrt(2.0));




	float4 EncodedV;
	EncodedV.xy = V.xy * (0.499f * 0.5f) + 32767.0f / 65535.0f;


		uint Vz = asuint(V.z);

		EncodedV.z = saturate(float((Vz >> 16) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
		EncodedV.w = saturate(float((Vz >> 0) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
#line 1724 "/Engine/Private/Common.ush"
	return EncodedV;

}

float3 DecodeVelocityFromTexture( float4  InEncodedV)
{



	float4 EncodedV = InEncodedV;

	const float InvDiv = 1.0f / (0.499f * 0.5f);

	float3 V;
	V.xy = EncodedV.xy * InvDiv - 32767.0f / 65535.0f * InvDiv;


		V.z = asfloat((uint(round(EncodedV.z * 65535.0f)) << 16) | uint(round(EncodedV.w * 65535.0f)));
#line 1747 "/Engine/Private/Common.ush"
		V.xy = (V.xy * abs(V.xy)) * 0.5;


	return V;
}


bool GetGIReplaceState()
{



	return false;

}


bool GetNaniteReplaceState()
{



	return false;

}

bool GetRayTracingQualitySwitch()
{



	return false;

}

bool GetPathTracingQualitySwitch()
{



	return false;

}

bool GetLightmassReplaceState()
{



	return false;

}



bool GetRuntimeVirtualTextureOutputSwitch()
{



	return false;

}

struct FWriteToSliceGeometryOutput
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};






void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters.PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters.PosScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
	OutTexCoord.xy = (DrawRectangleParameters.UVScaleBias.zw + (InTexCoord.xy * DrawRectangleParameters.UVScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.zw;
}


void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float4 OutUVAndScreenPos)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos.xy);
	OutUVAndScreenPos.zw = OutPosition.xy;
}


void DrawRectangle(in float4 InPosition, out float4 OutPosition)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters.PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters.PosScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
}
#line 1864 "/Engine/Private/Common.ush"
float SafeSaturate(float In) { return saturate(In);}
float2 SafeSaturate(float2 In) { return saturate(In);}
float3 SafeSaturate(float3 In) { return saturate(In);}
float4 SafeSaturate(float4 In) { return saturate(In);}
#line 1893 "/Engine/Private/Common.ush"
bool IsFinite(float In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool IsPositiveFinite(float In) { return asuint(In) < 0x7F800000; }float MakeFinite(float In) { return select_internal(!IsFinite(In),0.0,In) ; }float MakePositiveFinite(float In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }
bool2 IsFinite(float2 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool2 IsPositiveFinite(float2 In) { return asuint(In) < 0x7F800000; }float2 MakeFinite(float2 In) { return select_internal(!IsFinite(In),0.0,In) ; }float2 MakePositiveFinite(float2 In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }
bool3 IsFinite(float3 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool3 IsPositiveFinite(float3 In) { return asuint(In) < 0x7F800000; }float3 MakeFinite(float3 In) { return select_internal(!IsFinite(In),0.0,In) ; }float3 MakePositiveFinite(float3 In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }
bool4 IsFinite(float4 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool4 IsPositiveFinite(float4 In) { return asuint(In) < 0x7F800000; }float4 MakeFinite(float4 In) { return select_internal(!IsFinite(In),0.0,In) ; }float4 MakePositiveFinite(float4 In) { return select_internal(!IsPositiveFinite(In),0.0,In) ; }





bool GetShadowReplaceState()
{



	return false;

}

bool GetReflectionCapturePassSwitchState()
{
	return View.RenderingReflectionCaptureMask > 0.0f;
}

float IsShadowDepthShader()
{
	return GetShadowReplaceState() ? 1.0f : 0.0f;
}




float DecodePackedTwoChannelValue(float2 PackedHeight)
{
	return PackedHeight.x * 255.0 * 256.0 + PackedHeight.y * 255.0;
}

float DecodeHeightValue(float InValue)
{
	return (InValue - 32768.0) *  (1.0f/128.0f) ;
}

float DecodePackedHeight(float2 PackedHeight)
{
	return DecodeHeightValue(DecodePackedTwoChannelValue(PackedHeight));
}


uint ReverseBitsN(uint Bitfield, const uint BitCount)
{
	return reversebits(Bitfield) >> (32 - BitCount);
}


uint2 ZOrder2D(uint Index, const uint SizeLog2)
{
	uint2 Coord = 0;

	[unroll]
	for (uint i = 0; i < SizeLog2; i++)
	{
		Coord.x |= ((Index >> (2 * i + 0)) & 0x1) << i;
		Coord.y |= ((Index >> (2 * i + 1)) & 0x1) << i;
	}

	return Coord;
}

uint3 ZOrder3D(uint Index, const uint SizeLog2)
{
    uint3 Coord = 0;

    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Coord.x |= ((Index >> (3 * i + 0)) & 0x1) << i;
        Coord.y |= ((Index >> (3 * i + 1)) & 0x1) << i;
        Coord.z |= ((Index >> (3 * i + 2)) & 0x1) << i;
    }

    return Coord;
}

uint ZOrder3DEncode(uint3 Coord, const uint SizeLog2)
{
    uint Index = 0;

    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Index |= ((Coord.x >> i) & 0x1) << (3 * i + 0);
        Index |= ((Coord.y >> i) & 0x1) << (3 * i + 1);
        Index |= ((Coord.z >> i) & 0x1) << (3 * i + 2);
    }

    return Index;
}



struct FPixelShaderIn
{

	float4 SvPosition;


	uint Coverage;


	bool bIsFrontFace;
};

struct FPixelShaderOut
{

	float4 MRT[8];


	uint StrataOutput[3];


	uint Coverage;


	float Depth;
};
#line 2047 "/Engine/Private/Common.ush"
float4 GatherDepth(Texture2D Texture, float2 UV)
{

	float4 DeviceZ = Texture.GatherRed( D3DStaticBilinearClampedSampler , UV);

	return float4(
		ConvertFromDeviceZ(DeviceZ.x),
		ConvertFromDeviceZ(DeviceZ.y),
		ConvertFromDeviceZ(DeviceZ.z),
		ConvertFromDeviceZ(DeviceZ.w));
}
#line 15 "/Engine/Private/PostProcessTonemap.usf"
#line 1 "PostProcessCommon.ush"
#line 9 "/Engine/Private/PostProcessCommon.ush"
#line 1 "SceneTexturesCommon.ush"
#line 41 "/Engine/Private/SceneTexturesCommon.ush"
float3 CalcSceneColor(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct.SceneColorTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).rgb;

}

float4 CalcFullSceneColor(float2 ScreenUV)
{



	return Texture2DSample(SceneTexturesStruct.SceneColorTexture,  SceneTexturesStruct.PointClampSampler ,ScreenUV);

}


float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct.SceneDepthTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r);

}


float4 CalcSceneColorAndDepth( float2 ScreenUV )
{
	return float4(CalcSceneColor(ScreenUV), CalcSceneDepth(ScreenUV));
}


float LookupDeviceZ( float2 ScreenUV )
{




	return Texture2DSampleLevel(SceneTexturesStruct.SceneDepthTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r;

}


float LookupDeviceZ(uint2 PixelPos)
{



	return SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelPos, 0)).r;

}


float CalcSceneDepth(uint2 PixelPos)
{



	float DeviceZ = SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelPos, 0)).r;


	return ConvertFromDeviceZ(DeviceZ);

}


float4 GatherSceneDepth(float2 UV, float2 InvBufferSize)
{



	return GatherDepth(SceneTexturesStruct.SceneDepthTexture, UV);

}


float CalcSceneCustomDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct.CustomDepthTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r);

}

uint CalcSceneCustomStencil(uint2 PixelPos)
{



	return SceneTexturesStruct.CustomStencilTexture.Load(uint3(PixelPos, 0))  .g ;

}

float CalcSceneAO(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct.ScreenSpaceAOTexture,  SceneTexturesStruct.PointClampSampler , ScreenUV, 0).r;

}
#line 10 "/Engine/Private/PostProcessCommon.ush"









Texture2D PostprocessInput0;
SamplerState PostprocessInput0Sampler;
Texture2D PostprocessInput1;
SamplerState PostprocessInput1Sampler;
Texture2D PostprocessInput2;
SamplerState PostprocessInput2Sampler;
Texture2D PostprocessInput3;
SamplerState PostprocessInput3Sampler;
Texture2D PostprocessInput4;
SamplerState PostprocessInput4Sampler;
Texture2D PostprocessInput5;
SamplerState PostprocessInput5Sampler;
Texture2D PostprocessInput6;
SamplerState PostprocessInput6Sampler;
Texture2D PostprocessInput7;
SamplerState PostprocessInput7Sampler;
Texture2D PostprocessInput8;
SamplerState PostprocessInput8Sampler;
Texture2D PostprocessInput9;
SamplerState PostprocessInput9Sampler;
Texture2D PostprocessInput10;
SamplerState PostprocessInput10Sampler;


float4 PostprocessInput0Size;
float4 PostprocessInput1Size;
float4 PostprocessInput2Size;
float4 PostprocessInput3Size;
float4 PostprocessInput4Size;
float4 PostprocessInput5Size;
float4 PostprocessInput6Size;
float4 PostprocessInput7Size;
float4 PostprocessInput8Size;
float4 PostprocessInput9Size;
float4 PostprocessInput10Size;


float4 PostprocessInput0MinMax;
float4 PostprocessInput1MinMax;
float4 PostprocessInput2MinMax;
float4 PostprocessInput3MinMax;
float4 PostprocessInput4MinMax;
float4 PostprocessInput5MinMax;
float4 PostprocessInput6MinMax;
float4 PostprocessInput7MinMax;
float4 PostprocessInput8MinMax;
float4 PostprocessInput9MinMax;
float4 PostprocessInput10MinMax;


float4 ViewportSize;

uint4 ViewportRect;



float4 ScreenPosToPixel;

float4 SceneColorBufferUVViewport;



float2 ViewportUVToPostProcessingSceneColorBufferUV(float2 ViewportUV)
{
	return ViewportUV * SceneColorBufferUVViewport.xy + SceneColorBufferUVViewport.zw;
}




float DiscMask(float2 ScreenPos)
{
	float x = saturate(1.0f - dot(ScreenPos, ScreenPos));

	return x * x;
}




float RectMask(float2 ScreenPos)
{
	float2 UV = saturate(ScreenPos * 0.5 + 0.5f);
	float2 Mask2 = UV * (1 - UV);

	return Mask2.x * Mask2.y * 8.0f;
}



float ComputeDistanceToRect(int2 Pos, int2 LeftTop, int2 Extent, bool bRoundBorders = true)
{
	int2 RightBottom = LeftTop + Extent - 1;


	int2 Rel = max(int2(0, 0), Pos - RightBottom) + max(int2(0, 0), LeftTop - Pos);

	if(bRoundBorders)
	{

		return length((float2)Rel);
	}
	else
	{

		return max(Rel.x, Rel.y);
	}
}


float3 MappingPolynomial;


float3  ColorCorrection( float3  InLDRColor)
{

	return MappingPolynomial.x * (InLDRColor * InLDRColor) + MappingPolynomial.y * InLDRColor + MappingPolynomial.z;
}





float ComputeVignetteMask(float2 VignetteCircleSpacePos, float Intensity)
{


	VignetteCircleSpacePos *= Intensity;
	float Tan2Angle = dot( VignetteCircleSpacePos, VignetteCircleSpacePos );
	float Cos4Angle = Square( rcp( Tan2Angle + 1 ) );
	return Cos4Angle;
}




float2 VignetteSpace(float2 Pos, float AspectRatio)
{

	float Scale = sqrt(2.0) / sqrt(1.0 + AspectRatio * AspectRatio);
	return Pos * float2(1.0, AspectRatio) * Scale;
}

float2 VignetteSpace(float2 Pos)
{
	return VignetteSpace(Pos, ViewportSize.y * ViewportSize.z);
}

float4  UnwrappedTexture3DSample( Texture2D Texture, SamplerState Sampler, float3 UVW, float Size )
{


	float IntW = floor( UVW.z * Size - 0.5 );
	float  FracW = UVW.z * Size - 0.5 - IntW;

	float U = ( UVW.x + IntW ) / Size;
	float V = UVW.y;

	float4  RG0 = Texture2DSample( Texture, Sampler, float2(U, V) );
	float4  RG1 = Texture2DSample( Texture, Sampler, float2(U + 1.0f / Size, V) );

	return lerp(RG0, RG1, FracW);
}

bool IsComputeUVOutOfBounds(in float2 UV)
{
	float2 CenterDist = abs(UV - 0.5f);
	return (max(CenterDist.x, CenterDist.y) >= 0.5f);
}


float  CocMaxRadiusInPixelsRcp()
{
	float2  MaxOffset =  float2 (-2.125, -0.50) * 2.0;
	return rcp(sqrt(dot(MaxOffset, MaxOffset)));
}

float2  CocBlendScaleBias()
{
	float  Start = 0.25 * CocMaxRadiusInPixelsRcp();
	float  End = 1.0 * CocMaxRadiusInPixelsRcp();
	float2  ScaleBias;
	ScaleBias.x = 1.0 / (End - Start);
	ScaleBias.y = (-Start) * ScaleBias.x;
	return ScaleBias;
}

float2  CocBlendScaleBiasFine()
{
	float  Start = 0.0 * CocMaxRadiusInPixelsRcp();
	float  End = 0.5 * CocMaxRadiusInPixelsRcp();
	float2  ScaleBias;
	ScaleBias.x = 1.0 / (End - Start);
	ScaleBias.y = (-Start) * ScaleBias.x;
	return ScaleBias;
}
#line 16 "/Engine/Private/PostProcessTonemap.usf"
#line 1 "TonemapCommon.ush"
#line 7 "/Engine/Private/TonemapCommon.ush"
#line 1 "ACES.ush"
#line 79 "/Engine/Private/ACES.ush"
static const float HALF_POS_INF = 65535.0f;

static const  uint  WhiteStandard_D65 = 0;
static const  uint  WhiteStandard_D60 = 1;
static const  uint  WhiteStandard_DCI = 2;

struct FColorSpace
{
	uint  White;
	float3x3 XYZtoRGB;
	float3x3 RGBtoXYZ;
};

static const float3x3 AP0_2_XYZ_MAT =
{
	0.9525523959, 0.0000000000, 0.0000936786,
	0.3439664498, 0.7281660966,-0.0721325464,
	0.0000000000, 0.0000000000, 1.0088251844,
};

static const float3x3 XYZ_2_AP0_MAT =
{
	 1.0498110175, 0.0000000000,-0.0000974845,
	-0.4959030231, 1.3733130458, 0.0982400361,
	 0.0000000000, 0.0000000000, 0.9912520182,
};

static const float3x3 AP1_2_XYZ_MAT =
{
	 0.6624541811, 0.1340042065, 0.1561876870,
	 0.2722287168, 0.6740817658, 0.0536895174,
	-0.0055746495, 0.0040607335, 1.0103391003,
};

static const float3x3 XYZ_2_AP1_MAT =
{
	 1.6410233797, -0.3248032942, -0.2364246952,
	-0.6636628587, 1.6153315917, 0.0167563477,
	 0.0117218943, -0.0082844420, 0.9883948585,
};

static const float3x3 AP0_2_AP1_MAT =
{
	 1.4514393161, -0.2365107469, -0.2149285693,
	-0.0765537734, 1.1762296998, -0.0996759264,
	 0.0083161484, -0.0060324498, 0.9977163014,
};

static const float3x3 AP1_2_AP0_MAT =
{
	 0.6954522414, 0.1406786965, 0.1638690622,
	 0.0447945634, 0.8596711185, 0.0955343182,
	-0.0055258826, 0.0040252103, 1.0015006723,
};

static const float3 AP1_RGB2Y =
{
	0.2722287168,
	0.6740817658,
	0.0536895174,
};


static const float3x3 XYZ_2_sRGB_MAT =
{
	 3.2409699419, -1.5373831776, -0.4986107603,
	-0.9692436363, 1.8759675015, 0.0415550574,
	 0.0556300797, -0.2039769589, 1.0569715142,
};

static const float3x3 sRGB_2_XYZ_MAT =
{
	0.4124564, 0.3575761, 0.1804375,
	0.2126729, 0.7151522, 0.0721750,
	0.0193339, 0.1191920, 0.9503041,
};


static const float3x3 XYZ_2_Rec2020_MAT =
{
	 1.7166084, -0.3556621, -0.2533601,
	-0.6666829, 1.6164776, 0.0157685,
	 0.0176422, -0.0427763, 0.94222867
};

static const float3x3 Rec2020_2_XYZ_MAT =
{
	0.6369736, 0.1446172, 0.1688585,
	0.2627066, 0.6779996, 0.0592938,
	0.0000000, 0.0280728, 1.0608437
};


static const float3x3 XYZ_2_P3D65_MAT =
{
	 2.4933963, -0.9313459, -0.4026945,
	-0.8294868, 1.7626597, 0.0236246,
	 0.0358507, -0.0761827, 0.9570140
};

static const float3x3 P3D65_2_XYZ_MAT =
{
	0.4865906, 0.2656683, 0.1981905,
	0.2289838, 0.6917402, 0.0792762,
	0.0000000, 0.0451135, 1.0438031
};


static const float3x3 D65_2_D60_CAT =
{
	 1.01303, 0.00610531, -0.014971,
	 0.00769823, 0.998165, -0.00503203,
	-0.00284131, 0.00468516, 0.924507,
};

static const float3x3 D60_2_D65_CAT =
{
	 0.987224, -0.00611327, 0.0159533,
	-0.00759836, 1.00186, 0.00533002,
	 0.00307257, -0.00509595, 1.08168,
};

static const float HALF_MAX = 65504.0;

float rgb_2_saturation(float3 rgb)
{
	float minrgb = min(min(rgb.r, rgb.g), rgb.b);
	float maxrgb = max(max(rgb.r, rgb.g), rgb.b);
	return (max(maxrgb, 1e-10) - max(minrgb, 1e-10)) / max(maxrgb, 1e-2);
}


float glow_fwd(float ycIn, float glowGainIn, float glowMid)
{
	float glowGainOut;

	if (ycIn <= 2. / 3. * glowMid) {
		glowGainOut = glowGainIn;
	}
	else if (ycIn >= 2 * glowMid) {
		glowGainOut = 0;
	}
	else {
		glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);
	}

	return glowGainOut;
}

float glow_inv(float ycOut, float glowGainIn, float glowMid)
{
	float glowGainOut;

	if (ycOut <= ((1 + glowGainIn) * 2. / 3. * glowMid)) {
		glowGainOut = -glowGainIn / (1 + glowGainIn);
	}
	else if (ycOut >= (2. * glowMid)) {
		glowGainOut = 0.;
	}
	else {
		glowGainOut = glowGainIn * (glowMid / ycOut - 1. / 2.) / (glowGainIn / 2. - 1.);
	}

	return glowGainOut;
}

float pow10(float x)
{
	return pow(10, x);
}



static const float MIN_STOP_SDR = -6.5;
static const float MAX_STOP_SDR = 6.5;

static const float MIN_STOP_RRT = -15.;
static const float MAX_STOP_RRT = 18.;

static const float MIN_LUM_SDR = 0.02;
static const float MAX_LUM_SDR = 48.0;

static const float MIN_LUM_RRT = 0.0001;
static const float MAX_LUM_RRT = 10000.0;

float sigmoid_shaper(float x)
{


	float t = max(1 - abs(0.5 * x), 0);
	float y = 1 + sign(x) * (1 - t * t);
	return 0.5 * y;
}


float cubic_basis_shaper
(
	float x,
	float w
)
{
	float M[4][4] = { { -1. / 6, 3. / 6, -3. / 6, 1. / 6 },
					  { 3. / 6, -6. / 6, 3. / 6, 0. / 6 },
					  { -3. / 6, 0. / 6, 3. / 6, 0. / 6 },
					  { 1. / 6, 4. / 6, 1. / 6, 0. / 6 } };

	float knots[5] = { -0.5 * w, -0.25 * w, 0, 0.25 * w, 0.5 * w };

	float y = 0;
	if ((x > knots[0]) && (x < knots[4])) {
		float knot_coord = (x - knots[0]) * 4.0 / w;
		int j = knot_coord;
		float t = knot_coord - j;

		float monomials[4] = { t * t * t, t * t, t, 1.0 };


		if (j == 3) {
			y = monomials[0] * M[0][0] + monomials[1] * M[1][0] +
				monomials[2] * M[2][0] + monomials[3] * M[3][0];
		}
		else if (j == 2) {
			y = monomials[0] * M[0][1] + monomials[1] * M[1][1] +
				monomials[2] * M[2][1] + monomials[3] * M[3][1];
		}
		else if (j == 1) {
			y = monomials[0] * M[0][2] + monomials[1] * M[1][2] +
				monomials[2] * M[2][2] + monomials[3] * M[3][2];
		}
		else if (j == 0) {
			y = monomials[0] * M[0][3] + monomials[1] * M[1][3] +
				monomials[2] * M[2][3] + monomials[3] * M[3][3];
		}
		else {
			y = 0.0;
		}
	}

	return y * 1.5;
}

float center_hue(float hue, float centerH)
{
	float hueCentered = hue - centerH;
	if (hueCentered < -180.) hueCentered += 360;
	else if (hueCentered > 180.) hueCentered -= 360;
	return hueCentered;
}



static const float3x3 M1 =
{
	{ 0.5, -1.0, 0.5 },
	{ -1.0, 1.0, 0.5 },
	{ 0.5, 0.0, 0.0 }
};





float roll_white_fwd(
	float inValue,
	float new_wht,
	float width
)
{
	const float x0 = -1.0;
	const float x1 = x0 + width;
	const float y0 = -new_wht;
	const float y1 = x1;
	const float m1 = (x1 - x0);
	const float a = y0 - y1 + m1;
	const float b = 2 * (y1 - y0) - m1;
	const float c = y0;
	const float t = (-inValue - x0) / (x1 - x0);
	float outValue = 0.0;
	if (t < 0.0)
		outValue = -(t * b + c);
	else if (t > 1.0)
		outValue = inValue;
	else
		outValue = -((t * a + b) * t + c);
	return outValue;
}

float roll_white_rev(
	float inValue,
	float new_wht,
	float width
)
{
	const float x0 = -1.0;
	const float x1 = x0 + width;
	const float y0 = -new_wht;
	const float y1 = x1;
	const float m1 = (x1 - x0);
	const float a = y0 - y1 + m1;
	const float b = 2. * (y1 - y0) - m1;
	float c = y0;
	float outValue = 0.0;
	if (-inValue < y0)
		outValue = -x0;
	else if (-inValue > y1)
		outValue = inValue;
	else {
		c = c + inValue;
		const float discrim = sqrt(b * b - 4. * a * c);
		const float t = (2. * c) / (-discrim - b);
		outValue = -((t * (x1 - x0)) + x0);
	}
	return outValue;
}

float3 limit_to_primaries
(
	float3 XYZ,
	FColorSpace LIMITING_PRI
)
{
	float3x3 XYZ_2_LIMITING_PRI_MAT = LIMITING_PRI.XYZtoRGB;
	float3x3 LIMITING_PRI_2_XYZ_MAT = LIMITING_PRI.RGBtoXYZ;


	float3 rgb = mul(XYZ_2_LIMITING_PRI_MAT, XYZ);


	float3 limitedRgb = clamp(rgb, 0.0.xxx, 1.0.xxx);


	return mul(LIMITING_PRI_2_XYZ_MAT, limitedRgb);
}


float interpolate1D(const float2 table[2], float value)
{
	float t = saturate((value - table[0].x) / (table[1].x - table[0].x));
	return lerp(table[0].y, table[1].y, t);
}


float lookup_ACESmin(float minLum)
{
	const float2 minTable[2] = { float2(log10(MIN_LUM_RRT), MIN_STOP_RRT),
								 float2(log10(MIN_LUM_SDR), MIN_STOP_SDR) };

	return 0.18 * pow(2., interpolate1D(minTable, log10(minLum)));
}

float lookup_ACESmax(float maxLum)
{
	const float2 maxTable[2] = { float2(log10(MAX_LUM_SDR), MAX_STOP_SDR),
								   float2(log10(MAX_LUM_RRT), MAX_STOP_RRT) };

	return 0.18 * pow(2., interpolate1D(maxTable, log10(maxLum)));
}

struct TsPoint
{
	float x;
	float y;
	float slope;
};

struct TsParams
{
	TsPoint Min;
	TsPoint Mid;
	TsPoint Max;
	float coefsLow[6];
	float coefsHigh[6];
};

void init_coefsLow(
	TsPoint TsPointLow,
	TsPoint TsPointMid,
	out float coefsLow[5]
)
{

	float knotIncLow = (log10(TsPointMid.x) - log10(TsPointLow.x)) / 3.;



	coefsLow[0] = (TsPointLow.slope * (log10(TsPointLow.x) - 0.5 * knotIncLow)) + (log10(TsPointLow.y) - TsPointLow.slope * log10(TsPointLow.x));
	coefsLow[1] = (TsPointLow.slope * (log10(TsPointLow.x) + 0.5 * knotIncLow)) + (log10(TsPointLow.y) - TsPointLow.slope * log10(TsPointLow.x));






	coefsLow[3] = (TsPointMid.slope * (log10(TsPointMid.x) - 0.5 * knotIncLow)) + (log10(TsPointMid.y) - TsPointMid.slope * log10(TsPointMid.x));
	coefsLow[4] = (TsPointMid.slope * (log10(TsPointMid.x) + 0.5 * knotIncLow)) + (log10(TsPointMid.y) - TsPointMid.slope * log10(TsPointMid.x));


	float2 bendsLow[2] = { float2(MIN_STOP_RRT, 0.18),
						   float2(MIN_STOP_SDR, 0.35) };
	float pctLow = interpolate1D(bendsLow, log2(TsPointLow.x / 0.18));
	coefsLow[2] = log10(TsPointLow.y) + pctLow * (log10(TsPointMid.y) - log10(TsPointLow.y));
}

void init_coefsHigh(
	TsPoint TsPointMid,
	TsPoint TsPointMax,
	out float coefsHigh[5]
)
{

	float knotIncHigh = (log10(TsPointMax.x) - log10(TsPointMid.x)) / 3.;



	coefsHigh[0] = (TsPointMid.slope * (log10(TsPointMid.x) - 0.5 * knotIncHigh)) + (log10(TsPointMid.y) - TsPointMid.slope * log10(TsPointMid.x));
	coefsHigh[1] = (TsPointMid.slope * (log10(TsPointMid.x) + 0.5 * knotIncHigh)) + (log10(TsPointMid.y) - TsPointMid.slope * log10(TsPointMid.x));


	coefsHigh[3] = (TsPointMax.slope * (log10(TsPointMax.x) - 0.5 * knotIncHigh)) + (log10(TsPointMax.y) - TsPointMax.slope * log10(TsPointMax.x));
	coefsHigh[4] = (TsPointMax.slope * (log10(TsPointMax.x) + 0.5 * knotIncHigh)) + (log10(TsPointMax.y) - TsPointMax.slope * log10(TsPointMax.x));






	float2 bendsHigh[2] = { float2(MAX_STOP_SDR, 0.89) ,
							float2(MAX_STOP_RRT, 0.90) };
	float pctHigh = interpolate1D(bendsHigh, log2(TsPointMax.x / 0.18));
	coefsHigh[2] = log10(TsPointMid.y) + pctHigh * (log10(TsPointMax.y) - log10(TsPointMid.y));
}

float shift(float inValue, float expShift)
{
	return pow(2., (log2(inValue) - expShift));
}

TsParams init_TsParams(
	float minLum,
	float maxLum,
	float expShift = 0
)
{
	TsPoint MIN_PT = { lookup_ACESmin(minLum), minLum, 0.0 };
	TsPoint MID_PT = { 0.18, 4.8, 1.55 };
	TsPoint MAX_PT = { lookup_ACESmax(maxLum), maxLum, 0.0 };
	float cLow[5];
	init_coefsLow(MIN_PT, MID_PT, cLow);
	float cHigh[5];
	init_coefsHigh(MID_PT, MAX_PT, cHigh);
	MIN_PT.x = shift(lookup_ACESmin(minLum), expShift);
	MID_PT.x = shift(0.18, expShift);
	MAX_PT.x = shift(lookup_ACESmax(maxLum), expShift);

	TsParams P = {
		{MIN_PT.x, MIN_PT.y, MIN_PT.slope},
		{MID_PT.x, MID_PT.y, MID_PT.slope},
		{MAX_PT.x, MAX_PT.y, MAX_PT.slope},
		{cLow[0], cLow[1], cLow[2], cLow[3], cLow[4], cLow[4]},
		{cHigh[0], cHigh[1], cHigh[2], cHigh[3], cHigh[4], cHigh[4]}
	};

	return P;
}

float ssts
(
	const float x,
	const TsParams C
)
{
	const int N_KNOTS_LOW = 4;
	const int N_KNOTS_HIGH = 4;



	float logx = log10(max(x, 1e-10));
	float logy;

	if (logx <= log10(C.Min.x)) {

		logy = logx * C.Min.slope + (log10(C.Min.y) - C.Min.slope * log10(C.Min.x));

	}
	else if ((logx > log10(C.Min.x)) && (logx < log10(C.Mid.x))) {

		float knot_coord = (N_KNOTS_LOW - 1) * (logx - log10(C.Min.x)) / (log10(C.Mid.x) - log10(C.Min.x));
		int j = knot_coord;
		float t = knot_coord - j;

		float3 cf = { C.coefsLow[j], C.coefsLow[j + 1], C.coefsLow[j + 2] };

		float3 monomials = { t * t, t, 1.0 };
		logy = dot(monomials, mul(cf, M1));

	}
	else if ((logx >= log10(C.Mid.x)) && (logx < log10(C.Max.x))) {

		float knot_coord = (N_KNOTS_HIGH - 1) * (logx - log10(C.Mid.x)) / (log10(C.Max.x) - log10(C.Mid.x));
		int j = knot_coord;
		float t = knot_coord - j;

		float3 cf = { C.coefsHigh[j], C.coefsHigh[j + 1], C.coefsHigh[j + 2] };

		float3 monomials = { t * t, t, 1.0 };
		logy = dot(monomials, mul(cf, M1));

	}
	else {

		logy = logx * C.Max.slope + (log10(C.Max.y) - C.Max.slope * log10(C.Max.x));

	}

	return pow10(logy);

}

float inv_ssts
(
	const float y,
	const TsParams C
)
{
	const int N_KNOTS_LOW = 4;
	const int N_KNOTS_HIGH = 4;

	const float KNOT_INC_LOW = (log10(C.Mid.x) - log10(C.Min.x)) / (N_KNOTS_LOW - 1.);
	const float KNOT_INC_HIGH = (log10(C.Max.x) - log10(C.Mid.x)) / (N_KNOTS_HIGH - 1.);


	float KNOT_Y_LOW[N_KNOTS_LOW];

	{
		for (int i = 0; i < N_KNOTS_LOW; i = i + 1) {
			KNOT_Y_LOW[i] = (C.coefsLow[i] + C.coefsLow[i + 1]) / 2.;
		};
	}


	float KNOT_Y_HIGH[N_KNOTS_HIGH];

	{
		for (int i = 0; i < N_KNOTS_HIGH; i = i + 1) {
			KNOT_Y_HIGH[i] = (C.coefsHigh[i] + C.coefsHigh[i + 1]) / 2.;
		};
	}

	float logy = log10(max(y, 1e-10));

	float logx;
	if (logy <= log10(C.Min.y)) {

		logx = log10(C.Min.x);

	}
	else if ((logy > log10(C.Min.y)) && (logy <= log10(C.Mid.y))) {

		int j;
		float3 cf;
		if (logy > KNOT_Y_LOW[0] && logy <= KNOT_Y_LOW[1]) {
			cf[0] = C.coefsLow[0]; cf[1] = C.coefsLow[1]; cf[2] = C.coefsLow[2]; j = 0;
		}
		else if (logy > KNOT_Y_LOW[1] && logy <= KNOT_Y_LOW[2]) {
			cf[0] = C.coefsLow[1]; cf[1] = C.coefsLow[2]; cf[2] = C.coefsLow[3]; j = 1;
		}
		else if (logy > KNOT_Y_LOW[2] && logy <= KNOT_Y_LOW[3]) {
			cf[0] = C.coefsLow[2]; cf[1] = C.coefsLow[3]; cf[2] = C.coefsLow[4]; j = 2;
		}

		const float3 tmp = mul(cf, M1);

		float a = tmp[0];
		float b = tmp[1];
		float c = tmp[2];
		c = c - logy;

		const float d = sqrt(b * b - 4. * a * c);

		const float t = (2. * c) / (-d - b);

		logx = log10(C.Min.x) + (t + j) * KNOT_INC_LOW;

	}
	else if ((logy > log10(C.Mid.y)) && (logy < log10(C.Max.y))) {

		int j;
		float3 cf;
		if (logy >= KNOT_Y_HIGH[0] && logy <= KNOT_Y_HIGH[1]) {
			cf[0] = C.coefsHigh[0]; cf[1] = C.coefsHigh[1]; cf[2] = C.coefsHigh[2]; j = 0;
		}
		else if (logy > KNOT_Y_HIGH[1] && logy <= KNOT_Y_HIGH[2]) {
			cf[0] = C.coefsHigh[1]; cf[1] = C.coefsHigh[2]; cf[2] = C.coefsHigh[3]; j = 1;
		}
		else if (logy > KNOT_Y_HIGH[2] && logy <= KNOT_Y_HIGH[3]) {
			cf[0] = C.coefsHigh[2]; cf[1] = C.coefsHigh[3]; cf[2] = C.coefsHigh[4]; j = 2;
		}

		const float3 tmp = mul(cf, M1);

		float a = tmp[0];
		float b = tmp[1];
		float c = tmp[2];
		c = c - logy;

		const float d = sqrt(b * b - 4. * a * c);

		const float t = (2. * c) / (-d - b);

		logx = log10(C.Mid.x) + (t + j) * KNOT_INC_HIGH;

	}
	else {

		logx = log10(C.Max.x);

	}

	return pow10(logx);

}

float3 ssts_f3
(
	const float3 x,
	const TsParams C
)
{
	float3 outValue;
	outValue[0] = ssts(x[0], C);
	outValue[1] = ssts(x[1], C);
	outValue[2] = ssts(x[2], C);

	return outValue;
}

float3 inv_ssts_f3
(
	const float3 x,
	const TsParams C
)
{
	float3 outValue;
	outValue[0] = inv_ssts(x[0], C);
	outValue[1] = inv_ssts(x[1], C);
	outValue[2] = inv_ssts(x[2], C);

	return outValue;
}


float rgb_2_hue(float3 rgb)
{


	float hue;
	if (rgb[0] == rgb[1] && rgb[1] == rgb[2]) {

		hue = 0;
	}
	else {
		hue = (180. / PI) * atan2(sqrt(3.0) * (rgb[1] - rgb[2]), 2 * rgb[0] - rgb[1] - rgb[2]);
	}

	if (hue < 0.) hue = hue + 360;

	return clamp(hue, 0, 360);
}

float rgb_2_yc(float3 rgb, float ycRadiusWeight = 1.75)
{
#line 763 "/Engine/Private/ACES.ush"
	float r = rgb[0];
	float g = rgb[1];
	float b = rgb[2];

	float chroma = sqrt(b * (b - g) + g * (g - r) + r * (r - b));

	return (b + g + r + ycRadiusWeight * chroma) / 3.;
}

float moncurve_f(float x, float gamma, float offs)
{

	float y;
	const float fs = ((gamma - 1.0) / offs) * pow(offs * gamma / ((gamma - 1.0) * (1.0 + offs)), gamma);
	const float xb = offs / (gamma - 1.0);
	if (x >= xb)
		y = pow((x + offs) / (1.0 + offs), gamma);
	else
		y = x * fs;
	return y;
}

float moncurve_r(float y, float gamma, float offs)
{

	float x;
	const float yb = pow(offs * gamma / ((gamma - 1.0) * (1.0 + offs)), gamma);
	const float rs = pow((gamma - 1.0) / offs, gamma - 1.0) * pow((1.0 + offs) / gamma, gamma);
	if (y >= yb)
		x = (1.0 + offs) * pow(y, 1.0 / gamma) - offs;
	else
		x = y * rs;
	return x;
}

float3 moncurve_f_f3(float3 x, float gamma, float offs)
{
	float3 y;
	y[0] = moncurve_f(x[0], gamma, offs);
	y[1] = moncurve_f(x[1], gamma, offs);
	y[2] = moncurve_f(x[2], gamma, offs);
	return y;
}

float3 moncurve_r_f3(float3 y, float gamma, float offs)
{
	float3 x;
	x[0] = moncurve_r(y[0], gamma, offs);
	x[1] = moncurve_r(y[1], gamma, offs);
	x[2] = moncurve_r(y[2], gamma, offs);
	return x;
}

float bt1886_f(float V, float gamma, float Lw, float Lb)
{


	float a = pow(pow(Lw, 1. / gamma) - pow(Lb, 1. / gamma), gamma);
	float b = pow(Lb, 1. / gamma) / (pow(Lw, 1. / gamma) - pow(Lb, 1. / gamma));
	float L = a * pow(max(V + b, 0.), gamma);
	return L;
}

float bt1886_r(float L, float gamma, float Lw, float Lb)
{


	float a = pow(pow(Lw, 1. / gamma) - pow(Lb, 1. / gamma), gamma);
	float b = pow(Lb, 1. / gamma) / (pow(Lw, 1. / gamma) - pow(Lb, 1. / gamma));
	float V = pow(max(L / a, 0.), 1. / gamma) - b;
	return V;
}

float3 bt1886_f_f3(float3 V, float gamma, float Lw, float Lb)
{
	float3 L;
	L[0] = bt1886_f(V[0], gamma, Lw, Lb);
	L[1] = bt1886_f(V[1], gamma, Lw, Lb);
	L[2] = bt1886_f(V[2], gamma, Lw, Lb);
	return L;
}

float3 bt1886_r_f3(float3 L, float gamma, float Lw, float Lb)
{
	float3 V;
	V[0] = bt1886_r(L[0], gamma, Lw, Lb);
	V[1] = bt1886_r(L[1], gamma, Lw, Lb);
	V[2] = bt1886_r(L[2], gamma, Lw, Lb);
	return V;
}



float smpteRange_to_fullRange(float inValue)
{
	const float REFBLACK = (64. / 1023.);
	const float REFWHITE = (940. / 1023.);

	return ((inValue - REFBLACK) / (REFWHITE - REFBLACK));
}

float fullRange_to_smpteRange(float inValue)
{
	const float REFBLACK = (64. / 1023.);
	const float REFWHITE = (940. / 1023.);

	return (inValue * (REFWHITE - REFBLACK) + REFBLACK);
}

float3 smpteRange_to_fullRange_f3(float3 rgbIn)
{
	float3 rgbOut;
	rgbOut[0] = smpteRange_to_fullRange(rgbIn[0]);
	rgbOut[1] = smpteRange_to_fullRange(rgbIn[1]);
	rgbOut[2] = smpteRange_to_fullRange(rgbIn[2]);

	return rgbOut;
}

float3 fullRange_to_smpteRange_f3(float3 rgbIn)
{
	float3 rgbOut;
	rgbOut[0] = fullRange_to_smpteRange(rgbIn[0]);
	rgbOut[1] = fullRange_to_smpteRange(rgbIn[1]);
	rgbOut[2] = fullRange_to_smpteRange(rgbIn[2]);

	return rgbOut;
}




static const float pq_m1 = 0.1593017578125;
static const float pq_m2 = 78.84375;
static const float pq_c1 = 0.8359375;
static const float pq_c2 = 18.8515625;
static const float pq_c3 = 18.6875;

static const float pq_C = 10000.0;





float ST2084_2_Y(float N)
{


	float Np = pow(N, 1.0 / pq_m2);
	float L = Np - pq_c1;
	if (L < 0.0)
		L = 0.0;
	L = L / (pq_c2 - pq_c3 * Np);
	L = pow(L, 1.0 / pq_m1);
	return L * pq_C;
}





float Y_2_ST2084(float C)

{


	float L = C / pq_C;
	float Lm = pow(L, pq_m1);
	float N = (pq_c1 + pq_c2 * Lm) / (1.0 + pq_c3 * Lm);
	N = pow(N, pq_m2);
	return N;
}

float3 Y_2_ST2084_f3(float3 inValue)
{


	float3 outValue;
	outValue[0] = Y_2_ST2084(inValue[0]);
	outValue[1] = Y_2_ST2084(inValue[1]);
	outValue[2] = Y_2_ST2084(inValue[2]);

	return outValue;
}

float3 ST2084_2_Y_f3(float3 inValue)
{


	float3 outValue;
	outValue[0] = ST2084_2_Y(inValue[0]);
	outValue[1] = ST2084_2_Y(inValue[1]);
	outValue[2] = ST2084_2_Y(inValue[2]);

	return outValue;
}


float3 ST2084_2_HLG_1000nits_f3(float3 PQ)
{

	float3 displayLinear = ST2084_2_Y_f3(PQ);



	float Y_d = 0.2627 * displayLinear[0] + 0.6780 * displayLinear[1] + 0.0593 * displayLinear[2];
	const float L_w = 1000.;
	const float L_b = 0.;
	const float alpha = (L_w - L_b);
	const float beta = L_b;
	const float gamma = 1.2;

	float3 sceneLinear;
	if (Y_d == 0.) {
#line 981 "/Engine/Private/ACES.ush"
		sceneLinear[0] = 0.;
		sceneLinear[1] = 0.;
		sceneLinear[2] = 0.;
	}
	else {
		sceneLinear[0] = pow((Y_d - beta) / alpha, (1. - gamma) / gamma) * ((displayLinear[0] - beta) / alpha);
		sceneLinear[1] = pow((Y_d - beta) / alpha, (1. - gamma) / gamma) * ((displayLinear[1] - beta) / alpha);
		sceneLinear[2] = pow((Y_d - beta) / alpha, (1. - gamma) / gamma) * ((displayLinear[2] - beta) / alpha);
	}


	const float a = 0.17883277;
	const float b = 0.28466892;
	const float c = 0.55991073;

	float3 HLG;
	if (sceneLinear[0] <= 1. / 12) {
		HLG[0] = sqrt(3. * sceneLinear[0]);
	}
	else {
		HLG[0] = a * log(12. * sceneLinear[0] - b) + c;
	}
	if (sceneLinear[1] <= 1. / 12) {
		HLG[1] = sqrt(3. * sceneLinear[1]);
	}
	else {
		HLG[1] = a * log(12. * sceneLinear[1] - b) + c;
	}
	if (sceneLinear[2] <= 1. / 12) {
		HLG[2] = sqrt(3. * sceneLinear[2]);
	}
	else {
		HLG[2] = a * log(12. * sceneLinear[2] - b) + c;
	}

	return HLG;
}



float3 HLG_2_ST2084_1000nits_f3(float3 HLG)
{
	const float a = 0.17883277;
	const float b = 0.28466892;
	const float c = 0.55991073;

	const float L_w = 1000.;
	const float L_b = 0.;
	const float alpha = (L_w - L_b);
	const float beta = L_b;
	const float gamma = 1.2;



	float3 sceneLinear;
	if (HLG[0] >= 0. && HLG[0] <= 0.5) {
		sceneLinear[0] = pow(HLG[0], 2.) / 3.;
	}
	else {
		sceneLinear[0] = (exp((HLG[0] - c) / a) + b) / 12.;
	}
	if (HLG[1] >= 0. && HLG[1] <= 0.5) {
		sceneLinear[1] = pow(HLG[1], 2.) / 3.;
	}
	else {
		sceneLinear[1] = (exp((HLG[1] - c) / a) + b) / 12.;
	}
	if (HLG[2] >= 0. && HLG[2] <= 0.5) {
		sceneLinear[2] = pow(HLG[2], 2.) / 3.;
	}
	else {
		sceneLinear[2] = (exp((HLG[2] - c) / a) + b) / 12.;
	}

	float Y_s = 0.2627 * sceneLinear[0] + 0.6780 * sceneLinear[1] + 0.0593 * sceneLinear[2];


	float3 displayLinear;
	displayLinear[0] = alpha * pow(Y_s, gamma - 1.) * sceneLinear[0] + beta;
	displayLinear[1] = alpha * pow(Y_s, gamma - 1.) * sceneLinear[1] + beta;
	displayLinear[2] = alpha * pow(Y_s, gamma - 1.) * sceneLinear[2] + beta;


	float3 PQ = Y_2_ST2084_f3(displayLinear);

	return PQ;
}


static const float RRT_SAT_FACTOR = 0.96;
static const float ONE_MINUS_RRT_SAT_FACTOR = 0.04;
static const float3x3 RRT_SAT_MAT =
{




		{0.970889148672, 0.02696327063, 0.0021475807},
		{0.010889148672, 0.98696327063, 0.0021475807},
		{0.010889148672, 0.02696327063, 0.9621475807}
};

static const float3x3 RRT_SAT_MAT_INV =
{
	{ 1.03032386 , -0.0280867405 , -0.00223706313 },
	{ -0.0113428626 , 1.01357996 , -0.00223706337 },
	{ -0.0113428626 , -0.0280867405 , 1.03942955 }
};



static const float RRT_GLOW_GAIN = 0.05;
static const float RRT_GLOW_MID = 0.08;


static const float RRT_RED_SCALE = 0.82;
static const float RRT_RED_PIVOT = 0.03;
static const float RRT_RED_HUE = 0.;
static const float RRT_RED_WIDTH = 135.;


float3 rrt_sweeteners(float3 inValue)
{
	float3 aces = inValue;


	float saturation = rgb_2_saturation(aces);
	float ycIn = rgb_2_yc(aces);
	float s = sigmoid_shaper((saturation - 0.4) / 0.2);
	float addedGlow = 1 + glow_fwd(ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);
	aces *= addedGlow;


	float hue = rgb_2_hue(aces);
	float centeredHue = center_hue(hue, RRT_RED_HUE);
	float hueWeight = cubic_basis_shaper(centeredHue, RRT_RED_WIDTH);

	aces.r += hueWeight * saturation * (RRT_RED_PIVOT - aces.r) * (1. - RRT_RED_SCALE);


	aces = clamp(aces, 0, HALF_POS_INF);
	float3 rgbPre = mul(AP0_2_AP1_MAT, aces);
	rgbPre = clamp(rgbPre, 0, HALF_MAX);



	rgbPre = lerp(dot(rgbPre, AP1_RGB2Y).xxx, rgbPre, RRT_SAT_FACTOR);
	return rgbPre;
}

float3 inv_rrt_sweeteners(float3 inValue)
{
	float3 rgbPost = inValue;


	rgbPost = mul(RRT_SAT_MAT_INV, rgbPost);

	rgbPost = clamp(rgbPost, 0.0.xxx, HALF_MAX.xxx);


	float3 aces = mul(AP1_2_AP0_MAT, rgbPost);

	aces = clamp(aces, 0.0.xxx, HALF_MAX.xxx);


	float hue = rgb_2_hue(aces);
	float centeredHue = center_hue(hue, RRT_RED_HUE);
	float hueWeight = cubic_basis_shaper(centeredHue, RRT_RED_WIDTH);

	float minChan;
	if (centeredHue < 0) {
		minChan = aces[1];
	}
	else {
		minChan = aces[2];
	}

	float a = hueWeight * (1. - RRT_RED_SCALE) - 1.;
	float b = aces[0] - hueWeight * (RRT_RED_PIVOT + minChan) * (1. - RRT_RED_SCALE);
	float c = hueWeight * RRT_RED_PIVOT * minChan * (1. - RRT_RED_SCALE);

	aces[0] = (-b - sqrt(b * b - 4. * a * c)) / (2. * a);


	float saturation = rgb_2_saturation(aces);
	float ycOut = rgb_2_yc(aces);
	float s = sigmoid_shaper((saturation - 0.4) / 0.2);
	float reducedGlow = 1. + glow_inv(ycOut, RRT_GLOW_GAIN * s, RRT_GLOW_MID);

	aces *= reducedGlow;
	return aces;
}



float3 XYZ_2_xyY(float3 XYZ)
{
	float3 xyY;
	float divisor = (XYZ[0] + XYZ[1] + XYZ[2]);
	if (divisor == 0.) divisor = 1e-10;
	xyY[0] = XYZ[0] / divisor;
	xyY[1] = XYZ[1] / divisor;
	xyY[2] = XYZ[1];

	return xyY;
}

float3 xyY_2_XYZ(float3 xyY)
{
	float3 XYZ;
	XYZ[0] = xyY[0] * xyY[2] / max(xyY[1], 1e-10);
	XYZ[1] = xyY[2];
	XYZ[2] = (1.0 - xyY[0] - xyY[1]) * xyY[2] / max(xyY[1], 1e-10);

	return XYZ;
}


float3x3 ChromaticAdaptation( float2 src_xy, float2 dst_xy )
{



	const float3x3 ConeResponse =
	{
		 0.8951, 0.2664, -0.1614,
		-0.7502, 1.7135, 0.0367,
		 0.0389, -0.0685, 1.0296,
	};
	const float3x3 InvConeResponse =
	{
		 0.9869929, -0.1470543, 0.1599627,
		 0.4323053, 0.5183603, 0.0492912,
		-0.0085287, 0.0400428, 0.9684867,
	};

	float3 src_XYZ = xyY_2_XYZ( float3( src_xy, 1 ) );
	float3 dst_XYZ = xyY_2_XYZ( float3( dst_xy, 1 ) );

	float3 src_coneResp = mul( ConeResponse, src_XYZ );
	float3 dst_coneResp = mul( ConeResponse, dst_XYZ );

	float3x3 VonKriesMat =
	{
		{ dst_coneResp[0] / src_coneResp[0], 0.0, 0.0 },
		{ 0.0, dst_coneResp[1] / src_coneResp[1], 0.0 },
		{ 0.0, 0.0, dst_coneResp[2] / src_coneResp[2] }
	};

	return mul( InvConeResponse, mul( VonKriesMat, ConeResponse ) );
}

float Y_2_linCV(float Y, float Ymax, float Ymin)
{
	return (Y - Ymin) / (Ymax - Ymin);
}

float linCV_2_Y(float linCV, float Ymax, float Ymin)
{
	return linCV * (Ymax - Ymin) + Ymin;
}

float3 Y_2_linCV_f3(float3 Y, float Ymax, float Ymin)
{
	float3 linCV;
	linCV[0] = Y_2_linCV(Y[0], Ymax, Ymin);
	linCV[1] = Y_2_linCV(Y[1], Ymax, Ymin);
	linCV[2] = Y_2_linCV(Y[2], Ymax, Ymin);
	return linCV;
}

float3 linCV_2_Y_f3(float3 linCV, float Ymax, float Ymin)
{
	float3 Y;
	Y[0] = linCV_2_Y(linCV[0], Ymax, Ymin);
	Y[1] = linCV_2_Y(linCV[1], Ymax, Ymin);
	Y[2] = linCV_2_Y(linCV[2], Ymax, Ymin);
	return Y;
}


static const float DIM_SURROUND_GAMMA = 0.9811;

float3 darkSurround_to_dimSurround(float3 linearCV)
{
	float3 XYZ = mul(AP1_2_XYZ_MAT, linearCV);

	float3 xyY = XYZ_2_xyY(XYZ);
	xyY[2] = clamp(xyY[2], 0., HALF_POS_INF);
	xyY[2] = pow(xyY[2], DIM_SURROUND_GAMMA);
	XYZ = xyY_2_XYZ(xyY);

	return mul(XYZ_2_AP1_MAT, XYZ);
}

float3 dimSurround_to_darkSurround(float3 linearCV)
{
	float3 XYZ = mul(AP1_2_XYZ_MAT, linearCV);

	float3 xyY = XYZ_2_xyY(XYZ);
	xyY[2] = clamp(xyY[2], 0., HALF_POS_INF);
	xyY[2] = pow(xyY[2], 1. / DIM_SURROUND_GAMMA);
	XYZ = xyY_2_XYZ(xyY);

	return mul(XYZ_2_AP1_MAT, XYZ);
}

float3 dark_to_dim(float3 XYZ)
{
	float3 xyY = XYZ_2_xyY(XYZ);
	xyY[2] = clamp(xyY[2], 0., HALF_POS_INF);
	xyY[2] = pow(xyY[2], DIM_SURROUND_GAMMA);
	return xyY_2_XYZ(xyY);
}

float3 dim_to_dark(float3 XYZ)
{
	float3 xyY = XYZ_2_xyY(XYZ);
	xyY[2] = clamp(xyY[2], 0., HALF_POS_INF);
	xyY[2] = pow(xyY[2], 1. / DIM_SURROUND_GAMMA);
	return xyY_2_XYZ(xyY);
}

float3 outputTransform
(
	float3 inValue,
	TsParams PARAMS,
	FColorSpace DISPLAY_PRI,
	FColorSpace LIMITING_PRI,
	int EOTF,
	int SURROUND,
	bool STRETCH_BLACK = true,
	bool D60_SIM = false,
	bool LEGAL_RANGE = false
)
{
	float3x3 XYZ_2_DISPLAY_PRI_MAT = DISPLAY_PRI.XYZtoRGB;
#line 1324 "/Engine/Private/ACES.ush"
	float Y_MIN = PARAMS.Min.y;
	float Y_MAX = PARAMS.Max.y;


	float3 rgbPre = rrt_sweeteners(inValue);


	float3 rgbPost = ssts_f3(rgbPre, PARAMS);




	float3 linearCV = Y_2_linCV_f3(rgbPost, Y_MAX, Y_MIN);


	float3 XYZ = mul(AP1_2_XYZ_MAT, linearCV);
#line 1352 "/Engine/Private/ACES.ush"
	if (SURROUND == 0) {
#line 1357 "/Engine/Private/ACES.ush"
	}
	else if (SURROUND == 1) {

		if ((EOTF == 1) || (EOTF == 2) || (EOTF == 3)) {
#line 1369 "/Engine/Private/ACES.ush"
			XYZ = dark_to_dim(XYZ);
		}
	}
	else if (SURROUND == 2) {

	}






	XYZ = limit_to_primaries(XYZ, LIMITING_PRI);




	if (D60_SIM == false) {
		if (DISPLAY_PRI.White != WhiteStandard_D60) {
			XYZ = mul(D60_2_D65_CAT, XYZ);
		}
	}


	linearCV = mul(XYZ_2_DISPLAY_PRI_MAT, XYZ);





	if (D60_SIM == true) {
#line 1404 "/Engine/Private/ACES.ush"
		float SCALE = 1.0;
		if (DISPLAY_PRI.White == WhiteStandard_D65) {
			SCALE = 0.96362;
		}
		else if (DISPLAY_PRI.White == WhiteStandard_DCI) {
			linearCV[0] = roll_white_fwd(linearCV[0], 0.918, 0.5);
			linearCV[1] = roll_white_fwd(linearCV[1], 0.918, 0.5);
			linearCV[2] = roll_white_fwd(linearCV[2], 0.918, 0.5);
			SCALE = 0.96;
		}
		linearCV *= SCALE;
	}





	linearCV = clamp(linearCV, 0.0.xxx, HALF_POS_INF.xxx);









	float3 outputCV;
	if (EOTF == 0) {




		if (STRETCH_BLACK == true) {
			outputCV = Y_2_ST2084_f3(clamp(linCV_2_Y_f3(linearCV, Y_MAX, 0.0), 0.0, HALF_POS_INF));
		}
		else {
			outputCV = Y_2_ST2084_f3(linCV_2_Y_f3(linearCV, Y_MAX, Y_MIN));
		}
	}
	else if (EOTF == 1) {
		outputCV = bt1886_r_f3(linearCV, 2.4, 1.0, 0.0);
	}
	else if (EOTF == 2) {
		outputCV = moncurve_r_f3(linearCV, 2.4, 0.055);
	}
	else if (EOTF == 3) {
		outputCV = pow(linearCV, (1. / 2.6).xxx);
	}
	else if (EOTF == 4) {

		if (STRETCH_BLACK == true) {
			outputCV = clamp(linCV_2_Y_f3(linearCV, Y_MAX, 0.0), 0.0, HALF_POS_INF);
		}
		else {
			outputCV = linCV_2_Y_f3(linearCV, Y_MAX, Y_MIN);
		}
	}
	else if (EOTF == 5) {


		if (STRETCH_BLACK == true) {
			outputCV = Y_2_ST2084_f3(clamp(linCV_2_Y_f3(linearCV, Y_MAX, 0.0), 0.0, HALF_POS_INF));
		}
		else {
			outputCV = Y_2_ST2084_f3(linCV_2_Y_f3(linearCV, Y_MAX, Y_MIN));
		}
		outputCV = ST2084_2_HLG_1000nits_f3(outputCV);
	}

	if (LEGAL_RANGE == true) {
		outputCV = fullRange_to_smpteRange_f3(outputCV);
	}

	return outputCV;
}

float3 outputTransform
(
	float3 inValue,
	float Y_MIN,
	float Y_MID,
	float Y_MAX,
	FColorSpace DISPLAY_PRI,
	FColorSpace LIMITING_PRI,
	int EOTF,
	int SURROUND,
	bool STRETCH_BLACK = true,
	bool D60_SIM = false,
	bool LEGAL_RANGE = false
)
{
#line 1500 "/Engine/Private/ACES.ush"
	TsParams PARAMS_DEFAULT = init_TsParams(Y_MIN, Y_MAX);
	float expShift = log2(inv_ssts(Y_MID, PARAMS_DEFAULT)) - log2(0.18);
	TsParams PARAMS = init_TsParams(Y_MIN, Y_MAX, expShift);

	return outputTransform(inValue, PARAMS, DISPLAY_PRI, LIMITING_PRI, EOTF, SURROUND, STRETCH_BLACK, D60_SIM, LEGAL_RANGE);
}

float3 invOutputTransform
(
	float3 inValue,
	float Y_MIN,
	float Y_MID,
	float Y_MAX,
	FColorSpace DISPLAY_PRI,
	FColorSpace LIMITING_PRI,
	int EOTF,
	int SURROUND,
	bool STRETCH_BLACK = true,
	bool D60_SIM = false,
	bool LEGAL_RANGE = false
)
{
	float3x3 DISPLAY_PRI_2_XYZ_MAT = DISPLAY_PRI.RGBtoXYZ;
#line 1528 "/Engine/Private/ACES.ush"
	TsParams PARAMS_DEFAULT = init_TsParams(Y_MIN, Y_MAX);
	float expShift = log2(inv_ssts(Y_MID, PARAMS_DEFAULT)) - log2(0.18);
	TsParams PARAMS = init_TsParams(Y_MIN, Y_MAX, expShift);

	float3 outputCV = inValue;

	if (LEGAL_RANGE == true) {
		outputCV = smpteRange_to_fullRange_f3(outputCV);
	}









	float3 linearCV;
	if (EOTF == 0) {
		if (STRETCH_BLACK == true) {
			linearCV = Y_2_linCV_f3(ST2084_2_Y_f3(outputCV), Y_MAX, 0.);
		}
		else {
			linearCV = Y_2_linCV_f3(ST2084_2_Y_f3(outputCV), Y_MAX, Y_MIN);
		}
	}
	else if (EOTF == 1) {
		linearCV = bt1886_f_f3(outputCV, 2.4, 1.0, 0.0);
	}
	else if (EOTF == 2) {
		linearCV = moncurve_f_f3(outputCV, 2.4, 0.055);
	}
	else if (EOTF == 3) {
		linearCV = pow(outputCV, 2.6);
	}
	else if (EOTF == 4) {
		linearCV = Y_2_linCV_f3(outputCV, Y_MAX, Y_MIN);
	}
	else if (EOTF == 5) {
		outputCV = HLG_2_ST2084_1000nits_f3(outputCV);
		if (STRETCH_BLACK == true) {
			linearCV = Y_2_linCV_f3(ST2084_2_Y_f3(outputCV), Y_MAX, 0.);
		}
		else {
			linearCV = Y_2_linCV_f3(ST2084_2_Y_f3(outputCV), Y_MAX, Y_MIN);
		}
	}


	if (D60_SIM == true) {
#line 1584 "/Engine/Private/ACES.ush"
		float SCALE = 1.0;
		if (DISPLAY_PRI.White == WhiteStandard_D65) {
			SCALE = 0.96362;
			linearCV /= SCALE;
		}
		else if (DISPLAY_PRI.White == WhiteStandard_DCI) {
			SCALE = 0.96;
			linearCV[0] = roll_white_rev(linearCV[0] / SCALE, 0.918, 0.5);
			linearCV[1] = roll_white_rev(linearCV[1] / SCALE, 0.918, 0.5);
			linearCV[2] = roll_white_rev(linearCV[2] / SCALE, 0.918, 0.5);
		}

	}


	float3 XYZ = mul(DISPLAY_PRI_2_XYZ_MAT, linearCV);


	if (D60_SIM == false) {
		if (DISPLAY_PRI.White != WhiteStandard_D60) {
			XYZ = mul(D65_2_D60_CAT, XYZ);
		}
	}
#line 1619 "/Engine/Private/ACES.ush"
	if (SURROUND == 0) {
#line 1624 "/Engine/Private/ACES.ush"
	}
	else if (SURROUND == 1) {

		if ((EOTF == 1) || (EOTF == 2) || (EOTF == 3)) {
#line 1636 "/Engine/Private/ACES.ush"
			XYZ = dim_to_dark(XYZ);
		}
	}
	else if (SURROUND == 2) {

	}


	linearCV = mul(XYZ_2_AP1_MAT, XYZ);

	float3 rgbPost = linCV_2_Y_f3(linearCV, Y_MAX, Y_MIN);


	float3 rgbPre = inv_ssts_f3(rgbPost, PARAMS);


	float3 aces = inv_rrt_sweeteners(rgbPre);

	return aces;
}




static const float LIM_CYAN = 1.147;
static const float LIM_MAGENTA = 1.264;
static const float LIM_YELLOW = 1.312;




static const float THR_CYAN = 0.815;
static const float THR_MAGENTA = 0.803;
static const float THR_YELLOW = 0.880;


static const float PWR = 1.2;




float compress(float dist, float lim, float thr, float pwr, bool invert)
{
	float comprDist;
	float scl;
	float nd;
	float p;

	if (dist < thr) {
		comprDist = dist;
	}
	else {

		scl = (lim - thr) / pow(pow((1.0 - thr) / (lim - thr), -pwr) - 1.0, 1.0 / pwr);


		nd = (dist - thr) / scl;
		p = pow(nd, pwr);

		if (!invert) {
			comprDist = thr + scl * nd / (pow(1.0 + p, 1.0 / pwr));
		}
		else {
			if (dist > (thr + scl)) {
				comprDist = dist;
			}
			else {
				comprDist = thr + scl * pow(-(p / (p - 1.0)), 1.0 / pwr);
			}
		}
	}

	return comprDist;
}

float max_f3(float3 a)
{
	return max(a[0], max(a[1], a[2]));
}

float3 compressColor
(
	const float3 ACES,
	const bool invert = false
)
{

	float3 linAP1 = mul(AP0_2_AP1_MAT, ACES);


	float ach = max_f3(linAP1);


	float3 comprLinAP1;


	if (ach < 1e-10f || any(ACES < 0)) {

		comprLinAP1 = linAP1;
	}
	else {
		float3 dist;
		dist[0] = (ach - linAP1[0]) / abs(ach);
		dist[1] = (ach - linAP1[1]) / abs(ach);
		dist[2] = (ach - linAP1[2]) / abs(ach);

		float3 comprDist = {
		compress(dist[0], LIM_CYAN, THR_CYAN, PWR, invert),
		compress(dist[1], LIM_MAGENTA, THR_MAGENTA, PWR, invert),
		compress(dist[2], LIM_YELLOW, THR_YELLOW, PWR, invert)
		};


		comprLinAP1 = float3(
			ach - comprDist[0] * abs(ach),
			ach - comprDist[1] * abs(ach),
			ach - comprDist[2] * abs(ach)
		);
	}


	return mul(AP1_2_AP0_MAT, comprLinAP1);
}
#line 8 "/Engine/Private/TonemapCommon.ush"
#line 1 "GammaCorrectionCommon.ush"
#line 5 "/Engine/Private/GammaCorrectionCommon.ush"
float3  LinearTo709Branchless( float3  lin)
{
	lin = max(6.10352e-5, lin);
	return min(lin * 4.5, pow(max(lin, 0.018), 0.45) * 1.099 - 0.099);
}

float3  Rec709ToLinear( float3  Color)
{
	Color = max(6.10352e-5, Color);
	return  select_internal(Color > 0.081,pow((Color + 0.099) / 1.099, 1.0 / 0.45),Color / 4.5) ;
}

float3  LinearToSrgbBranchless( float3  lin)
{
	lin = max(6.10352e-5, lin);
	return min(lin * 12.92, pow(max(lin, 0.00313067), 1.0/2.4) * 1.055 - 0.055);


}

float  LinearToSrgbBranchingChannel( float  lin)
{
	if(lin < 0.00313067) return lin * 12.92;
	return pow(lin, (1.0/2.4)) * 1.055 - 0.055;
}

float3  LinearToSrgbBranching( float3  lin)
{
	return  float3 (
		LinearToSrgbBranchingChannel(lin.r),
		LinearToSrgbBranchingChannel(lin.g),
		LinearToSrgbBranchingChannel(lin.b));
}

float3  LinearToSrgb( float3  lin)
{


	return LinearToSrgbBranching(lin);
#line 48 "/Engine/Private/GammaCorrectionCommon.ush"
}

float3  sRGBToLinear(  float3  Color )
{
	Color = max(6.10352e-5, Color);
	return  select_internal(Color > 0.04045,pow( Color * (1.0 / 1.055) + 0.0521327, 2.4 ),Color * (1.0 / 12.92)) ;
}
#line 59 "/Engine/Private/GammaCorrectionCommon.ush"
float3  ApplyGammaCorrection( float3  LinearColor,  float  GammaCurveRatio)
{

	float3  CorrectedColor = pow(LinearColor, GammaCurveRatio);









			CorrectedColor = LinearToSrgb(CorrectedColor);



	return CorrectedColor;
}




float3 LogToLin( float3 LogColor )
{
	const float LinearRange = 14;
	const float LinearGrey = 0.18;
	const float ExposureGrey = 444;


	float3 LinearColor = exp2( ( LogColor - ExposureGrey / 1023.0 ) * LinearRange ) * LinearGrey;




	return LinearColor;
}

float3 LinToLog( float3 LinearColor )
{
	const float LinearRange = 14;
	const float LinearGrey = 0.18;
	const float ExposureGrey = 444;


	float3 LogColor = log2(LinearColor) / LinearRange - log2(LinearGrey) / LinearRange + ExposureGrey / 1023.0;




	LogColor = saturate( LogColor );

	return LogColor;
}




float
aces100nitFitInverseFloat(float x)
{
	x = max(0.f, min(0.99f, x));

	float c = ( -0.632456 * sqrt( -0.21510484096 *x*x + 0.267146462932 * x + 0.00027735750507 ) - 0.146704 * x + 0.0083284 ) / ( x - 1.01654 );


	return max(0.f, min(65504.f, c));
}

float3
aces100nitFitInverse(float3 FilmColor)
{
	float3 inverse;
	inverse.r = aces100nitFitInverseFloat(FilmColor.r);
	inverse.g = aces100nitFitInverseFloat(FilmColor.g);
	inverse.b = aces100nitFitInverseFloat(FilmColor.b);
	return inverse;
}




float3
ST2084ToLinear(float3 pq)
{
	const float m1 = 0.1593017578125;
	const float m2 = 78.84375;
	const float c1 = 0.8359375;
	const float c2 = 18.8515625;
	const float c3 = 18.6875;
	const float C = 10000.;

	float3 Np = pow( pq, 1./m2 );
	float3 L = Np - c1;
	L = max(0., L);
	L = L / (c2 - c3 * Np);
	L = pow( L, 1./m1 );
	float3 P = L * C;

	return P;
}

float3
LinearToST2084(float3 lin)
{
	const float m1 = 0.1593017578125;
	const float m2 = 78.84375;
	const float c1 = 0.8359375;
	const float c2 = 18.8515625;
	const float c3 = 18.6875;
	const float C = 10000.;

	float3 L = lin/C;
	float3 Lm = pow(L, m1);
	float3 N1 = ( c1 + c2 * Lm );
	float3 N2 = ( 1.0 + c3 * Lm );
	float3 N = N1 * rcp(N2);
	float3 P = pow( N, m2 );

	return P;
}
#line 9 "/Engine/Private/TonemapCommon.ush"
#line 31 "/Engine/Private/TonemapCommon.ush"
                     






static const float LinearToNitsScale = 100.0;
static const float LinearToNitsScaleInverse = 1.0 / 100.0;

float3  TonemapAndGammaCorrect( float3  LinearColor)
{


	LinearColor = max(LinearColor, 0);

	float3  GammaColor = pow(LinearColor, InverseGamma.x);


	GammaColor = saturate(GammaColor);

	return GammaColor;
}
#line 87 "/Engine/Private/TonemapCommon.ush"
float FilmSlope;
float FilmToe;
float FilmShoulder;
float FilmBlackClip;
float FilmWhiteClip;

float3  FilmToneMap(  float3  LinearColor )
{
	const float3x3 sRGB_2_AP0 = mul( XYZ_2_AP0_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );
	const float3x3 sRGB_2_AP1 = mul( XYZ_2_AP1_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );

	const float3x3 AP0_2_sRGB = mul( XYZ_2_sRGB_MAT, mul( D60_2_D65_CAT, AP0_2_XYZ_MAT ) );
	const float3x3 AP1_2_sRGB = mul( XYZ_2_sRGB_MAT, mul( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );

	const float3x3 AP0_2_AP1 = mul( XYZ_2_AP1_MAT, AP0_2_XYZ_MAT );
	const float3x3 AP1_2_AP0 = mul( XYZ_2_AP0_MAT, AP1_2_XYZ_MAT );

	float3 ColorAP1 = LinearColor;
#line 121 "/Engine/Private/TonemapCommon.ush"
	float3 ColorAP0 = mul( AP1_2_AP0, ColorAP1 );
#line 134 "/Engine/Private/TonemapCommon.ush"
	const float RRT_GLOW_GAIN = 0.05;
	const float RRT_GLOW_MID = 0.08;

	float saturation = rgb_2_saturation( ColorAP0 );
	float ycIn = rgb_2_yc( ColorAP0 );
	float s = sigmoid_shaper( (saturation - 0.4) / 0.2);
	float addedGlow = 1 + glow_fwd( ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);
	ColorAP0 *= addedGlow;




	const float RRT_RED_SCALE = 0.82;
	const float RRT_RED_PIVOT = 0.03;
	const float RRT_RED_HUE = 0;
	const float RRT_RED_WIDTH = 135;
	float hue = rgb_2_hue( ColorAP0 );
	float centeredHue = center_hue( hue, RRT_RED_HUE );
	float hueWeight = Square( smoothstep( 0, 1, 1 - abs( 2 * centeredHue / RRT_RED_WIDTH ) ) );

	ColorAP0.r += hueWeight * saturation * (RRT_RED_PIVOT - ColorAP0.r) * (1. - RRT_RED_SCALE);



	float3 WorkingColor = mul( AP0_2_AP1_MAT, ColorAP0 );

	WorkingColor = max( 0, WorkingColor );


	WorkingColor = lerp( dot( WorkingColor, AP1_RGB2Y ), WorkingColor, 0.96 );

	const  float  ToeScale = 1 + FilmBlackClip - FilmToe;
	const  float  ShoulderScale = 1 + FilmWhiteClip - FilmShoulder;

	const float InMatch = 0.18;
	const float OutMatch = 0.18;

	float ToeMatch;
	if( FilmToe > 0.8 )
	{

		ToeMatch = ( 1 - FilmToe - OutMatch ) / FilmSlope + log10( InMatch );
	}
	else
	{



		const float bt = ( OutMatch + FilmBlackClip ) / ToeScale - 1;
		ToeMatch = log10( InMatch ) - 0.5 * log( (1+bt)/(1-bt) ) * (ToeScale / FilmSlope);
	}

	float StraightMatch = ( 1 - FilmToe ) / FilmSlope - ToeMatch;
	float ShoulderMatch = FilmShoulder / FilmSlope - StraightMatch;

	float3  LogColor = log10( WorkingColor );
	float3  StraightColor = FilmSlope * ( LogColor + StraightMatch );

	float3  ToeColor = ( -FilmBlackClip ) + (2 * ToeScale) / ( 1 + exp( (-2 * FilmSlope / ToeScale) * ( LogColor - ToeMatch ) ) );
	float3  ShoulderColor = ( 1 + FilmWhiteClip ) - (2 * ShoulderScale) / ( 1 + exp( ( 2 * FilmSlope / ShoulderScale) * ( LogColor - ShoulderMatch ) ) );

	ToeColor =  select_internal(LogColor < ToeMatch,ToeColor,StraightColor) ;
	ShoulderColor =  select_internal(LogColor > ShoulderMatch,ShoulderColor,StraightColor) ;

	float3  t = saturate( ( LogColor - ToeMatch ) / ( ShoulderMatch - ToeMatch ) );
	t = ShoulderMatch < ToeMatch ? 1 - t : t;
	t = (3-2*t)*t*t;
	float3  ToneColor = lerp( ToeColor, ShoulderColor, t );


	ToneColor = lerp( dot( float3(ToneColor), AP1_RGB2Y ), ToneColor, 0.93 );


	return max( 0, ToneColor );
}

float3  FilmToneMapInverse(  float3  ToneColor )
{
	const float3x3 sRGB_2_AP1 = mul( XYZ_2_AP1_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );
	const float3x3 AP1_2_sRGB = mul( XYZ_2_sRGB_MAT, mul( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );


	float3  WorkingColor = mul( sRGB_2_AP1, saturate( ToneColor ) );

	WorkingColor = max( 0, WorkingColor );


	WorkingColor = lerp( dot( WorkingColor, AP1_RGB2Y ), WorkingColor, 1.0 / 0.93 );

	float3  ToeColor = 0.374816 * pow( 0.9 / min( WorkingColor, 0.8 ) - 1, -0.588729 );
	float3  ShoulderColor = 0.227986 * pow( 1.56 / ( 1.04 - WorkingColor ) - 1, 1.02046 );

	float3  t = saturate( ( WorkingColor - 0.35 ) / ( 0.45 - 0.35 ) );
	t = (3-2*t)*t*t;
	float3  LinearColor = lerp( ToeColor, ShoulderColor, t );


	LinearColor = lerp( dot( LinearColor, AP1_RGB2Y ), LinearColor, 1.0 / 0.96 );

	LinearColor = mul( AP1_2_sRGB, LinearColor );


	return max( 0, LinearColor );
}

uint  GetWhiteStandard(uint OutputGamut)
{
	if (OutputGamut ==  1 )
		return WhiteStandard_D65;
	else if (OutputGamut ==  2 )
		return WhiteStandard_D65;
	else if (OutputGamut ==  3 )
		return WhiteStandard_D60;
	else if (OutputGamut ==  4 )
		return WhiteStandard_D60;
	else
		return WhiteStandard_D65;
}

float3x3 XYZtoRGBMatrix(uint OutputGamut)
{
	if (OutputGamut ==  1 )
		return XYZ_2_P3D65_MAT;
	else if (OutputGamut ==  2 )
		return XYZ_2_Rec2020_MAT;
	else if (OutputGamut ==  3 )
		return XYZ_2_AP0_MAT;
	else if (OutputGamut ==  4 )
		return XYZ_2_AP1_MAT;
	else
		return XYZ_2_sRGB_MAT;
}

float3x3 RGBtoXYZMatrix(uint OutputGamut)
{
	if (OutputGamut ==  1 )
		return P3D65_2_XYZ_MAT;
	else if (OutputGamut ==  2 )
		return Rec2020_2_XYZ_MAT;
	else if (OutputGamut ==  3 )
		return AP0_2_XYZ_MAT;
	else if (OutputGamut ==  4 )
		return AP1_2_XYZ_MAT;
	else
		return sRGB_2_XYZ_MAT;
}

FColorSpace GetColorSpace(uint OutputGamut)
{
	FColorSpace OutColorSpace;
	OutColorSpace.White = GetWhiteStandard(OutputGamut);
	OutColorSpace.XYZtoRGB = XYZtoRGBMatrix(OutputGamut);
	OutColorSpace.RGBtoXYZ = RGBtoXYZMatrix(OutputGamut);
	return OutColorSpace;
}

static const int UE_ACES_EOTF = 4;






static const int UE_ACES_SURROUND = 0;



static const bool UE_ACES_STRETCH_BLACK = true;
static const bool UE_ACES_D60_SIM = false;
static const bool UE_ACES_LEGAL_RANGE = false;

static const float UE_ACES_HDR_Y_MIN = 0.0001;
static const float UE_ACES_HDR_Y_MID = 15.0;

static const float UE_ACES_SDR_Y_MIN = 0.0001;
static const float UE_ACES_SDR_Y_MID = 7.2;
static const float UE_ACES_SDR_Y_MAX = 108.0;






float3 ACESOutputTransformsRGBD65( float3 SceneReferredLinearColor, const float3x3 WCS_2_AP0 )
{
	static const float Gain = 2.22;
	float3 aces = mul( WCS_2_AP0, SceneReferredLinearColor * Gain );

	const FColorSpace UE_ACES_SRGB_DISPLAY_PRI = GetColorSpace( 0 );
	const FColorSpace UE_ACES_SRGB_LIMITING_PRI = GetColorSpace( 0 );

	float3 OutputReferredLinearsRGBColor = outputTransform(aces, UE_ACES_SDR_Y_MIN, UE_ACES_SDR_Y_MID, UE_ACES_SDR_Y_MAX, UE_ACES_SRGB_DISPLAY_PRI, UE_ACES_SRGB_LIMITING_PRI, UE_ACES_EOTF,
														   UE_ACES_SURROUND, UE_ACES_STRETCH_BLACK, UE_ACES_D60_SIM, UE_ACES_LEGAL_RANGE);

	return OutputReferredLinearsRGBColor / UE_ACES_SDR_Y_MAX;
}

float3 ACESOutputTransformsRGBD65( float3 SceneReferredLinearsRGBColor )
{
	const float3x3 sRGB_2_AP0 = mul( XYZ_2_AP0_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );

	return ACESOutputTransformsRGBD65( SceneReferredLinearsRGBColor, sRGB_2_AP0 );
}

float3 InverseACESOutputTransformsRGBD65( float3 OutputReferredLinearsRGBColor )
{
	const float3x3 AP0_2_sRGB = mul( XYZ_2_sRGB_MAT, mul( D60_2_D65_CAT, AP0_2_XYZ_MAT ) );
	static const float Gain = 2.22;

	const FColorSpace UE_ACES_SRGB_DISPLAY_PRI = GetColorSpace( 0 );
	const FColorSpace UE_ACES_SRGB_LIMITING_PRI = GetColorSpace( 0 );

	OutputReferredLinearsRGBColor *= UE_ACES_SDR_Y_MAX;
	float3 aces = invOutputTransform ( OutputReferredLinearsRGBColor, UE_ACES_SDR_Y_MIN, UE_ACES_SDR_Y_MID, UE_ACES_SDR_Y_MAX, UE_ACES_SRGB_DISPLAY_PRI, UE_ACES_SRGB_LIMITING_PRI, UE_ACES_EOTF,
									   UE_ACES_SURROUND, UE_ACES_STRETCH_BLACK, UE_ACES_D60_SIM, UE_ACES_LEGAL_RANGE);

	float3 SceneReferredLinearsRGBColor = mul( AP0_2_sRGB, aces ) / Gain;

	return SceneReferredLinearsRGBColor;
}

struct FACESTonemapParams
{
	TsParams AcesParams;
	float SceneColorMultiplier;
};

FACESTonemapParams ComputeACESTonemapParams(float4 InACESMinMaxData, float4 InACESMidData, float4 InACESCoefsLow_0, float4 InACESCoefsHigh_0, float InACESCoefsLow_4, float InACESCoefsHigh_4, float SceneColorMultiplier)
{
	FACESTonemapParams OutACESTonemapParams;
	OutACESTonemapParams.AcesParams.Min.x = InACESMinMaxData.x;
	OutACESTonemapParams.AcesParams.Min.y = InACESMinMaxData.y;
	OutACESTonemapParams.AcesParams.Min.slope = 0;

	OutACESTonemapParams.AcesParams.Mid.x = InACESMidData.x;
	OutACESTonemapParams.AcesParams.Mid.y = InACESMidData.y;
	OutACESTonemapParams.AcesParams.Mid.slope = InACESMidData.z;

	OutACESTonemapParams.AcesParams.Max.x = InACESMinMaxData.z;
	OutACESTonemapParams.AcesParams.Max.y = InACESMinMaxData.w;
	OutACESTonemapParams.AcesParams.Max.slope = 0;

	OutACESTonemapParams.AcesParams.coefsLow[0] = InACESCoefsLow_0.x;
	OutACESTonemapParams.AcesParams.coefsLow[1] = InACESCoefsLow_0.y;
	OutACESTonemapParams.AcesParams.coefsLow[2] = InACESCoefsLow_0.z;
	OutACESTonemapParams.AcesParams.coefsLow[3] = InACESCoefsLow_0.w;
	OutACESTonemapParams.AcesParams.coefsLow[4] = InACESCoefsLow_4;
	OutACESTonemapParams.AcesParams.coefsLow[5] = InACESCoefsLow_4;

	OutACESTonemapParams.AcesParams.coefsHigh[0] = InACESCoefsHigh_0.x;
	OutACESTonemapParams.AcesParams.coefsHigh[1] = InACESCoefsHigh_0.y;
	OutACESTonemapParams.AcesParams.coefsHigh[2] = InACESCoefsHigh_0.z;
	OutACESTonemapParams.AcesParams.coefsHigh[3] = InACESCoefsHigh_0.w;
	OutACESTonemapParams.AcesParams.coefsHigh[4] = InACESCoefsHigh_4;
	OutACESTonemapParams.AcesParams.coefsHigh[5] = InACESCoefsHigh_4;

	OutACESTonemapParams.SceneColorMultiplier = SceneColorMultiplier;

	return OutACESTonemapParams;

}






float3 ACESOutputTransforms1000( float3 SceneReferredLinearColor, const float3x3 WCS_2_AP0, FACESTonemapParams InACESTonemapParams)
{
	float3 aces = mul( WCS_2_AP0, SceneReferredLinearColor * InACESTonemapParams.SceneColorMultiplier);
	const FColorSpace UE_ACES_AP1_DISPLAY_PRI = GetColorSpace( 4 );
	const FColorSpace UE_ACES_AP1_LIMITING_PRI = GetColorSpace( 4 );
	float3 OutputReferredLinearAP1Color = outputTransform(aces, InACESTonemapParams.AcesParams, UE_ACES_AP1_DISPLAY_PRI, UE_ACES_AP1_LIMITING_PRI, UE_ACES_EOTF,
											 			  UE_ACES_SURROUND, UE_ACES_STRETCH_BLACK, UE_ACES_D60_SIM, UE_ACES_LEGAL_RANGE);

	return OutputReferredLinearAP1Color;
}

float3 ACESOutputTransforms1000( float3 SceneReferredLinearsRGBColor, FACESTonemapParams InACESTonemapParams)
{
	const float3x3 sRGB_2_AP0 = mul( XYZ_2_AP0_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );

	return ACESOutputTransforms1000( SceneReferredLinearsRGBColor, sRGB_2_AP0, InACESTonemapParams);
}






float3 ACESOutputTransforms2000( float3 SceneReferredLinearColor, const float3x3 WCS_2_AP0, FACESTonemapParams InACESTonemapParams)
{
	float3 aces = mul( WCS_2_AP0, SceneReferredLinearColor * InACESTonemapParams.SceneColorMultiplier);
	const FColorSpace UE_ACES_AP1_DISPLAY_PRI = GetColorSpace( 4 );
	const FColorSpace UE_ACES_AP1_LIMITING_PRI = GetColorSpace( 4 );
	float3 OutputReferredLinearAP1Color = outputTransform(aces, InACESTonemapParams.AcesParams, UE_ACES_AP1_DISPLAY_PRI, UE_ACES_AP1_LIMITING_PRI, UE_ACES_EOTF,
											 			  UE_ACES_SURROUND, UE_ACES_STRETCH_BLACK, UE_ACES_D60_SIM, UE_ACES_LEGAL_RANGE);

	return OutputReferredLinearAP1Color;
}

float3 ACESOutputTransforms2000( float3 SceneReferredLinearsRGBColor, FACESTonemapParams InACESTonemapParams)
{
	const float3x3 sRGB_2_AP0 = mul( XYZ_2_AP0_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );

	return ACESOutputTransforms2000( SceneReferredLinearsRGBColor, sRGB_2_AP0, InACESTonemapParams);
}

static const float3x3 GamutMappingIdentityMatrix = { 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };




float3x3 OuputGamutMappingMatrix( uint OutputGamut )
{

	const float3x3 AP1_2_sRGB = mul( XYZ_2_sRGB_MAT, mul( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );
	const float3x3 AP1_2_DCI_D65 = mul( XYZ_2_P3D65_MAT, mul( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );
	const float3x3 AP1_2_Rec2020 = mul( XYZ_2_Rec2020_MAT, mul( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );








	float3x3 GamutMappingMatrix = AP1_2_sRGB;
	if( OutputGamut ==  1 )
		GamutMappingMatrix = AP1_2_DCI_D65;
	else if( OutputGamut ==  2 )
		GamutMappingMatrix = AP1_2_Rec2020;
	else if( OutputGamut ==  3 )
		GamutMappingMatrix = AP1_2_AP0_MAT;
	else if( OutputGamut ==  4 )
		GamutMappingMatrix = GamutMappingIdentityMatrix;

	return GamutMappingMatrix;
}

float3x3 OuputInverseGamutMappingMatrix( uint OutputGamut )
{

	const float3x3 sRGB_2_AP1 = mul( XYZ_2_AP1_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );
	const float3x3 DCI_D65_2_AP1 = mul( XYZ_2_AP1_MAT, mul( D65_2_D60_CAT, P3D65_2_XYZ_MAT ) );
	const float3x3 Rec2020_2_AP1 = mul( XYZ_2_AP1_MAT, mul( D65_2_D60_CAT, Rec2020_2_XYZ_MAT ) );






	float3x3 GamutMappingMatrix = sRGB_2_AP1;
	if( OutputGamut ==  1 )
		GamutMappingMatrix = DCI_D65_2_AP1;
	else if( OutputGamut ==  2 )
		GamutMappingMatrix = Rec2020_2_AP1;
	else if( OutputGamut ==  3 )
		GamutMappingMatrix = AP0_2_AP1_MAT;
	else if (OutputGamut ==  4 )
		GamutMappingMatrix = GamutMappingIdentityMatrix;

	return GamutMappingMatrix;
}

float3 ST2084ToScRGB(float3 Color, uint OutputDevice, float MaxODTNits)
{

	const float3x3 AP1_2_sRGB = mul(XYZ_2_sRGB_MAT, mul(D60_2_D65_CAT, AP1_2_XYZ_MAT));
	const float WhitePoint = 80.f;


	float MinODTNits = UE_ACES_HDR_Y_MIN;
	float3 OutColor = ST2084ToLinear(Color);

	OutColor = clamp(OutColor, MinODTNits, MaxODTNits);
	OutColor.x = Y_2_linCV(OutColor.x, MaxODTNits, MinODTNits);
	OutColor.y = Y_2_linCV(OutColor.y, MaxODTNits, MinODTNits);
	OutColor.z = Y_2_linCV(OutColor.z, MaxODTNits, MinODTNits);

	float scRGBScale = MaxODTNits / WhitePoint;
	OutColor = mul(AP1_2_sRGB, OutColor) * scRGBScale;

	return OutColor;
}





float2 PlanckianLocusChromaticity( float Temp )
{
	float u = ( 0.860117757f + 1.54118254e-4f * Temp + 1.28641212e-7f * Temp*Temp ) / ( 1.0f + 8.42420235e-4f * Temp + 7.08145163e-7f * Temp*Temp );
	float v = ( 0.317398726f + 4.22806245e-5f * Temp + 4.20481691e-8f * Temp*Temp ) / ( 1.0f - 2.89741816e-5f * Temp + 1.61456053e-7f * Temp*Temp );

	float x = 3*u / ( 2*u - 8*v + 4 );
	float y = 2*v / ( 2*u - 8*v + 4 );

	return float2(x,y);
}




float2 D_IlluminantChromaticity( float Temp )
{


	Temp *= 1.4388 / 1.438;
	float OneOverTemp = 1.0/Temp;
	float x = Temp <= 7000 ?
				0.244063 + ( 0.09911e3 + ( 2.9678e6 - 4.6070e9 * OneOverTemp ) * OneOverTemp) * OneOverTemp:
				0.237040 + ( 0.24748e3 + ( 1.9018e6 - 2.0064e9 * OneOverTemp ) * OneOverTemp ) * OneOverTemp;

	float y = -3 * x*x + 2.87 * x - 0.275;

	return float2(x,y);
}



float CorrelatedColorTemperature( float x, float y )
{
	float n = (x - 0.3320) / (y - 0.1858);
	return -449 * n*n*n + 3525 * n*n - 6823.3 * n + 5520.33;
}

float2 PlanckianIsothermal( float Temp, float Tint )
{
	float u = ( 0.860117757f + 1.54118254e-4f * Temp + 1.28641212e-7f * Temp*Temp ) / ( 1.0f + 8.42420235e-4f * Temp + 7.08145163e-7f * Temp*Temp );
	float v = ( 0.317398726f + 4.22806245e-5f * Temp + 4.20481691e-8f * Temp*Temp ) / ( 1.0f - 2.89741816e-5f * Temp + 1.61456053e-7f * Temp*Temp );

	float ud = ( -1.13758118e9f - 1.91615621e6f * Temp - 1.53177f * Temp*Temp ) / Square( 1.41213984e6f + 1189.62f * Temp + Temp*Temp );
	float vd = ( 1.97471536e9f - 705674.0f * Temp - 308.607f * Temp*Temp ) / Square( 6.19363586e6f - 179.456f * Temp + Temp*Temp );

	float2 uvd = normalize(float2(ud, vd));


	u += uvd.y * Tint * 0.05;
	v += -uvd.x * Tint * 0.05;

	float x = 3*u / ( 2*u - 8*v + 4 );
	float y = 2*v / ( 2*u - 8*v + 4 );

	return float2(x,y);
}

float3 WhiteBalance(float3 LinearColor, float WhiteTemp, float WhiteTint, bool bIsTemperatureWhiteBalance, const float3x3 WCS_2_XYZ, const float3x3 XYZ_2_WCS)
{
	float2 SrcWhiteDaylight = D_IlluminantChromaticity(WhiteTemp);
	float2 SrcWhitePlankian = PlanckianLocusChromaticity(WhiteTemp);

	float2 SrcWhite = WhiteTemp < 4000 ? SrcWhitePlankian : SrcWhiteDaylight;
	float2 D65White = float2(0.31270, 0.32900);

	{

		float2 Isothermal = PlanckianIsothermal(WhiteTemp, WhiteTint) - SrcWhitePlankian;
		SrcWhite += Isothermal;
	}

	if (!bIsTemperatureWhiteBalance)
	{
		float2 Temp = SrcWhite;
		SrcWhite = D65White;
		D65White = Temp;
	}

	float3x3 WhiteBalanceMat = ChromaticAdaptation(SrcWhite, D65White);
	WhiteBalanceMat = mul( XYZ_2_WCS, mul( WhiteBalanceMat, WCS_2_XYZ ) );

	return mul(WhiteBalanceMat, LinearColor);
}
#line 17 "/Engine/Private/PostProcessTonemap.usf"
#line 1 "EyeAdaptationCommon.ush"
#line 9 "/Engine/Private/EyeAdaptationCommon.ush"
Texture2D EyeAdaptationTexture;
Buffer<float4> EyeAdaptationBuffer;


float4 EyeAdaptationLookupTexture2D(Texture2D InEyeAdaptation)
{
	return InEyeAdaptation.Load(int3(0, 0, 0));
}
#line 41 "/Engine/Private/EyeAdaptationCommon.ush"
float EyeAdaptationLookup()
{
#line 55 "/Engine/Private/EyeAdaptationCommon.ush"
		return EyeAdaptationLookupTexture2D(EyeAdaptationTexture).x;
#line 64 "/Engine/Private/EyeAdaptationCommon.ush"
}

float3 EyeAdaptationInverseLookup(float3 LightValue, float Alpha)
{
	float Adaptation = EyeAdaptationLookup();








	float LerpLogScale = -Alpha * log(Adaptation);
	float Scale = exp(LerpLogScale);
	return LightValue * Scale;
}
#line 18 "/Engine/Private/PostProcessTonemap.usf"
#line 1 "PostProcessHistogramCommon.ush"
#line 7 "/Engine/Private/PostProcessHistogramCommon.ush"
                                       
                                        
                                        
                                        
                                                 
                                              
                                   
                                    
                                      
                                   
                                  
                                 
                                                        
                                                     
                                                
                                                       
                                                                
                                                  
                             
                                   
                                     
                                  
                                 
                                
                                     
Texture2D EyeAdaptation_MeterMaskTexture;
SamplerState EyeAdaptation_MeterMaskSampler;

float CalculateEyeAdaptationLuminance(float3 Color)
{
	return max(dot(Color, float3(1.0f, 1.0f, 1.0f) / 3.0f), EyeAdaptation_LuminanceMin);
}




float ComputeHistogramPositionFromLogLuminance(float LogLuminance)
{
	return LogLuminance * EyeAdaptation_HistogramScale + EyeAdaptation_HistogramBias;
}




float ComputeHistogramPositionFromLuminance(float Luminance)
{
	return ComputeHistogramPositionFromLogLuminance(log2(Luminance));
}




float ComputeLogLuminanceFromHistogramPosition(float HistogramPosition)
{
	return ((HistogramPosition - EyeAdaptation_HistogramBias) / EyeAdaptation_HistogramScale);
}




float ComputeLuminanceFromHistogramPosition(float HistogramPosition)
{
	return exp2(ComputeLogLuminanceFromHistogramPosition(HistogramPosition));
}







float4 ComputeARGBStripeMaskInt(uint x)
{
	return float4(
		(x % 4) == 0,
		(x % 4) == 1,
		(x % 4) == 2,
		(x % 4) == 3);
}

float GetHistogramBucket(Texture2D HistogramTexture, uint BucketIndex)
{
	uint Texel = BucketIndex / 4;

	float4 HistogramColor = HistogramTexture.Load(int3(Texel, 0, 0));

	uint channel = BucketIndex % 4;
	float UnweightedValue = HistogramColor.r;
	UnweightedValue = (channel == 1) ? HistogramColor.g : UnweightedValue;
	UnweightedValue = (channel == 2) ? HistogramColor.b : UnweightedValue;
	UnweightedValue = (channel == 3) ? HistogramColor.a : UnweightedValue;

	return UnweightedValue;
}

float ComputeHistogramSum(Texture2D HistogramTexture)
{
	float Sum = 0;

	for(uint i = 0; i <  64 ; ++i)
	{
		Sum += GetHistogramBucket(HistogramTexture, i);
	}

	return Sum;
}



float ComputeAverageLuminanceWithoutOutlier(Texture2D HistogramTexture, float MinFractionSum, float MaxFractionSum)
{
	float2 SumWithoutOutliers = 0;

	[unroll]  for(uint i = 0; i <  64 ; ++i)
	{
		float LocalValue = GetHistogramBucket(HistogramTexture, i);


		float Sub = min(LocalValue, MinFractionSum);
		LocalValue = LocalValue - Sub;
		MinFractionSum -= Sub;
		MaxFractionSum -= Sub;


		LocalValue = min(LocalValue, MaxFractionSum);
		MaxFractionSum -= LocalValue;

		float LogLuminanceAtBucket = ComputeLogLuminanceFromHistogramPosition(float(i) / (float)( 64 -1));

		SumWithoutOutliers += float2(LogLuminanceAtBucket, 1) * LocalValue;
	}

	float AvgLogLuminance = SumWithoutOutliers.x / max(0.0001f, SumWithoutOutliers.y);

	return exp2(AvgLogLuminance);
}

float ComputeEyeAdaptationExposure(Texture2D HistogramTexture)
{
	const float HistogramSum = ComputeHistogramSum(HistogramTexture);
	const float AverageSceneLuminance = ComputeAverageLuminanceWithoutOutlier(HistogramTexture, HistogramSum * EyeAdaptation_ExposureLowPercent, HistogramSum * EyeAdaptation_ExposureHighPercent);
	const float LumAve = AverageSceneLuminance;

	const float ClampedLumAve = LumAve;



	return ClampedLumAve;
}

float AdaptationWeightTexture(float2 UV)
{
	return Texture2DSampleLevel(EyeAdaptation_MeterMaskTexture, EyeAdaptation_MeterMaskSampler, UV, 0).x;
}

float ExponentialAdaption(float Current, float Target, float FrameTime, float AdaptionSpeed, float M)
{
	const float Factor = 1.0f - exp2(-FrameTime * AdaptionSpeed);
	const float Value = Current + (Target - Current) * Factor * M;
	return Value;
}

float LinearAdaption(float Current, float Target, float FrameTime, float AdaptionSpeed)
{
	const float Offset = FrameTime * AdaptionSpeed;

	const float Value = (Current < Target) ? min(Target, Current + Offset) : max(Target, Current - Offset);

	return Value;
}

float ComputeEyeAdaptation(float OldExposure, float TargetExposure, float FrameTime)
{
	const float LogTargetExposure = log2(TargetExposure);
	const float LogOldExposure = log2(OldExposure);

	const float LogDiff = LogTargetExposure - LogOldExposure;

	const float AdaptionSpeed = (LogDiff > 0) ? EyeAdaptation_ExposureSpeedUp : EyeAdaptation_ExposureSpeedDown;
	const float M = (LogDiff > 0) ? EyeAdaptation_ExponentialUpM : EyeAdaptation_ExponentialDownM;

	const float AbsLogDiff = abs(LogDiff);


	const float LogAdaptedExposure_Exponential = ExponentialAdaption(LogOldExposure, LogTargetExposure, FrameTime, AdaptionSpeed, M);
	const float LogAdaptedExposure_Linear = LinearAdaption(LogOldExposure, LogTargetExposure, FrameTime, AdaptionSpeed);

	const float LogAdaptedExposure = AbsLogDiff > EyeAdaptation_StartDistance ? LogAdaptedExposure_Linear : LogAdaptedExposure_Exponential;




	const float AdaptedExposure = exp2(LogAdaptedExposure);


	const float AdjustedExposure = lerp(AdaptedExposure,TargetExposure,EyeAdaptation_ForceTarget);

	return AdjustedExposure;
}



float CalculateBaseLogLuminance(float BilateralLum, float BlurredLum, float BlurredLumBlend, float ExposureScale)
{
	return lerp(BilateralLum, BlurredLum, BlurredLumBlend) + log2(ExposureScale);
}

float CalculateBaseLogLuminance(float LogLum, float BlurredLumBlend, float ExposureScale, float2 UV, Texture3D LumBilateralGrid, Texture2D BlurredLogLum, SamplerState LumBilateralGridSampler, SamplerState BlurredLogLumSampler)
{
	float LumW = (ComputeHistogramPositionFromLogLuminance(LogLum) * ( 32  - 1) + 0.5f) /  32 ;
	float2 BilateralGridLum = Texture3DSample(LumBilateralGrid, LumBilateralGridSampler, float3(UV, LumW)).xy;
	float BilateralLum = BilateralGridLum.x / BilateralGridLum.y;

	float BlurredLum = Texture2DSample(BlurredLogLum, BlurredLogLumSampler, UV).r;

	if (BilateralGridLum.y < 0.001)
	{


		BilateralLum = BlurredLum;
	}

	return CalculateBaseLogLuminance(BilateralLum, BlurredLum, BlurredLumBlend, ExposureScale);
}

float CalculateLocalExposure(float LogLum, float BaseLogLum, float LogMiddleGrey, float HighlightContrastScale, float ShadowContrastScale, float DetailStrength)
{
	float DetailLogLum = LogLum - BaseLogLum;

	float BaseCentered = (BaseLogLum - LogMiddleGrey);
	float ContrastScale = BaseCentered > 0 ? HighlightContrastScale : ShadowContrastScale;

	float LogLocalLum = LogMiddleGrey + BaseCentered * ContrastScale + DetailLogLum * DetailStrength;
	return exp2(LogLocalLum - LogLum);
}
#line 19 "/Engine/Private/PostProcessTonemap.usf"
#line 1 "PixelQuadMessagePassing.ush"
#line 15 "/Engine/Private/PixelQuadMessagePassing.ush"
struct FPQMPContext
{

	float2 PixelPos;


	float2 QuadVector;
};



FPQMPContext PQMPInit(float2 SvPosition)
{
	FPQMPContext PQMP;





	PQMP.PixelPos = float2(0, 0);
	PQMP.QuadVector = float2(0, 0);

	return PQMP;
}



float PQMPAverage(FPQMPContext PQMP, float v)
{




	return v;

}

float2 PQMPAverage(FPQMPContext PQMP, float2 v)
{




	return v;

}



float PQMPReadX(FPQMPContext PQMP, float v)
{








	return v;

}


float PQMPReadY(FPQMPContext PQMP, float v)
{








	return v;

}

float2 PQMPReadX(FPQMPContext PQMP, float2 v)
{
	return float2( PQMPReadX(PQMP, v.x), PQMPReadX(PQMP, v.y));
}

float2 PQMPReadY(FPQMPContext PQMP, float2 v)
{
	return float2( PQMPReadY(PQMP, v.x), PQMPReadY(PQMP, v.y));
}

float3 PQMPReadX(FPQMPContext PQMP, float3 v)
{
	return float3( PQMPReadX(PQMP, v.x), PQMPReadX(PQMP, v.y), PQMPReadX(PQMP, v.z));
}

float3 PQMPReadY(FPQMPContext PQMP, float3 v)
{
	return float3( PQMPReadY(PQMP, v.x), PQMPReadY(PQMP, v.y), PQMPReadY(PQMP, v.z));
}
#line 20 "/Engine/Private/PostProcessTonemap.usf"
#line 1 "ScreenPass.ush"
#line 26 "/Engine/Private/ScreenPass.ush"
float2 ApplyScreenTransform(float2 PInA,  float4  AToB)
{
	return PInA * AToB.xy + AToB.zw;
}
#line 21 "/Engine/Private/PostProcessTonemap.usf"
#line 29 "/Engine/Private/PostProcessTonemap.usf"
                                                                                                                                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

Texture2D ColorTexture;
SamplerState ColorSampler;


                     
                                  
                                  
Texture2D BloomTexture;
SamplerState BloomSampler;


	StructuredBuffer<float4> SceneColorApplyParamaters;


Texture3D LumBilateralGrid;
Texture2D BlurredLogLum;
SamplerState LumBilateralGridSampler;
SamplerState BlurredLogLumSampler;


                   


float4 ColorScale1;


                        


                       


                                
                                 
                                   
                          
                             
                             
Texture2D< float3 > FilmGrainTexture;
SamplerState FilmGrainSampler;
                                     

	StructuredBuffer<float4> FilmGrainTextureConstants;


                     

                  
                         
#line 87 "/Engine/Private/PostProcessTonemap.usf"
                         
Texture2D BloomDirtMaskTexture;
SamplerState BloomDirtMaskSampler;

                                     
                                            

float  GrainFromUV(float2 GrainUV)
{
	float  Grain = frac(sin(GrainUV.x + GrainUV.y * 543.31) * 493013.0);
	return Grain;
}


float2 ConvertScreenViewportSpaceToLensViewportSpace(float2 UV)
{
	return LensPrincipalPointOffsetScale.xy + UV * LensPrincipalPointOffsetScale.zw;
}

float2 ConvertLensViewportSpaceToScreenViewportSpace(float2 UV)
{




	return LensPrincipalPointOffsetScaleInverse.xy + UV * LensPrincipalPointOffsetScaleInverse.zw;
}

float3  LinearToPostTonemapSpace( float3  lin)
{




	return LinearToSrgbBranchless(lin);

}



float ComputeFilmGrainIntensity(float3 LinearColorRGBGamut)
{
	const float3x3 sRGB_2_AP1 = mul( XYZ_2_AP1_MAT, mul( D65_2_D60_CAT, sRGB_2_XYZ_MAT ) );
	const float3x3 AP1_2_sRGB = mul( XYZ_2_sRGB_MAT, mul( D60_2_D65_CAT, AP1_2_XYZ_MAT ) );

	float3 ColorAP1 = mul(sRGB_2_AP1, LinearColorRGBGamut);


	float Luma = dot(LinearColorRGBGamut, mul(AP1_2_sRGB, AP1_RGB2Y));

	float CCWeightShadows = 1 - smoothstep(0, FilmGrainShadowsMax, Luma);
	float CCWeightHighlights = smoothstep(FilmGrainHighlightsMin, FilmGrainHighlightsMax, Luma);
	float CCWeightMidtones = 1 - CCWeightShadows - CCWeightHighlights;


	float FilmGrainIntensity = (
		FilmGrainIntensityShadows * CCWeightShadows +
		FilmGrainIntensityMidtones * CCWeightMidtones +
		FilmGrainIntensityHighlights * CCWeightHighlights);

	return FilmGrainIntensity;
}




	Texture3D ColorGradingLUT;
#line 157 "/Engine/Private/PostProcessTonemap.usf"
SamplerState ColorGradingLUTSampler;

static const float LUTSize = 32;

float3  ColorLookupTable(  float3  LinearColor )
{
	float3 LUTEncodedColor;




		LUTEncodedColor = LinearToST2084(LinearColor * LinearToNitsScale);
#line 174 "/Engine/Private/PostProcessTonemap.usf"
	float3 UVW = LUTEncodedColor * ((LUTSize - 1) / LUTSize) + (0.5f / LUTSize);


	float3  OutDeviceColor = Texture3DSample( ColorGradingLUT, ColorGradingLUTSampler, UVW ).rgb;
#line 182 "/Engine/Private/PostProcessTonemap.usf"
	return OutDeviceColor * 1.05;
}


float2 ScreenPosToUV(float2 ScreenPos, float2 ExtentInverse)
{
	float2 UV = (ScreenPos * Color_ScreenPosToViewportScale + Color_ScreenPosToViewportBias) * ExtentInverse;

	return UV;
}

float2 UVToScreenPos(float2 UV, float2 Extent)
{
	return (UV * Extent - Color_ScreenPosToViewportBias) / Color_ScreenPosToViewportScale;
}

                                 

void TonemapCommonVS(
	in float4 Position,
	in float2 TexCoord,
	out float4 OutExposureScaleVignette,
	out float4 OutGrainUV,
	out float2 OutScreenPos,
	out float2 OutFullViewUV
	)
{


	OutFullViewUV.xy = Position.xy * float2(0.5,-0.5) + 0.5;




		OutExposureScaleVignette.xy = EyeAdaptationTexture.Load(int3(0, 0, 0)).xw;
#line 226 "/Engine/Private/PostProcessTonemap.usf"
	OutExposureScaleVignette.y = log2(0.18 * OutExposureScaleVignette.y * EyeAdaptation_LocalExposureMiddleGreyExposureCompensation);

	const float AspectRatio = Output_ViewportSize.y * Output_ViewportSizeInverse.x;

	float2 ColorViewportPos = UVToScreenPos(TexCoord, Color_Extent);


	float2 LensViewportPos = ConvertScreenViewportSpaceToLensViewportSpace(ColorViewportPos);
	OutExposureScaleVignette.zw = VignetteSpace(LensViewportPos, AspectRatio);


	OutGrainUV.xy = TexCoord + Color_ExtentInverse * float2(-0.5,0.5);
	OutGrainUV.zw = TexCoord + GrainRandomFull.xy;


	OutScreenPos = UVToScreenPos(TexCoord, Color_Extent);
}


void MainVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InTexCoord : ATTRIBUTE1,
	out noperspective float2 OutTexCoord : TEXCOORD0,
	out noperspective float4 OutExposureScaleVignette : TEXCOORD1,
	out noperspective float4 OutGrainUV : TEXCOORD2,
	out noperspective float2 OutScreenPos : TEXCOORD3,
	out noperspective float2 OutFullViewUV : TEXCOORD4,
	out float4 OutPosition : SV_POSITION
	)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutTexCoord);
    TonemapCommonVS(OutPosition, OutTexCoord, OutExposureScaleVignette, OutGrainUV, OutScreenPos, OutFullViewUV);
}


float F0( float x )
{
	return x*saturate( (x - 0.5)/2 );
}

float F1( float x )
{
	return x;
}

float F2( float x )
{
	return x;
}

float F3( float x )
{
	return x;
}

float LineShade( float fx, float y, float dydx, float LineWidth )
{
	return 1 - smoothstep( 0.5 * LineWidth, LineWidth, abs( fx - y ) / sqrt( 1 + Square( dydx ) ) );
}

float3 Graph( float2 ScreenSpacePos )
{
	float2 WindowMin = float2( 0, 0 );
	float2 WindowMax = float2( 1, 1 );

	float2 p = ( (ScreenSpacePos + 1) * 0.5 - WindowMin ) * ( WindowMax - WindowMin );
	float LineWidth = dot( WindowMax - WindowMin, 0.0005 );

	float3 Color;
	Color = float3( 1, 0, 0 ) * LineShade( F0(p.x), p.y, ( F0(p.x + LineWidth) - F0(p.x - LineWidth) ) / (2 * LineWidth), LineWidth );
	Color += float3( 0, 1, 0 ) * LineShade( F1(p.x), p.y, ( F1(p.x + LineWidth) - F1(p.x - LineWidth) ) / (2 * LineWidth), LineWidth );
	Color += float3( 0, 0, 1 ) * LineShade( F2(p.x), p.y, ( F2(p.x + LineWidth) - F2(p.x - LineWidth) ) / (2 * LineWidth), LineWidth );
	Color += float3( 1, 1, 0 ) * LineShade( F3(p.x), p.y, ( F3(p.x + LineWidth) - F3(p.x - LineWidth) ) / (2 * LineWidth), LineWidth );


	return Color;
}


float3 SimpleToneMap(float3 HDRColor)
{




	return HDRColor;
}

float max3(float3 In)
{
	return max(In.x, max(In.y, In.z));
}


float RemapScalar(float Low, float High, float x)
{
	return (x - Low) / (High - Low);
}

float max4(float4 x)
{
	return max(max(x.r, x.g), max(x.b, x.a));
}



float2 ComputeCounterStepForTileDebugging(float4 SvPosition, int2 TileSize, out int2 DebugTile, out int2 LocalDebugTilePosition)
{

	float2 CenterPos = (Output_ViewportMin + Output_ViewportMax) / 2.0f;
	float2 LeftTopPos = CenterPos - TileSize / 2;

	float2 LocalPos = SvPosition.xy - LeftTopPos;

	DebugTile = floor(LocalPos / TileSize);

	LocalDebugTilePosition = LocalPos - DebugTile * TileSize;

	float2 CounterStep = -DebugTile * TileSize;

	return CounterStep;
}
#line 352 "/Engine/Private/PostProcessTonemap.usf"
float4 SampleSceneColor(float2 SceneUV)
{
	SceneUV = clamp(SceneUV, Color_UVViewportBilinearMin, Color_UVViewportBilinearMax);
	return Texture2DSample(ColorTexture, ColorSampler, SceneUV);
}

float3  LookupSceneColor(float2 SceneUV, float2 PixelOffset)
{
	float2 SampleUV = SceneUV + PixelOffset * Color_ExtentInverse;
	return SampleSceneColor(SampleUV).xyz;
}

float4 TonemapCommonPS(
	float2 UV,
	float4 ExposureScaleVignette,
	float4 GrainUV,
	float2 ScreenPos,
	float2 FullViewUV,
	float4 SvPosition
	)
{
	float4 OutColor = 0;
#line 399 "/Engine/Private/PostProcessTonemap.usf"
	float2 SceneUV = UV.xy;


		float2 SceneUVJitter = float2(0.0, 0.0);

	        float2 CAScale = ChromaticAberrationParams.rg;
	        float StartOffset = ChromaticAberrationParams.z;

			float2 LensUV = ConvertScreenViewportSpaceToLensViewportSpace(ScreenPos);

	        float4 CAUV;
	        CAUV = LensUV.xyxy - sign(LensUV).xyxy * saturate(abs(LensUV) - StartOffset).xyxy * CAScale.rrgg;

	        CAUV.xy = ConvertLensViewportSpaceToScreenViewportSpace(CAUV.xy);
	        CAUV.zw = ConvertLensViewportSpaceToScreenViewportSpace(CAUV.zw);

			CAUV.xy = ScreenPosToUV(CAUV.xy, Color_ExtentInverse);
	        CAUV.zw = ScreenPosToUV(CAUV.zw, Color_ExtentInverse);

		float4  SceneColor = SampleSceneColor(CAUV.xy + SceneUVJitter.xy);
		float  SceneColorG = SampleSceneColor(CAUV.zw + SceneUVJitter.xy).g;
		float  SceneColorB = SampleSceneColor(SceneUV).b;
		SceneColor.g = SceneColorG;
		SceneColor.b = SceneColorB;
#line 434 "/Engine/Private/PostProcessTonemap.usf"
	SceneColor.rgb *= View.OneOverPreExposure;

	float ExposureScale = ExposureScaleVignette.x;

	float LocalExposureOneOverPreExposure = View.OneOverPreExposure;


	{
		float LuminanceVal = CalculateEyeAdaptationLuminance(SceneColor.rgb);
		float LogLuminance = log2(LuminanceVal);
		float MiddleGreyLumValue = ExposureScaleVignette.y;

		float BaseLogLum = CalculateBaseLogLuminance(LogLuminance, EyeAdaptation_LocalExposureBlurredLuminanceBlend, ExposureScale, FullViewUV, LumBilateralGrid, BlurredLogLum, LumBilateralGridSampler, BlurredLogLumSampler);
		float LocalExposure = CalculateLocalExposure(LogLuminance + log2(ExposureScale), BaseLogLum, MiddleGreyLumValue, EyeAdaptation_LocalExposureHighlightContrastScale, EyeAdaptation_LocalExposureShadowContrastScale, EyeAdaptation_LocalExposureDetailStrength);


		SceneColor.rgb *= LocalExposure;
		LocalExposureOneOverPreExposure *= LocalExposure;
	}
#line 466 "/Engine/Private/PostProcessTonemap.usf"
	float SharpenMultiplierDiv6 = TonemapperParams.y;
#line 478 "/Engine/Private/PostProcessTonemap.usf"
	{

		float  A0 = Luminance(SceneColor.rgb);
#line 498 "/Engine/Private/PostProcessTonemap.usf"
		float3  C1 = LookupSceneColor(SceneUV, float2(-1, 0)) * LocalExposureOneOverPreExposure;
		float3  C2 = LookupSceneColor(SceneUV, float2( 1, 0)) * LocalExposureOneOverPreExposure;
		float3  C3 = LookupSceneColor(SceneUV, float2( 0, -1)) * LocalExposureOneOverPreExposure;
		float3  C4 = LookupSceneColor(SceneUV, float2( 0, 1)) * LocalExposureOneOverPreExposure;
		float4  LuminanceNeighbors =  float4 (Luminance(C1), Luminance(C2), Luminance(C3), Luminance(C4));





		float  HDREdge = ExposureScale * max4(abs(A0 - LuminanceNeighbors));


		float  EdgeMask = saturate(1.0f - HDREdge);
#line 523 "/Engine/Private/PostProcessTonemap.usf"
		float LerpFactor = -EdgeMask * SharpenMultiplierDiv6;


		float3  DeltaColor = (C1 + C2 + C3 + C4) - SceneColor.rgb * 4;
		SceneColor.rgb += DeltaColor * LerpFactor;
	}









	{
		float3  LinearColor = SceneColor.rgb * ColorScale0.rgb;


		{
			float3 SceneColorMultiply = SceneColorApplyParamaters[0].xyz;
			LinearColor *= SceneColorMultiply;
		}



		{
			float2 BloomUV;





			{
				BloomUV = ApplyScreenTransform(UV, ColorToBloom);
				BloomUV = clamp(BloomUV, BloomUVViewportBilinearMin, BloomUVViewportBilinearMax);
			}


			float4 CombinedBloom = Texture2DSample(BloomTexture, BloomSampler, BloomUV);
			CombinedBloom.rgb *= View.OneOverPreExposure;
#line 588 "/Engine/Private/PostProcessTonemap.usf"
			{
				float2 DirtLensUV = ConvertScreenViewportSpaceToLensViewportSpace(ScreenPos) * float2(1.0f, -1.0f);

				float3 BloomDirtMaskColor = Texture2DSample(BloomDirtMaskTexture, BloomDirtMaskSampler, DirtLensUV * .5f + .5f).rgb * BloomDirtMaskTint.rgb;

				LinearColor += CombinedBloom.rgb * (1.0 + BloomDirtMaskColor);
			}

		}
#line 604 "/Engine/Private/PostProcessTonemap.usf"
		LinearColor *= ExposureScale;


			LinearColor.rgb *= ComputeVignetteMask( ExposureScaleVignette.zw, TonemapperParams.x );



		{
			float3 FilmGrainDecodeMultiply = FilmGrainTextureConstants[0].rgb;

			float  FilmGrainIntensity = ComputeFilmGrainIntensity(LinearColor);

			float2 FilmGrainUV = ApplyScreenTransform(ScreenPos, ScreenPosToFilmGrainTextureUV);

			float3  RawGrain = FilmGrainTexture.SampleLevel(FilmGrainSampler, FilmGrainUV, 0);
			float3  FinalGrain = RawGrain *  float3 (FilmGrainDecodeMultiply);

			LinearColor.rgb *= lerp(1.0, FinalGrain, FilmGrainIntensity);
		}


		float3  OutDeviceColor = ColorLookupTable(LinearColor);


			float  Grain = GrainFromUV(GrainUV.zw);
#line 640 "/Engine/Private/PostProcessTonemap.usf"
				float  GrainQuantization = 1.0/256.0;


			float  GrainAdd = (Grain * GrainQuantization) + (-0.5 * GrainQuantization);
			OutDeviceColor.rgb += GrainAdd;



		OutColor.rgb = OutDeviceColor;
#line 655 "/Engine/Private/PostProcessTonemap.usf"
			OutColor.xyz = ST2084ToScRGB(OutColor.xyz,  6 , OutputMaxLuminance);
#line 664 "/Engine/Private/PostProcessTonemap.usf"
	}
#line 692 "/Engine/Private/PostProcessTonemap.usf"
	[branch]
	if(bOutputInHDR)
	{
		OutColor.rgb = ST2084ToLinear(OutColor.rgb);
		OutColor.rgb = OutColor.rgb / EditorNITLevel;
        OutColor.rgb = LinearToPostTonemapSpace(OutColor.rgb);
	}

	return OutColor;
}


void MainPS(
	in noperspective float2 UV : TEXCOORD0,
	in noperspective float4 InExposureScaleVignette : TEXCOORD1,
	in noperspective float4 GrainUV : TEXCOORD2,
	in noperspective float2 ScreenPos : TEXCOORD3,
	in noperspective float2 FullViewUV : TEXCOORD4,
	float4 SvPosition : SV_POSITION,
	out float4 OutColor : SV_Target0
	)
{
    OutColor = TonemapCommonPS(UV, InExposureScaleVignette, GrainUV, ScreenPos, FullViewUV, SvPosition);
}


RWTexture2D<float4> RWOutputTexture;

[numthreads( 8 ,  8 , 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	float4 SvPosition = float4((float2)DispatchThreadId + Output_ViewportMin + 0.5f, 0.0f, 1.0f);
	float2 UV = SvPosition.xy * Output_ExtentInverse;
	float4 InScreenPos = float4(UV * float2(2, -2) - float2(1, -1), 0, 1);

	if (IsComputeUVOutOfBounds(UV))
	{
		return;
	}

	float4 ExposureScaleVignette;
	float4 GrainUV;
	float2 FullViewUV, ScreenPos;
	TonemapCommonVS(InScreenPos, UV, ExposureScaleVignette, GrainUV, ScreenPos, FullViewUV);

	float4 OutColor = TonemapCommonPS(UV, ExposureScaleVignette, GrainUV, ScreenPos, FullViewUV, SvPosition);

	uint2 PixelPos = DispatchThreadId + Output_ViewportMin;

	RWOutputTexture[PixelPos] = OutColor;
}

#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 331027882
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 297796353
MobileSceneTextures, 11010716
SceneTexturesStruct, 158928480
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_AtmosphereTransmittanceTexture, View, 5, 25
View_AtmosphereTransmittanceTextureSampler, View, 8, 26
View_AtmosphereIrradianceTexture, View, 5, 27
View_AtmosphereIrradianceTextureSampler, View, 8, 28
View_AtmosphereInscatterTexture, View, 5, 29
View_AtmosphereInscatterTextureSampler, View, 8, 30
View_PerlinNoiseGradientTexture, View, 5, 31
View_PerlinNoiseGradientTextureSampler, View, 8, 32
View_PerlinNoise3DTexture, View, 5, 33
View_PerlinNoise3DTextureSampler, View, 8, 34
View_SobolSamplingTexture, View, 5, 35
View_SharedPointWrappedSampler, View, 8, 36
View_SharedPointClampedSampler, View, 8, 37
View_SharedBilinearWrappedSampler, View, 8, 38
View_SharedBilinearClampedSampler, View, 8, 39
View_SharedBilinearAnisoClampedSampler, View, 8, 40
View_SharedTrilinearWrappedSampler, View, 8, 41
View_SharedTrilinearClampedSampler, View, 8, 42
View_PreIntegratedBRDF, View, 5, 43
View_PreIntegratedBRDFSampler, View, 8, 44
View_PrimitiveSceneData, View, 6, 45
View_InstanceSceneData, View, 6, 46
View_InstancePayloadData, View, 6, 47
View_LightmapSceneData, View, 6, 48
View_SkyIrradianceEnvironmentMap, View, 6, 49
View_TransmittanceLutTexture, View, 5, 50
View_TransmittanceLutTextureSampler, View, 8, 51
View_SkyViewLutTexture, View, 5, 52
View_SkyViewLutTextureSampler, View, 8, 53
View_DistantSkyLightLutTexture, View, 5, 54
View_DistantSkyLightLutTextureSampler, View, 8, 55
View_CameraAerialPerspectiveVolume, View, 5, 56
View_CameraAerialPerspectiveVolumeSampler, View, 8, 57
View_HairScatteringLUTTexture, View, 5, 58
View_HairScatteringLUTSampler, View, 8, 59
View_LTCMatTexture, View, 5, 60
View_LTCMatSampler, View, 8, 61
View_LTCAmpTexture, View, 5, 62
View_LTCAmpSampler, View, 8, 63
View_ShadingEnergyGGXSpecTexture, View, 5, 64
View_ShadingEnergyGGXGlassTexture, View, 5, 65
View_ShadingEnergyClothSpecTexture, View, 5, 66
View_ShadingEnergyDiffuseTexture, View, 5, 67
View_ShadingEnergySampler, View, 8, 68
View_SSProfilesTexture, View, 5, 69
View_SSProfilesSampler, View, 8, 70
View_SSProfilesTransmissionSampler, View, 8, 71
View_SSProfilesPreIntegratedTexture, View, 5, 72
View_SSProfilesPreIntegratedSampler, View, 8, 73
View_WaterIndirection, View, 6, 74
View_WaterData, View, 6, 75
View_RectLightAtlasTexture, View, 5, 76
View_RectLightAtlasSampler, View, 8, 77
View_LandscapeWeightmapSampler, View, 8, 78
View_LandscapeIndirection, View, 6, 79
View_LandscapePerComponentData, View, 6, 80
View_VTFeedbackBuffer, View, 7, 81
View_EditorVisualizeLevelInstanceIds, View, 6, 82
View_EditorSelectedHitProxyIds, View, 6, 83
View_PhysicsFieldClipmapBuffer, View, 6, 84
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 6
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 7
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 8
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 9
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 10
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 14
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 15
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 16
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 17
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 18
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 11
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 12
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM6 -entry=MainCS -shaderPlatformName=PCD3D_SM6 -cs D:/Programming II/Compulsory1/P2Compulsory1/Saved/ShaderDebugInfo/PCD3D_SM6/Global/FTonemapCS/8637/PostProcessTonemap.usf -cflags=537923584 -nocrashreports
#endif /*DIRECT COMPILE*/
//
